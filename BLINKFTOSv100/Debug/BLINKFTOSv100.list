
BLINKFTOSv100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbc8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800ce60  0800ce60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ce98  0800ce98  0001ce98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cea0  0800cea0  0001cea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cea4  0800cea4  0001cea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800cea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800ceb8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800cf18  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000104c  240000d0  0800cf78  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400111c  0800cf78  0002111c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030a23  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000465d  00000000  00000000  00050b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023a0  00000000  00000000  00055180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002200  00000000  00000000  00057520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f329  00000000  00000000  00059720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002de89  00000000  00000000  00098a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bc93  00000000  00000000  000c68d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00252565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d2c  00000000  00000000  002525b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ce48 	.word	0x0800ce48

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800ce48 	.word	0x0800ce48

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 ff88 	bl	80024f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81c 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fd44 	bl	8001074 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ec:	f000 f89c 	bl	8000728 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005f0:	f000 f914 	bl	800081c <MX_DFSDM1_Init>
  MX_ETH_Init();
 80005f4:	f000 f94a 	bl	800088c <MX_ETH_Init>
  MX_FMC_Init();
 80005f8:	f000 fc40 	bl	8000e7c <MX_FMC_Init>
  MX_I2C1_Init();
 80005fc:	f000 f992 	bl	8000924 <MX_I2C1_Init>
  MX_LTDC_Init();
 8000600:	f000 f9d0 	bl	80009a4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000604:	f000 fa80 	bl	8000b08 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000608:	f000 faa6 	bl	8000b58 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800060c:	f000 fb62 	bl	8000cd4 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 8000610:	f000 fb84 	bl	8000d1c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000614:	f000 fbce 	bl	8000db4 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000618:	f000 fbfe 	bl	8000e18 <MX_USB_OTG_HS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x40>
	...

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	; 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	224c      	movs	r2, #76	; 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00c fc02 	bl	800ce38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00c fbfc 	bl	800ce38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000640:	2002      	movs	r0, #2
 8000642:	f004 fee3 	bl	800540c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b35      	ldr	r3, [pc, #212]	; (8000720 <SystemClock_Config+0x100>)
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	4a34      	ldr	r2, [pc, #208]	; (8000720 <SystemClock_Config+0x100>)
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <SystemClock_Config+0x100>)
 8000658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <SystemClock_Config+0x104>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a2f      	ldr	r2, [pc, #188]	; (8000724 <SystemClock_Config+0x104>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <SystemClock_Config+0x104>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000678:	bf00      	nop
 800067a:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <SystemClock_Config+0x104>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000686:	d1f8      	bne.n	800067a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000688:	2322      	movs	r3, #34	; 0x22
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800068c:	2301      	movs	r3, #1
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2340      	movs	r3, #64	; 0x40
 8000692:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80006a4:	2309      	movs	r3, #9
 80006a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b4:	230c      	movs	r3, #12
 80006b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80006b8:	2302      	movs	r3, #2
 80006ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80006bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 ffa4 	bl	8005614 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006d2:	f000 fdf9 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	233f      	movs	r3, #63	; 0x3f
 80006d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2303      	movs	r3, #3
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80006ee:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 fbe3 	bl	8005ec8 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000708:	f000 fdde 	bl	80012c8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800070c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f005 fd8e 	bl	8006234 <HAL_RCC_MCOConfig>
}
 8000718:	bf00      	nop
 800071a:	3770      	adds	r7, #112	; 0x70
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58000400 	.word	0x58000400
 8000724:	58024800 	.word	0x58024800

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_ADC1_Init+0xe4>)
 800074e:	4a30      	ldr	r2, [pc, #192]	; (8000810 <MX_ADC1_Init+0xe8>)
 8000750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_ADC1_Init+0xe4>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_ADC1_Init+0xe4>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_ADC1_Init+0xe4>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_ADC1_Init+0xe4>)
 8000766:	2204      	movs	r2, #4
 8000768:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_ADC1_Init+0xe4>)
 800076c:	2200      	movs	r2, #0
 800076e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_ADC1_Init+0xe4>)
 8000772:	2200      	movs	r2, #0
 8000774:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_ADC1_Init+0xe4>)
 8000778:	2201      	movs	r2, #1
 800077a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_ADC1_Init+0xe4>)
 800077e:	2200      	movs	r2, #0
 8000780:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_ADC1_Init+0xe4>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_ADC1_Init+0xe4>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0xe4>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_ADC1_Init+0xe4>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0xe4>)
 800079c:	2200      	movs	r2, #0
 800079e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_ADC1_Init+0xe4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a8:	4818      	ldr	r0, [pc, #96]	; (800080c <MX_ADC1_Init+0xe4>)
 80007aa:	f002 f91b 	bl	80029e4 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007b4:	f000 fd88 	bl	80012c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <MX_ADC1_Init+0xe4>)
 80007c4:	f002 ff32 	bl	800362c <HAL_ADCEx_MultiModeConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007ce:	f000 fd7b 	bl	80012c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_ADC1_Init+0xec>)
 80007d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d6:	2306      	movs	r3, #6
 80007d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_ADC1_Init+0xf0>)
 80007e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e2:	2304      	movs	r3, #4
 80007e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC1_Init+0xe4>)
 80007f4:	f002 fa98 	bl	8002d28 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80007fe:	f000 fd63 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	24000124 	.word	0x24000124
 8000810:	40022000 	.word	0x40022000
 8000814:	04300002 	.word	0x04300002
 8000818:	47ff0000 	.word	0x47ff0000

0800081c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <MX_DFSDM1_Init+0x6c>)
 8000824:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000828:	2201      	movs	r2, #1
 800082a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000852:	2204      	movs	r2, #4
 8000854:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800085e:	2201      	movs	r2, #1
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000870:	f003 f89e 	bl	80039b0 <HAL_DFSDM_ChannelInit>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800087a:	f000 fd25 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	24000188 	.word	0x24000188
 8000888:	40017020 	.word	0x40017020

0800088c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_ETH_Init+0x80>)
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_ETH_Init+0x84>)
 8000894:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_ETH_Init+0x88>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_ETH_Init+0x88>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_ETH_Init+0x88>)
 80008a4:	22e1      	movs	r2, #225	; 0xe1
 80008a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_ETH_Init+0x88>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_ETH_Init+0x88>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_ETH_Init+0x88>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_ETH_Init+0x80>)
 80008bc:	4a15      	ldr	r2, [pc, #84]	; (8000914 <MX_ETH_Init+0x88>)
 80008be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_ETH_Init+0x80>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_ETH_Init+0x80>)
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_ETH_Init+0x8c>)
 80008ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_ETH_Init+0x80>)
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <MX_ETH_Init+0x90>)
 80008d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_ETH_Init+0x80>)
 80008d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_ETH_Init+0x80>)
 80008dc:	f003 f97c 	bl	8003bd8 <HAL_ETH_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008e6:	f000 fcef 	bl	80012c8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008ea:	2238      	movs	r2, #56	; 0x38
 80008ec:	2100      	movs	r1, #0
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_ETH_Init+0x94>)
 80008f0:	f00c faa2 	bl	800ce38 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_ETH_Init+0x94>)
 80008f6:	2221      	movs	r2, #33	; 0x21
 80008f8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_ETH_Init+0x94>)
 80008fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000900:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_ETH_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	240001c0 	.word	0x240001c0
 8000910:	40028000 	.word	0x40028000
 8000914:	240010dc 	.word	0x240010dc
 8000918:	24000070 	.word	0x24000070
 800091c:	24000010 	.word	0x24000010
 8000920:	240000ec 	.word	0x240000ec

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_I2C1_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <MX_I2C1_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109093DC;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_I2C1_Init+0x74>)
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <MX_I2C1_Init+0x7c>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_I2C1_Init+0x74>)
 800093c:	2201      	movs	r2, #1
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095e:	480e      	ldr	r0, [pc, #56]	; (8000998 <MX_I2C1_Init+0x74>)
 8000960:	f003 ff28 	bl	80047b4 <HAL_I2C_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096a:	f000 fcad 	bl	80012c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <MX_I2C1_Init+0x74>)
 8000972:	f003 ffaf 	bl	80048d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800097c:	f000 fca4 	bl	80012c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_I2C1_Init+0x74>)
 8000984:	f003 fff1 	bl	800496a <HAL_I2CEx_ConfigDigitalFilter>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 fc9b 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	24000270 	.word	0x24000270
 800099c:	40005400 	.word	0x40005400
 80009a0:	109093dc 	.word	0x109093dc

080009a4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09a      	sub	sp, #104	; 0x68
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ae:	2234      	movs	r2, #52	; 0x34
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f00c fa40 	bl	800ce38 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2234      	movs	r2, #52	; 0x34
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f00c fa3a 	bl	800ce38 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009c4:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009c6:	4a4f      	ldr	r2, [pc, #316]	; (8000b04 <MX_LTDC_Init+0x160>)
 80009c8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009ca:	4b4d      	ldr	r3, [pc, #308]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009d0:	4b4b      	ldr	r3, [pc, #300]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009d6:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009dc:	4b48      	ldr	r3, [pc, #288]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80009e2:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80009e8:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009ea:	2203      	movs	r2, #3
 80009ec:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80009ee:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009f0:	220e      	movs	r2, #14
 80009f2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80009f4:	4b42      	ldr	r3, [pc, #264]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009f6:	2205      	movs	r2, #5
 80009f8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80009fa:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <MX_LTDC_Init+0x15c>)
 80009fc:	f240 228e 	movw	r2, #654	; 0x28e
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000a02:	4b3f      	ldr	r3, [pc, #252]	; (8000b00 <MX_LTDC_Init+0x15c>)
 8000a04:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <MX_LTDC_Init+0x15c>)
 8000a0c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000a12:	4b3b      	ldr	r3, [pc, #236]	; (8000b00 <MX_LTDC_Init+0x15c>)
 8000a14:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a1a:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <MX_LTDC_Init+0x15c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a22:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <MX_LTDC_Init+0x15c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a2a:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <MX_LTDC_Init+0x15c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a32:	4833      	ldr	r0, [pc, #204]	; (8000b00 <MX_LTDC_Init+0x15c>)
 8000a34:	f003 ffe6 	bl	8004a04 <HAL_LTDC_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000a3e:	f000 fc43 	bl	80012c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a52:	2300      	movs	r3, #0
 8000a54:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a62:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a64:	2305      	movs	r3, #5
 8000a66:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481c      	ldr	r0, [pc, #112]	; (8000b00 <MX_LTDC_Init+0x15c>)
 8000a90:	f004 f888 	bl	8004ba4 <HAL_LTDC_ConfigLayer>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000a9a:	f000 fc15 	bl	80012c8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abe:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ac0:	2305      	movs	r3, #5
 8000ac2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_LTDC_Init+0x15c>)
 8000aea:	f004 f85b 	bl	8004ba4 <HAL_LTDC_ConfigLayer>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000af4:	f000 fbe8 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3768      	adds	r7, #104	; 0x68
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	240002c4 	.word	0x240002c4
 8000b04:	50001000 	.word	0x50001000

08000b08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <MX_QUADSPI_Init+0x4c>)
 8000b10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b14:	22ff      	movs	r2, #255	; 0xff
 8000b16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b38:	2240      	movs	r2, #64	; 0x40
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_QUADSPI_Init+0x48>)
 8000b3e:	f004 fcaf 	bl	80054a0 <HAL_QSPI_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8000b48:	f000 fbbe 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2400036c 	.word	0x2400036c
 8000b54:	52005000 	.word	0x52005000

08000b58 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b5c:	4b58      	ldr	r3, [pc, #352]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b5e:	4a59      	ldr	r2, [pc, #356]	; (8000cc4 <MX_SAI1_Init+0x16c>)
 8000b60:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b62:	4b57      	ldr	r3, [pc, #348]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b68:	4b55      	ldr	r3, [pc, #340]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000b6e:	4b54      	ldr	r3, [pc, #336]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b70:	2240      	movs	r2, #64	; 0x40
 8000b72:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b74:	4b52      	ldr	r3, [pc, #328]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b7a:	4b51      	ldr	r3, [pc, #324]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b80:	4b4f      	ldr	r3, [pc, #316]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b86:	4b4e      	ldr	r3, [pc, #312]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b8c:	4b4c      	ldr	r3, [pc, #304]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b92:	4b4b      	ldr	r3, [pc, #300]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b98:	4b49      	ldr	r3, [pc, #292]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000b9a:	4a4b      	ldr	r2, [pc, #300]	; (8000cc8 <MX_SAI1_Init+0x170>)
 8000b9c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b9e:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ba4:	4b46      	ldr	r3, [pc, #280]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000baa:	4b45      	ldr	r3, [pc, #276]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000bb0:	4b43      	ldr	r3, [pc, #268]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000bb6:	4b42      	ldr	r3, [pc, #264]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000bbe:	4b40      	ldr	r3, [pc, #256]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000bc4:	4b3e      	ldr	r3, [pc, #248]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000bcc:	4b3c      	ldr	r3, [pc, #240]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bce:	2208      	movs	r2, #8
 8000bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000bd8:	4b39      	ldr	r3, [pc, #228]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000bde:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000be4:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000bea:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000bf0:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000bf6:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000c02:	482f      	ldr	r0, [pc, #188]	; (8000cc0 <MX_SAI1_Init+0x168>)
 8000c04:	f008 fa54 	bl	80090b0 <HAL_SAI_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000c0e:	f000 fb5b 	bl	80012c8 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c14:	4a2e      	ldr	r2, [pc, #184]	; (8000cd0 <MX_SAI1_Init+0x178>)
 8000c16:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c26:	2240      	movs	r2, #64	; 0x40
 8000c28:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c3c:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c74:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c78:	2208      	movs	r2, #8
 8000c7a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <MX_SAI1_Init+0x174>)
 8000cae:	f008 f9ff 	bl	80090b0 <HAL_SAI_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 8000cb8:	f000 fb06 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	240003b8 	.word	0x240003b8
 8000cc4:	40015804 	.word	0x40015804
 8000cc8:	0002ee00 	.word	0x0002ee00
 8000ccc:	24000450 	.word	0x24000450
 8000cd0:	40015824 	.word	0x40015824

08000cd4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_SDMMC1_SD_Init+0x40>)
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <MX_SDMMC1_SD_Init+0x44>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_SDMMC1_SD_Init+0x40>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_SDMMC1_SD_Init+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_SDMMC1_SD_Init+0x40>)
 8000cec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_SDMMC1_SD_Init+0x40>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_SDMMC1_SD_Init+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_SDMMC1_SD_Init+0x40>)
 8000d00:	f008 fcba 	bl	8009678 <HAL_SD_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000d0a:	f000 fadd 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	240004e8 	.word	0x240004e8
 8000d18:	52007000 	.word	0x52007000

08000d1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d22:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <MX_USART1_UART_Init+0x94>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d66:	f009 fd81 	bl	800a86c <HAL_UART_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d70:	f000 faaa 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d78:	f00a fd83 	bl	800b882 <HAL_UARTEx_SetTxFifoThreshold>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d82:	f000 faa1 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d86:	2100      	movs	r1, #0
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d8a:	f00a fdb8 	bl	800b8fe <HAL_UARTEx_SetRxFifoThreshold>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d94:	f000 fa98 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_USART1_UART_Init+0x90>)
 8000d9a:	f00a fd39 	bl	800b810 <HAL_UARTEx_DisableFifoMode>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000da4:	f000 fa90 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	24000564 	.word	0x24000564
 8000db0:	40011000 	.word	0x40011000

08000db4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc0:	2209      	movs	r2, #9
 8000dc2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dfc:	f004 f9be 	bl	800517c <HAL_PCD_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e06:	f000 fa5f 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	240005f8 	.word	0x240005f8
 8000e14:	40080000 	.word	0x40080000

08000e18 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000e20:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e24:	2209      	movs	r2, #9
 8000e26:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e60:	f004 f98c 	bl	800517c <HAL_PCD_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e6a:	f000 fa2d 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24000b04 	.word	0x24000b04
 8000e78:	40040000 	.word	0x40040000

08000e7c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	; 0x38
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000ea8:	4b6c      	ldr	r3, [pc, #432]	; (800105c <MX_FMC_Init+0x1e0>)
 8000eaa:	4a6d      	ldr	r2, [pc, #436]	; (8001060 <MX_FMC_Init+0x1e4>)
 8000eac:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000eae:	4b6b      	ldr	r3, [pc, #428]	; (800105c <MX_FMC_Init+0x1e0>)
 8000eb0:	4a6c      	ldr	r2, [pc, #432]	; (8001064 <MX_FMC_Init+0x1e8>)
 8000eb2:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000eb4:	4b69      	ldr	r3, [pc, #420]	; (800105c <MX_FMC_Init+0x1e0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000eba:	4b68      	ldr	r3, [pc, #416]	; (800105c <MX_FMC_Init+0x1e0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000ec0:	4b66      	ldr	r3, [pc, #408]	; (800105c <MX_FMC_Init+0x1e0>)
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ec6:	4b65      	ldr	r3, [pc, #404]	; (800105c <MX_FMC_Init+0x1e0>)
 8000ec8:	2210      	movs	r2, #16
 8000eca:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000ecc:	4b63      	ldr	r3, [pc, #396]	; (800105c <MX_FMC_Init+0x1e0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ed2:	4b62      	ldr	r3, [pc, #392]	; (800105c <MX_FMC_Init+0x1e0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ed8:	4b60      	ldr	r3, [pc, #384]	; (800105c <MX_FMC_Init+0x1e0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000ede:	4b5f      	ldr	r3, [pc, #380]	; (800105c <MX_FMC_Init+0x1e0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000ee4:	4b5d      	ldr	r3, [pc, #372]	; (800105c <MX_FMC_Init+0x1e0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000eea:	4b5c      	ldr	r3, [pc, #368]	; (800105c <MX_FMC_Init+0x1e0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000ef0:	4b5a      	ldr	r3, [pc, #360]	; (800105c <MX_FMC_Init+0x1e0>)
 8000ef2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000ef8:	4b58      	ldr	r3, [pc, #352]	; (800105c <MX_FMC_Init+0x1e0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000efe:	4b57      	ldr	r3, [pc, #348]	; (800105c <MX_FMC_Init+0x1e0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000f04:	4b55      	ldr	r3, [pc, #340]	; (800105c <MX_FMC_Init+0x1e0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000f0a:	4b54      	ldr	r3, [pc, #336]	; (800105c <MX_FMC_Init+0x1e0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f10:	230f      	movs	r3, #15
 8000f12:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000f14:	230f      	movs	r3, #15
 8000f16:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000f18:	23ff      	movs	r3, #255	; 0xff
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000f20:	2310      	movs	r3, #16
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000f24:	2311      	movs	r3, #17
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	4849      	ldr	r0, [pc, #292]	; (800105c <MX_FMC_Init+0x1e0>)
 8000f36:	f004 f80d 	bl	8004f54 <HAL_NOR_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_FMC_Init+0xc8>
  {
    Error_Handler( );
 8000f40:	f000 f9c2 	bl	80012c8 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000f44:	4b48      	ldr	r3, [pc, #288]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f46:	4a46      	ldr	r2, [pc, #280]	; (8001060 <MX_FMC_Init+0x1e4>)
 8000f48:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f4a:	4b47      	ldr	r3, [pc, #284]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f4c:	4a45      	ldr	r2, [pc, #276]	; (8001064 <MX_FMC_Init+0x1e8>)
 8000f4e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8000f50:	4b45      	ldr	r3, [pc, #276]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f52:	2204      	movs	r2, #4
 8000f54:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f56:	4b44      	ldr	r3, [pc, #272]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000f5c:	4b42      	ldr	r3, [pc, #264]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f62:	4b41      	ldr	r3, [pc, #260]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f64:	2210      	movs	r2, #16
 8000f66:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000f68:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000f74:	4b3c      	ldr	r3, [pc, #240]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000f80:	4b39      	ldr	r3, [pc, #228]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000f8c:	4b36      	ldr	r3, [pc, #216]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000f94:	4b34      	ldr	r3, [pc, #208]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000fa0:	4b31      	ldr	r3, [pc, #196]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fac:	230f      	movs	r3, #15
 8000fae:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000fb4:	23ff      	movs	r3, #255	; 0xff
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000fb8:	230f      	movs	r3, #15
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000fc0:	2311      	movs	r3, #17
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4825      	ldr	r0, [pc, #148]	; (8001068 <MX_FMC_Init+0x1ec>)
 8000fd2:	f009 fbfb 	bl	800a7cc <HAL_SRAM_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_FMC_Init+0x164>
  {
    Error_Handler( );
 8000fdc:	f000 f974 	bl	80012c8 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_FMC_Init+0x1f0>)
 8000fe2:	4a23      	ldr	r2, [pc, #140]	; (8001070 <MX_FMC_Init+0x1f4>)
 8000fe4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_FMC_Init+0x1f0>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_FMC_Init+0x1f0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_FMC_Init+0x1f0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_FMC_Init+0x1f0>)
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_FMC_Init+0x1f0>)
 8001000:	2240      	movs	r2, #64	; 0x40
 8001002:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_FMC_Init+0x1f0>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_FMC_Init+0x1f0>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_FMC_Init+0x1f0>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_FMC_Init+0x1f0>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_FMC_Init+0x1f0>)
 800101e:	2200      	movs	r2, #0
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001022:	2310      	movs	r3, #16
 8001024:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001026:	2310      	movs	r3, #16
 8001028:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 800102a:	2310      	movs	r3, #16
 800102c:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 800102e:	2310      	movs	r3, #16
 8001030:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 8001032:	2310      	movs	r3, #16
 8001034:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 8001036:	2310      	movs	r3, #16
 8001038:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 800103a:	2310      	movs	r3, #16
 800103c:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <MX_FMC_Init+0x1f0>)
 8001044:	f009 fb86 	bl	800a754 <HAL_SDRAM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_FMC_Init+0x1d6>
  {
    Error_Handler( );
 800104e:	f000 f93b 	bl	80012c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001052:	bf00      	nop
 8001054:	3738      	adds	r7, #56	; 0x38
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	24001010 	.word	0x24001010
 8001060:	52004000 	.word	0x52004000
 8001064:	52004104 	.word	0x52004104
 8001068:	2400105c 	.word	0x2400105c
 800106c:	240010a8 	.word	0x240010a8
 8001070:	52004140 	.word	0x52004140

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b090      	sub	sp, #64	; 0x40
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800108a:	4b89      	ldr	r3, [pc, #548]	; (80012b0 <MX_GPIO_Init+0x23c>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a87      	ldr	r2, [pc, #540]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b85      	ldr	r3, [pc, #532]	; (80012b0 <MX_GPIO_Init+0x23c>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80010a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b81      	ldr	r3, [pc, #516]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a80      	ldr	r2, [pc, #512]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b7d      	ldr	r3, [pc, #500]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010c6:	4b7a      	ldr	r3, [pc, #488]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a78      	ldr	r2, [pc, #480]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e4:	4b72      	ldr	r3, [pc, #456]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a71      	ldr	r2, [pc, #452]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80010ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b6e      	ldr	r3, [pc, #440]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001102:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a69      	ldr	r2, [pc, #420]	; (80012b0 <MX_GPIO_Init+0x23c>)
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001120:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	4a62      	ldr	r2, [pc, #392]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001130:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113e:	4b5c      	ldr	r3, [pc, #368]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a5a      	ldr	r2, [pc, #360]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114e:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800115c:	4b54      	ldr	r3, [pc, #336]	; (80012b0 <MX_GPIO_Init+0x23c>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	4a53      	ldr	r2, [pc, #332]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116c:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <MX_GPIO_Init+0x23c>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	4b4d      	ldr	r3, [pc, #308]	; (80012b0 <MX_GPIO_Init+0x23c>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <MX_GPIO_Init+0x23c>)
 8001182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118a:	4b49      	ldr	r3, [pc, #292]	; (80012b0 <MX_GPIO_Init+0x23c>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <MX_GPIO_Init+0x23c>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	4a44      	ldr	r2, [pc, #272]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a8:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b6:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80011be:	f043 0320 	orr.w	r3, r3, #32
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <MX_GPIO_Init+0x23c>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	f003 0320 	and.w	r3, r3, #32
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STBY_GPIO_Port, FDCAN1_STBY_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2108      	movs	r1, #8
 80011d8:	4836      	ldr	r0, [pc, #216]	; (80012b4 <MX_GPIO_Init+0x240>)
 80011da:	f003 fad1 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_RGB_GPIO_Port, LED1_RGB_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e4:	4834      	ldr	r0, [pc, #208]	; (80012b8 <MX_GPIO_Init+0x244>)
 80011e6:	f003 facb 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LED3_RGB_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2150      	movs	r1, #80	; 0x50
 80011ee:	4833      	ldr	r0, [pc, #204]	; (80012bc <MX_GPIO_Init+0x248>)
 80011f0:	f003 fac6 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FDCAN1_STBY_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STBY_Pin;
 80011f4:	2308      	movs	r3, #8
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FDCAN1_STBY_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001208:	4619      	mov	r1, r3
 800120a:	482a      	ldr	r0, [pc, #168]	; (80012b4 <MX_GPIO_Init+0x240>)
 800120c:	f003 f908 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM1_CLK_Pin */
  GPIO_InitStruct.Pin = PDM1_CLK_Pin;
 8001210:	2304      	movs	r3, #4
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001220:	230a      	movs	r3, #10
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PDM1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001228:	4619      	mov	r1, r3
 800122a:	4825      	ldr	r0, [pc, #148]	; (80012c0 <MX_GPIO_Init+0x24c>)
 800122c:	f003 f8f8 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQOUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQOUT_Pin;
 8001230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001236:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MFX_IRQOUT_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001244:	4619      	mov	r1, r3
 8001246:	481f      	ldr	r0, [pc, #124]	; (80012c4 <MX_GPIO_Init+0x250>)
 8001248:	f003 f8ea 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800125e:	2300      	movs	r3, #0
 8001260:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001266:	4619      	mov	r1, r3
 8001268:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_GPIO_Init+0x248>)
 800126a:	f003 f8d9 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_RGB_Pin */
  GPIO_InitStruct.Pin = LED1_RGB_Pin;
 800126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_RGB_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_GPIO_Init+0x244>)
 8001288:	f003 f8ca 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin LED3_RGB_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|LED3_RGB_Pin;
 800128c:	2350      	movs	r3, #80	; 0x50
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_GPIO_Init+0x248>)
 80012a4:	f003 f8bc 	bl	8004420 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a8:	bf00      	nop
 80012aa:	3740      	adds	r7, #64	; 0x40
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020c00 	.word	0x58020c00
 80012b8:	58021400 	.word	0x58021400
 80012bc:	58020000 	.word	0x58020000
 80012c0:	58021000 	.word	0x58021000
 80012c4:	58022000 	.word	0x58022000

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <Error_Handler+0x8>
	...

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_MspInit+0x30>)
 80012dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x30>)
 80012e2:	f043 0302 	orr.w	r3, r3, #2
 80012e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x30>)
 80012ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	58024400 	.word	0x58024400

08001308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0b4      	sub	sp, #208	; 0xd0
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	22c0      	movs	r2, #192	; 0xc0
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f00b fd8d 	bl	800ce38 <memset>
  if(hadc->Instance==ADC1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a2a      	ldr	r2, [pc, #168]	; (80013cc <HAL_ADC_MspInit+0xc4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d14d      	bne.n	80013c4 <HAL_ADC_MspInit+0xbc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001328:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001334:	2304      	movs	r3, #4
 8001336:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001338:	2309      	movs	r3, #9
 800133a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001340:	2302      	movs	r3, #2
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001344:	2302      	movs	r3, #2
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001348:	23c0      	movs	r3, #192	; 0xc0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800134c:	2320      	movs	r3, #32
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001350:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4618      	mov	r0, r3
 8001362:	f005 f9a7 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 800136c:	f7ff ffac 	bl	80012c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_ADC_MspInit+0xc8>)
 8001372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001376:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <HAL_ADC_MspInit+0xc8>)
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_ADC_MspInit+0xc8>)
 8001382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001386:	f003 0320 	and.w	r3, r3, #32
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_ADC_MspInit+0xc8>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <HAL_ADC_MspInit+0xc8>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_ADC_MspInit+0xc8>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INN1
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80013ac:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80013b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80013b4:	f001 f974 	bl	80026a0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80013b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80013bc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80013c0:	f001 f96e 	bl	80026a0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	37d0      	adds	r7, #208	; 0xd0
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40022000 	.word	0x40022000
 80013d0:	58024400 	.word	0x58024400

080013d4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0ba      	sub	sp, #232	; 0xe8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	22c0      	movs	r2, #192	; 0xc0
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00b fd1f 	bl	800ce38 <memset>
  if(DFSDM1_Init == 0)
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xf4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d15e      	bne.n	80014c0 <HAL_DFSDM_ChannelMspInit+0xec>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001402:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 800140e:	2300      	movs	r3, #0
 8001410:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f005 f94c 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_DFSDM_ChannelMspInit+0x52>
    {
      Error_Handler();
 8001422:	f7ff ff51 	bl	80012c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xf8>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	4a20      	ldr	r2, [pc, #128]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xf8>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_DFSDM_ChannelMspInit+0xf8>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM_CLK_Pin;
 8001462:	2304      	movs	r3, #4
 8001464:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800147a:	2306      	movs	r3, #6
 800147c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(DFSDM_CLK_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001484:	4619      	mov	r1, r3
 8001486:	4812      	ldr	r0, [pc, #72]	; (80014d0 <HAL_DFSDM_ChannelMspInit+0xfc>)
 8001488:	f002 ffca 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSM_DAT1_Pin;
 800148c:	2308      	movs	r3, #8
 800148e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80014a4:	2303      	movs	r3, #3
 80014a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(DFSM_DAT1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014ae:	4619      	mov	r1, r3
 80014b0:	4807      	ldr	r0, [pc, #28]	; (80014d0 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80014b2:	f002 ffb5 	bl	8004420 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xf4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a02      	ldr	r2, [pc, #8]	; (80014c8 <HAL_DFSDM_ChannelMspInit+0xf4>)
 80014be:	6013      	str	r3, [r2, #0]
  }

}
 80014c0:	bf00      	nop
 80014c2:	37e8      	adds	r7, #232	; 0xe8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	240010e4 	.word	0x240010e4
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a49      	ldr	r2, [pc, #292]	; (8001618 <HAL_ETH_MspInit+0x144>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	f040 808b 	bne.w	800160e <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <HAL_ETH_MspInit+0x148>)
 80014fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014fe:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001504:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001508:	4b44      	ldr	r3, [pc, #272]	; (800161c <HAL_ETH_MspInit+0x148>)
 800150a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800150e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001512:	623b      	str	r3, [r7, #32]
 8001514:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001518:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800151c:	4a3f      	ldr	r2, [pc, #252]	; (800161c <HAL_ETH_MspInit+0x148>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001534:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001536:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800153a:	4a38      	ldr	r2, [pc, #224]	; (800161c <HAL_ETH_MspInit+0x148>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001544:	4b35      	ldr	r3, [pc, #212]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001546:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001552:	4b32      	ldr	r3, [pc, #200]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	4a30      	ldr	r2, [pc, #192]	; (800161c <HAL_ETH_MspInit+0x148>)
 800155a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001576:	4a29      	ldr	r2, [pc, #164]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001594:	4a21      	ldr	r2, [pc, #132]	; (800161c <HAL_ETH_MspInit+0x148>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HAL_ETH_MspInit+0x148>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 80015ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015be:	230b      	movs	r3, #11
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4815      	ldr	r0, [pc, #84]	; (8001620 <HAL_ETH_MspInit+0x14c>)
 80015ca:	f002 ff29 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015ce:	2332      	movs	r3, #50	; 0x32
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015de:	230b      	movs	r3, #11
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	480e      	ldr	r0, [pc, #56]	; (8001624 <HAL_ETH_MspInit+0x150>)
 80015ea:	f002 ff19 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 80015ee:	2386      	movs	r3, #134	; 0x86
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fe:	230b      	movs	r3, #11
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	4807      	ldr	r0, [pc, #28]	; (8001628 <HAL_ETH_MspInit+0x154>)
 800160a:	f002 ff09 	bl	8004420 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3738      	adds	r7, #56	; 0x38
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40028000 	.word	0x40028000
 800161c:	58024400 	.word	0x58024400
 8001620:	58021800 	.word	0x58021800
 8001624:	58020800 	.word	0x58020800
 8001628:	58020000 	.word	0x58020000

0800162c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0ba      	sub	sp, #232	; 0xe8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	22c0      	movs	r2, #192	; 0xc0
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00b fbf3 	bl	800ce38 <memset>
  if(hi2c->Instance==I2C1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <HAL_I2C_MspInit+0xc4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d145      	bne.n	80016e8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800165c:	f04f 0208 	mov.w	r2, #8
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4618      	mov	r0, r3
 8001674:	f005 f81e 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800167e:	f7ff fe23 	bl	80012c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_I2C_MspInit+0xc8>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001688:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_I2C_MspInit+0xc8>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_I2C_MspInit+0xc8>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80016a0:	23c0      	movs	r3, #192	; 0xc0
 80016a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b8:	2304      	movs	r3, #4
 80016ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <HAL_I2C_MspInit+0xcc>)
 80016c6:	f002 feab 	bl	8004420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_I2C_MspInit+0xc8>)
 80016cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_I2C_MspInit+0xc8>)
 80016d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_I2C_MspInit+0xc8>)
 80016dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	37e8      	adds	r7, #232	; 0xe8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40005400 	.word	0x40005400
 80016f4:	58024400 	.word	0x58024400
 80016f8:	58020400 	.word	0x58020400

080016fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b0bc      	sub	sp, #240	; 0xf0
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001714:	f107 0318 	add.w	r3, r7, #24
 8001718:	22c0      	movs	r2, #192	; 0xc0
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f00b fb8b 	bl	800ce38 <memset>
  if(hltdc->Instance==LTDC)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a53      	ldr	r2, [pc, #332]	; (8001874 <HAL_LTDC_MspInit+0x178>)
 8001728:	4293      	cmp	r3, r2
 800172a:	f040 809e 	bne.w	800186a <HAL_LTDC_MspInit+0x16e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800172e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800173a:	2301      	movs	r3, #1
 800173c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 4;
 800173e:	2304      	movs	r3, #4
 8001740:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001742:	2302      	movs	r3, #2
 8001744:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001746:	2302      	movs	r3, #2
 8001748:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800174a:	2302      	movs	r3, #2
 800174c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800174e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001752:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001754:	2300      	movs	r3, #0
 8001756:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	4618      	mov	r0, r3
 8001762:	f004 ffa7 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 800176c:	f7ff fdac 	bl	80012c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001770:	4b41      	ldr	r3, [pc, #260]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 8001772:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001776:	4a40      	ldr	r2, [pc, #256]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001780:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 8001782:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 8001790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001794:	4a38      	ldr	r2, [pc, #224]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800179e:	4b36      	ldr	r3, [pc, #216]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 80017b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	4a29      	ldr	r2, [pc, #164]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 80017d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_LTDC_MspInit+0x17c>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    PJ5     ------> LTDC_R6
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B5_Pin|LCD_B7_Pin|LCD_B4_Pin
 80017e8:	23ff      	movs	r3, #255	; 0xff
 80017ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G5_Pin|LCD_G6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001800:	230e      	movs	r3, #14
 8001802:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001806:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800180a:	4619      	mov	r1, r3
 800180c:	481b      	ldr	r0, [pc, #108]	; (800187c <HAL_LTDC_MspInit+0x180>)
 800180e:	f002 fe07 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B0_Pin|LCD_B1_Pin
 8001812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCd_G3_Pin|LCD_G2_Pin|LCD_R1_Pin
                          |LCD_G1_Pin|LCD_G0_Pin|LCD_R7_Pin|LCD_R2_Pin
                          |LCD_R6_Pin|LCD_R3_Pin|LCD_R4_Pin|LCD_R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800182c:	230e      	movs	r3, #14
 800182e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001832:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001836:	4619      	mov	r1, r3
 8001838:	4811      	ldr	r0, [pc, #68]	; (8001880 <HAL_LTDC_MspInit+0x184>)
 800183a:	f002 fdf1 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin|LCD_R0_Pin;
 800183e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001858:	230e      	movs	r3, #14
 800185a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800185e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001862:	4619      	mov	r1, r3
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <HAL_LTDC_MspInit+0x188>)
 8001866:	f002 fddb 	bl	8004420 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	37f0      	adds	r7, #240	; 0xf0
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	50001000 	.word	0x50001000
 8001878:	58024400 	.word	0x58024400
 800187c:	58022800 	.word	0x58022800
 8001880:	58022400 	.word	0x58022400
 8001884:	58022000 	.word	0x58022000

08001888 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0be      	sub	sp, #248	; 0xf8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	22c0      	movs	r2, #192	; 0xc0
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f00b fac5 	bl	800ce38 <memset>
  if(hqspi->Instance==QUADSPI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_QSPI_MspInit+0x1f4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	f040 80dd 	bne.w	8001a74 <HAL_QSPI_MspInit+0x1ec>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80018ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ca:	f107 0320 	add.w	r3, r7, #32
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 fef0 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80018da:	f7ff fcf5 	bl	80012c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018de:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 80018e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018e4:	4a66      	ldr	r2, [pc, #408]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 80018e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018ee:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 80018f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018fc:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	4a5f      	ldr	r2, [pc, #380]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 8001904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800190c:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800191a:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	4a57      	ldr	r2, [pc, #348]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 8001922:	f043 0320 	orr.w	r3, r3, #32
 8001926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800192a:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001938:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	4a50      	ldr	r2, [pc, #320]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001948:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001966:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_QSPI_MspInit+0x1f8>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8001974:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001978:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800198e:	2309      	movs	r3, #9
 8001990:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001994:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001998:	4619      	mov	r1, r3
 800199a:	483a      	ldr	r0, [pc, #232]	; (8001a84 <HAL_QSPI_MspInit+0x1fc>)
 800199c:	f002 fd40 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80019a0:	2340      	movs	r3, #64	; 0x40
 80019a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019b8:	230a      	movs	r3, #10
 80019ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019c2:	4619      	mov	r1, r3
 80019c4:	482f      	ldr	r0, [pc, #188]	; (8001a84 <HAL_QSPI_MspInit+0x1fc>)
 80019c6:	f002 fd2b 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 80019ca:	23c0      	movs	r3, #192	; 0xc0
 80019cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019e2:	2309      	movs	r3, #9
 80019e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019ec:	4619      	mov	r1, r3
 80019ee:	4826      	ldr	r0, [pc, #152]	; (8001a88 <HAL_QSPI_MspInit+0x200>)
 80019f0:	f002 fd16 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80019f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a0e:	230a      	movs	r3, #10
 8001a10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	481b      	ldr	r0, [pc, #108]	; (8001a88 <HAL_QSPI_MspInit+0x200>)
 8001a1c:	f002 fd00 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8001a20:	230c      	movs	r3, #12
 8001a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a38:	2309      	movs	r3, #9
 8001a3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4811      	ldr	r0, [pc, #68]	; (8001a8c <HAL_QSPI_MspInit+0x204>)
 8001a46:	f002 fceb 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a62:	2309      	movs	r3, #9
 8001a64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4808      	ldr	r0, [pc, #32]	; (8001a90 <HAL_QSPI_MspInit+0x208>)
 8001a70:	f002 fcd6 	bl	8004420 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	37f8      	adds	r7, #248	; 0xf8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	52005000 	.word	0x52005000
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58021800 	.word	0x58021800
 8001a88:	58021400 	.word	0x58021400
 8001a8c:	58021c00 	.word	0x58021c00
 8001a90:	58020400 	.word	0x58020400

08001a94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0bc      	sub	sp, #240	; 0xf0
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aac:	f107 0318 	add.w	r3, r7, #24
 8001ab0:	22c0      	movs	r2, #192	; 0xc0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f00b f9bf 	bl	800ce38 <memset>
  if(hsd->Instance==SDMMC1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a56      	ldr	r2, [pc, #344]	; (8001c18 <HAL_SD_MspInit+0x184>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	f040 80a4 	bne.w	8001c0e <HAL_SD_MspInit+0x17a>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001ac6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad6:	f107 0318 	add.w	r3, r7, #24
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 fdea 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001ae6:	f7ff fbef 	bl	80012c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001aea:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001aec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001af0:	4a4a      	ldr	r2, [pc, #296]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001afa:	4b48      	ldr	r3, [pc, #288]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001afc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b08:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0e:	4a43      	ldr	r2, [pc, #268]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b18:	4b40      	ldr	r3, [pc, #256]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	4a3b      	ldr	r2, [pc, #236]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b44:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4a:	4a34      	ldr	r2, [pc, #208]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b54:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <HAL_SD_MspInit+0x188>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D123DIR
    PC6     ------> SDMMC1_D0DIR
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CLK_Pin|SDIO1_D0_Pin
 8001b62:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b82:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b86:	4619      	mov	r1, r3
 8001b88:	4825      	ldr	r0, [pc, #148]	; (8001c20 <HAL_SD_MspInit+0x18c>)
 8001b8a:	f002 fc49 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CDIR_Pin|SDIO1_CKIN_Pin;
 8001b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SDIO1;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481b      	ldr	r0, [pc, #108]	; (8001c24 <HAL_SD_MspInit+0x190>)
 8001bb6:	f002 fc33 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4812      	ldr	r0, [pc, #72]	; (8001c28 <HAL_SD_MspInit+0x194>)
 8001be0:	f002 fc1e 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D123DIR_Pin|SDIO1_D0DIR_Pin;
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_SDIO1;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c02:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <HAL_SD_MspInit+0x18c>)
 8001c0a:	f002 fc09 	bl	8004420 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	37f0      	adds	r7, #240	; 0xf0
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	52007000 	.word	0x52007000
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	58020800 	.word	0x58020800
 8001c24:	58020400 	.word	0x58020400
 8001c28:	58020c00 	.word	0x58020c00

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0ba      	sub	sp, #232	; 0xe8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	22c0      	movs	r2, #192	; 0xc0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f00b f8f3 	bl	800ce38 <memset>
  if(huart->Instance==USART1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <HAL_UART_MspInit+0xc8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d146      	bne.n	8001cea <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c5c:	f04f 0201 	mov.w	r2, #1
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 fd1e 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c7e:	f7ff fb23 	bl	80012c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_UART_MspInit+0xcc>)
 8001c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <HAL_UART_MspInit+0xcc>)
 8001c8a:	f043 0310 	orr.w	r3, r3, #16
 8001c8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_UART_MspInit+0xcc>)
 8001c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_UART_MspInit+0xcc>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca6:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <HAL_UART_MspInit+0xcc>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_UART_MspInit+0xcc>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001cbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <HAL_UART_MspInit+0xd0>)
 8001ce6:	f002 fb9b 	bl	8004420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cea:	bf00      	nop
 8001cec:	37e8      	adds	r7, #232	; 0xe8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40011000 	.word	0x40011000
 8001cf8:	58024400 	.word	0x58024400
 8001cfc:	58020400 	.word	0x58020400

08001d00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0c2      	sub	sp, #264	; 0x108
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d0e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d24:	22c0      	movs	r2, #192	; 0xc0
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f00b f885 	bl	800ce38 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4aa3      	ldr	r2, [pc, #652]	; (8001fc8 <HAL_PCD_MspInit+0x2c8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d14a      	bne.n	8001dd6 <HAL_PCD_MspInit+0xd6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001d4c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fcab 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_PCD_MspInit+0x68>
    {
      Error_Handler();
 8001d64:	f7ff fab0 	bl	80012c8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001d68:	f003 fb8a 	bl	8005480 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	4b97      	ldr	r3, [pc, #604]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d72:	4a96      	ldr	r2, [pc, #600]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7c:	4b93      	ldr	r3, [pc, #588]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS1_ID_Pin|USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001d8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001da4:	230a      	movs	r3, #10
 8001da6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4887      	ldr	r0, [pc, #540]	; (8001fd0 <HAL_PCD_MspInit+0x2d0>)
 8001db2:	f002 fb35 	bl	8004420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001db6:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dbc:	4a83      	ldr	r2, [pc, #524]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001dbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dc6:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001dd4:	e0f3      	b.n	8001fbe <HAL_PCD_MspInit+0x2be>
  else if(hpcd->Instance==USB_OTG_HS)
 8001dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7c      	ldr	r2, [pc, #496]	; (8001fd4 <HAL_PCD_MspInit+0x2d4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	f040 80ea 	bne.w	8001fbe <HAL_PCD_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001dea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001df6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fc56 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_PCD_MspInit+0x112>
      Error_Handler();
 8001e0e:	f7ff fa5b 	bl	80012c8 <Error_Handler>
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e12:	f003 fb35 	bl	8005480 <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	4b6d      	ldr	r3, [pc, #436]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1c:	4a6b      	ldr	r2, [pc, #428]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e1e:	f043 0302 	orr.w	r3, r3, #2
 8001e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e26:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e34:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3a:	4a64      	ldr	r2, [pc, #400]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e44:	4b61      	ldr	r3, [pc, #388]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	4a5c      	ldr	r2, [pc, #368]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e62:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e70:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e76:	4a55      	ldr	r2, [pc, #340]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e80:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8001eac:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4841      	ldr	r0, [pc, #260]	; (8001fd8 <HAL_PCD_MspInit+0x2d8>)
 8001ed4:	f002 faa4 	bl	8004420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001edc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eec:	2302      	movs	r3, #2
 8001eee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4837      	ldr	r0, [pc, #220]	; (8001fdc <HAL_PCD_MspInit+0x2dc>)
 8001f00:	f002 fa8e 	bl	8004420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001f1c:	230a      	movs	r3, #10
 8001f1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f26:	4619      	mov	r1, r3
 8001f28:	482d      	ldr	r0, [pc, #180]	; (8001fe0 <HAL_PCD_MspInit+0x2e0>)
 8001f2a:	f002 fa79 	bl	8004420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f2e:	2310      	movs	r3, #16
 8001f30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001f46:	230a      	movs	r3, #10
 8001f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4824      	ldr	r0, [pc, #144]	; (8001fe4 <HAL_PCD_MspInit+0x2e4>)
 8001f54:	f002 fa64 	bl	8004420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001f58:	2328      	movs	r3, #40	; 0x28
 8001f5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001f70:	230a      	movs	r3, #10
 8001f72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4814      	ldr	r0, [pc, #80]	; (8001fd0 <HAL_PCD_MspInit+0x2d0>)
 8001f7e:	f002 fa4f 	bl	8004420 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f88:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001fa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_PCD_MspInit+0x2cc>)
 8001fb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
}
 8001fbe:	bf00      	nop
 8001fc0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40080000 	.word	0x40080000
 8001fcc:	58024400 	.word	0x58024400
 8001fd0:	58020000 	.word	0x58020000
 8001fd4:	40040000 	.word	0x40040000
 8001fd8:	58020400 	.word	0x58020400
 8001fdc:	58022000 	.word	0x58022000
 8001fe0:	58020800 	.word	0x58020800
 8001fe4:	58021c00 	.word	0x58021c00

08001fe8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0b8      	sub	sp, #224	; 0xe0
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001fee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <HAL_FMC_MspInit+0x188>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 80b0 	bne.w	8002168 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8002008:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_FMC_MspInit+0x188>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	22c0      	movs	r2, #192	; 0xc0
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f00a ff0e 	bl	800ce38 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800201c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002028:	2300      	movs	r3, #0
 800202a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fb3f 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800203c:	f7ff f944 	bl	80012c8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002040:	4b4c      	ldr	r3, [pc, #304]	; (8002174 <HAL_FMC_MspInit+0x18c>)
 8002042:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002046:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_FMC_MspInit+0x18c>)
 8002048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800204c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002050:	4b48      	ldr	r3, [pc, #288]	; (8002174 <HAL_FMC_MspInit+0x18c>)
 8002052:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin
 800205e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002062:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D24_Pin|D29_Pin|D26_Pin|D27__IS42S32800G_DQ27_Pin
                          |D30_Pin|D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002078:	230c      	movs	r3, #12
 800207a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800207e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002082:	4619      	mov	r1, r3
 8002084:	483c      	ldr	r0, [pc, #240]	; (8002178 <HAL_FMC_MspInit+0x190>)
 8002086:	f002 f9cb 	bl	8004420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5
 800208a:	f248 533f 	movw	r3, #34111	; 0x853f
 800208e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|A13_Pin|A12_Pin|A10_Pin
                          |A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020a4:	230c      	movs	r3, #12
 80020a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020ae:	4619      	mov	r1, r3
 80020b0:	4832      	ldr	r0, [pc, #200]	; (800217c <HAL_FMC_MspInit+0x194>)
 80020b2:	f002 f9b5 	bl	8004420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin
 80020b6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80020ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D2_Pin|D3_Pin|D1_Pin|D0_Pin
                          |A16_Pin|A17_Pin|A18_Pin|D15_Pin
                          |D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020d0:	230c      	movs	r3, #12
 80020d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020da:	4619      	mov	r1, r3
 80020dc:	4828      	ldr	r0, [pc, #160]	; (8002180 <HAL_FMC_MspInit+0x198>)
 80020de:	f002 f99f 	bl	8004420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin
 80020e2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80020e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D8_Pin|D9_Pin|D12_Pin|D5_Pin
                          |D10_Pin|D4_Pin|D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020fc:	230c      	movs	r3, #12
 80020fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002102:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002106:	4619      	mov	r1, r3
 8002108:	481e      	ldr	r0, [pc, #120]	; (8002184 <HAL_FMC_MspInit+0x19c>)
 800210a:	f002 f989 	bl	8004420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin
 800210e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002112:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D18_Pin|D19_Pin|D17_Pin|D20_Pin
                          |SDNE1_Pin|D16_Pin|SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002128:	230c      	movs	r3, #12
 800212a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800212e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002132:	4619      	mov	r1, r3
 8002134:	4814      	ldr	r0, [pc, #80]	; (8002188 <HAL_FMC_MspInit+0x1a0>)
 8002136:	f002 f973 	bl	8004420 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin
 800213a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800213e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A5_Pin|A4_Pin|A7_Pin|A8_Pin
                          |A6_Pin|A9_Pin|SNDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002154:	230c      	movs	r3, #12
 8002156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800215a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800215e:	4619      	mov	r1, r3
 8002160:	480a      	ldr	r0, [pc, #40]	; (800218c <HAL_FMC_MspInit+0x1a4>)
 8002162:	f002 f95d 	bl	8004420 <HAL_GPIO_Init>
 8002166:	e000      	b.n	800216a <HAL_FMC_MspInit+0x182>
    return;
 8002168:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800216a:	37e0      	adds	r7, #224	; 0xe0
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	240010e8 	.word	0x240010e8
 8002174:	58024400 	.word	0x58024400
 8002178:	58022000 	.word	0x58022000
 800217c:	58021800 	.word	0x58021800
 8002180:	58020c00 	.word	0x58020c00
 8002184:	58021000 	.word	0x58021000
 8002188:	58021c00 	.word	0x58021c00
 800218c:	58021400 	.word	0x58021400

08002190 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8002198:	f7ff ff26 	bl	8001fe8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80021ac:	f7ff ff1c 	bl	8001fe8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80021c0:	f7ff ff12 	bl	8001fe8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b0ba      	sub	sp, #232	; 0xe8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	22c0      	movs	r2, #192	; 0xc0
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f00a fe2b 	bl	800ce38 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a4f      	ldr	r2, [pc, #316]	; (8002324 <HAL_SAI_MspInit+0x158>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d153      	bne.n	8002294 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80021ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4618      	mov	r0, r3
 8002202:	f004 fa57 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 800220c:	f7ff f85c 	bl	80012c8 <Error_Handler>
    }

    if (SAI1_client == 0)
 8002210:	4b45      	ldr	r3, [pc, #276]	; (8002328 <HAL_SAI_MspInit+0x15c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10e      	bne.n	8002236 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002218:	4b44      	ldr	r3, [pc, #272]	; (800232c <HAL_SAI_MspInit+0x160>)
 800221a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800221e:	4a43      	ldr	r2, [pc, #268]	; (800232c <HAL_SAI_MspInit+0x160>)
 8002220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002224:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_SAI_MspInit+0x160>)
 800222a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002236:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <HAL_SAI_MspInit+0x15c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <HAL_SAI_MspInit+0x15c>)
 800223e:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCKA_Pin|SAI1_FSA_Pin|SAI1_SDA_Pin;
 8002240:	2370      	movs	r3, #112	; 0x70
 8002242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002258:	2306      	movs	r3, #6
 800225a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800225e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002262:	4619      	mov	r1, r3
 8002264:	4832      	ldr	r0, [pc, #200]	; (8002330 <HAL_SAI_MspInit+0x164>)
 8002266:	f002 f8db 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002282:	2306      	movs	r3, #6
 8002284:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800228c:	4619      	mov	r1, r3
 800228e:	4829      	ldr	r0, [pc, #164]	; (8002334 <HAL_SAI_MspInit+0x168>)
 8002290:	f002 f8c6 	bl	8004420 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <HAL_SAI_MspInit+0x16c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d13e      	bne.n	800231c <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800229e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 f9fe 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 80022be:	f7ff f803 	bl	80012c8 <Error_Handler>
    }

      if (SAI1_client == 0)
 80022c2:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_SAI_MspInit+0x15c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10e      	bne.n	80022e8 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_SAI_MspInit+0x160>)
 80022cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d0:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_SAI_MspInit+0x160>)
 80022d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_SAI_MspInit+0x160>)
 80022dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_SAI_MspInit+0x15c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_SAI_MspInit+0x15c>)
 80022f0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 80022f2:	2308      	movs	r3, #8
 80022f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800230a:	2306      	movs	r3, #6
 800230c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8002310:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <HAL_SAI_MspInit+0x164>)
 8002318:	f002 f882 	bl	8004420 <HAL_GPIO_Init>

    }
}
 800231c:	bf00      	nop
 800231e:	37e8      	adds	r7, #232	; 0xe8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40015804 	.word	0x40015804
 8002328:	240010ec 	.word	0x240010ec
 800232c:	58024400 	.word	0x58024400
 8002330:	58021000 	.word	0x58021000
 8002334:	58021800 	.word	0x58021800
 8002338:	40015824 	.word	0x40015824

0800233c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <NMI_Handler+0x4>

08002342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <MemManage_Handler+0x4>

0800234e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <UsageFault_Handler+0x4>

0800235a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002388:	f000 f926 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002394:	4b37      	ldr	r3, [pc, #220]	; (8002474 <SystemInit+0xe4>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	4a36      	ldr	r2, [pc, #216]	; (8002474 <SystemInit+0xe4>)
 800239c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023a4:	4b34      	ldr	r3, [pc, #208]	; (8002478 <SystemInit+0xe8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d807      	bhi.n	80023c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023b0:	4b31      	ldr	r3, [pc, #196]	; (8002478 <SystemInit+0xe8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 030f 	bic.w	r3, r3, #15
 80023b8:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <SystemInit+0xe8>)
 80023ba:	f043 0307 	orr.w	r3, r3, #7
 80023be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023c0:	4b2e      	ldr	r3, [pc, #184]	; (800247c <SystemInit+0xec>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2d      	ldr	r2, [pc, #180]	; (800247c <SystemInit+0xec>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023cc:	4b2b      	ldr	r3, [pc, #172]	; (800247c <SystemInit+0xec>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <SystemInit+0xec>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4929      	ldr	r1, [pc, #164]	; (800247c <SystemInit+0xec>)
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <SystemInit+0xf0>)
 80023da:	4013      	ands	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <SystemInit+0xe8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <SystemInit+0xe8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 030f 	bic.w	r3, r3, #15
 80023f2:	4a21      	ldr	r2, [pc, #132]	; (8002478 <SystemInit+0xe8>)
 80023f4:	f043 0307 	orr.w	r3, r3, #7
 80023f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <SystemInit+0xec>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <SystemInit+0xec>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <SystemInit+0xec>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <SystemInit+0xec>)
 800240e:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <SystemInit+0xf4>)
 8002410:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <SystemInit+0xec>)
 8002414:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <SystemInit+0xf8>)
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <SystemInit+0xec>)
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <SystemInit+0xfc>)
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <SystemInit+0xec>)
 8002420:	2200      	movs	r2, #0
 8002422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <SystemInit+0xec>)
 8002426:	4a19      	ldr	r2, [pc, #100]	; (800248c <SystemInit+0xfc>)
 8002428:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <SystemInit+0xec>)
 800242c:	2200      	movs	r2, #0
 800242e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <SystemInit+0xec>)
 8002432:	4a16      	ldr	r2, [pc, #88]	; (800248c <SystemInit+0xfc>)
 8002434:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <SystemInit+0xec>)
 8002438:	2200      	movs	r2, #0
 800243a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <SystemInit+0xec>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0e      	ldr	r2, [pc, #56]	; (800247c <SystemInit+0xec>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002446:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <SystemInit+0xec>)
 800244a:	2200      	movs	r2, #0
 800244c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <SystemInit+0x100>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <SystemInit+0x104>)
 8002454:	4013      	ands	r3, r2
 8002456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800245a:	d202      	bcs.n	8002462 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <SystemInit+0x108>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <SystemInit+0x10c>)
 8002464:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00
 8002478:	52002000 	.word	0x52002000
 800247c:	58024400 	.word	0x58024400
 8002480:	eaf6ed7f 	.word	0xeaf6ed7f
 8002484:	02020200 	.word	0x02020200
 8002488:	01ff0000 	.word	0x01ff0000
 800248c:	01010280 	.word	0x01010280
 8002490:	5c001000 	.word	0x5c001000
 8002494:	ffff0000 	.word	0xffff0000
 8002498:	51008108 	.word	0x51008108
 800249c:	52004000 	.word	0x52004000

080024a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024a4:	f7ff ff74 	bl	8002390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024aa:	490d      	ldr	r1, [pc, #52]	; (80024e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024c0:	4c0a      	ldr	r4, [pc, #40]	; (80024ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ce:	f00a fc8f 	bl	800cdf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d2:	f7fe f883 	bl	80005dc <main>
  bx  lr
 80024d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024e0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80024e4:	0800cea8 	.word	0x0800cea8
  ldr r2, =_sbss
 80024e8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80024ec:	2400111c 	.word	0x2400111c

080024f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC3_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fa:	2003      	movs	r0, #3
 80024fc:	f001 fa26 	bl	800394c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002500:	f003 ff02 	bl	8006308 <HAL_RCC_GetSysClockFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_Init+0x68>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	4913      	ldr	r1, [pc, #76]	; (8002560 <HAL_Init+0x6c>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_Init+0x68>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <HAL_Init+0x6c>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <HAL_Init+0x70>)
 8002536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002538:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <HAL_Init+0x74>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800253e:	2000      	movs	r0, #0
 8002540:	f000 f814 	bl	800256c <HAL_InitTick>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e002      	b.n	8002554 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800254e:	f7fe fec1 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	58024400 	.word	0x58024400
 8002560:	0800ce60 	.word	0x0800ce60
 8002564:	24000004 	.word	0x24000004
 8002568:	24000000 	.word	0x24000000

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_InitTick+0x60>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e021      	b.n	80025c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_InitTick+0x64>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_InitTick+0x60>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f001 f9fd 	bl	8003996 <HAL_SYSTICK_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00e      	b.n	80025c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d80a      	bhi.n	80025c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ac:	2200      	movs	r2, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b4:	f001 f9d5 	bl	8003962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <HAL_InitTick+0x68>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2400000c 	.word	0x2400000c
 80025d0:	24000000 	.word	0x24000000
 80025d4:	24000008 	.word	0x24000008

080025d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2400000c 	.word	0x2400000c
 80025fc:	240010f0 	.word	0x240010f0

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	240010f0 	.word	0x240010f0

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002630:	d005      	beq.n	800263e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_Delay+0x44>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800263e:	bf00      	nop
 8002640:	f7ff ffde 	bl	8002600 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d8f7      	bhi.n	8002640 <HAL_Delay+0x28>
  {
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2400000c 	.word	0x2400000c

08002660 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_GetREVID+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0c1b      	lsrs	r3, r3, #16
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	5c001000 	.word	0x5c001000

08002678 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002688:	4904      	ldr	r1, [pc, #16]	; (800269c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	58000400 	.word	0x58000400

080026a0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	401a      	ands	r2, r3
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	58000400 	.word	0x58000400

080026cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3360      	adds	r3, #96	; 0x60
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	430b      	orrs	r3, r1
 8002762:	431a      	orrs	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	611a      	str	r2, [r3, #16]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b087      	sub	sp, #28
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3360      	adds	r3, #96	; 0x60
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]
  }
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3330      	adds	r3, #48	; 0x30
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	211f      	movs	r1, #31
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	401a      	ands	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0e9b      	lsrs	r3, r3, #26
 8002814:	f003 011f 	and.w	r1, r3, #31
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	431a      	orrs	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3314      	adds	r3, #20
 8002844:	461a      	mov	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	0e5b      	lsrs	r3, r3, #25
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	4413      	add	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	0d1b      	lsrs	r3, r3, #20
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2107      	movs	r1, #7
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	401a      	ands	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	0d1b      	lsrs	r3, r3, #20
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	431a      	orrs	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a4:	43db      	mvns	r3, r3
 80028a6:	401a      	ands	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 0318 	and.w	r3, r3, #24
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028b0:	40d9      	lsrs	r1, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	400b      	ands	r3, r1
 80028b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ba:	431a      	orrs	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	000fffff 	.word	0x000fffff

080028d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6093      	str	r3, [r2, #8]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	5fffffc0 	.word	0x5fffffc0

080028f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800290c:	d101      	bne.n	8002912 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <LL_ADC_EnableInternalRegulator+0x24>)
 800292e:	4013      	ands	r3, r2
 8002930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	6fffffc0 	.word	0x6fffffc0

08002948 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800295c:	d101      	bne.n	8002962 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <LL_ADC_IsEnabled+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_ADC_IsEnabled+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d101      	bne.n	80029ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d101      	bne.n	80029d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e18f      	b.n	8002d1e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7fe fc7b 	bl	8001308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff67 	bl	80028f8 <LL_ADC_IsDeepPowerDownEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff4d 	bl	80028d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ff82 	bl	8002948 <LL_ADC_IsInternalRegulatorEnabled>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d114      	bne.n	8002a74 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ff66 	bl	8002920 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a54:	4b87      	ldr	r3, [pc, #540]	; (8002c74 <HAL_ADC_Init+0x290>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	4a87      	ldr	r2, [pc, #540]	; (8002c78 <HAL_ADC_Init+0x294>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	3301      	adds	r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a66:	e002      	b.n	8002a6e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f9      	bne.n	8002a68 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff65 	bl	8002948 <LL_ADC_IsInternalRegulatorEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10d      	bne.n	8002aa0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f043 0210 	orr.w	r2, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f043 0201 	orr.w	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff76 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002aaa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 8129 	bne.w	8002d0c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 8125 	bne.w	8002d0c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff4a 	bl	8002970 <LL_ADC_IsEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d136      	bne.n	8002b50 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a65      	ldr	r2, [pc, #404]	; (8002c7c <HAL_ADC_Init+0x298>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_ADC_Init+0x112>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a63      	ldr	r2, [pc, #396]	; (8002c80 <HAL_ADC_Init+0x29c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10e      	bne.n	8002b14 <HAL_ADC_Init+0x130>
 8002af6:	4861      	ldr	r0, [pc, #388]	; (8002c7c <HAL_ADC_Init+0x298>)
 8002af8:	f7ff ff3a 	bl	8002970 <LL_ADC_IsEnabled>
 8002afc:	4604      	mov	r4, r0
 8002afe:	4860      	ldr	r0, [pc, #384]	; (8002c80 <HAL_ADC_Init+0x29c>)
 8002b00:	f7ff ff36 	bl	8002970 <LL_ADC_IsEnabled>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4323      	orrs	r3, r4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e008      	b.n	8002b26 <HAL_ADC_Init+0x142>
 8002b14:	485b      	ldr	r0, [pc, #364]	; (8002c84 <HAL_ADC_Init+0x2a0>)
 8002b16:	f7ff ff2b 	bl	8002970 <LL_ADC_IsEnabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a53      	ldr	r2, [pc, #332]	; (8002c7c <HAL_ADC_Init+0x298>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_ADC_Init+0x15a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a51      	ldr	r2, [pc, #324]	; (8002c80 <HAL_ADC_Init+0x29c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Init+0x15e>
 8002b3e:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_ADC_Init+0x2a4>)
 8002b40:	e000      	b.n	8002b44 <HAL_ADC_Init+0x160>
 8002b42:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_ADC_Init+0x2a8>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f7ff fdbe 	bl	80026cc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002b50:	f7ff fd86 	bl	8002660 <HAL_GetREVID>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d914      	bls.n	8002b88 <HAL_ADC_Init+0x1a4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d110      	bne.n	8002b88 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7d5b      	ldrb	r3, [r3, #21]
 8002b6a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b70:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b76:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7f1b      	ldrb	r3, [r3, #28]
 8002b7c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002b7e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b80:	f043 030c 	orr.w	r3, r3, #12
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	e00d      	b.n	8002ba4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7d5b      	ldrb	r3, [r3, #21]
 8002b8c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b92:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b98:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7f1b      	ldrb	r3, [r3, #28]
 8002b9e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7f1b      	ldrb	r3, [r3, #28]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d106      	bne.n	8002bba <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	045b      	lsls	r3, r3, #17
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_ADC_Init+0x2ac>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	69b9      	ldr	r1, [r7, #24]
 8002be6:	430b      	orrs	r3, r1
 8002be8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fed1 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002bf4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fede 	bl	80029bc <LL_ADC_INJ_IsConversionOngoing>
 8002c00:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d15f      	bne.n	8002cc8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d15c      	bne.n	8002cc8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7d1b      	ldrb	r3, [r3, #20]
 8002c12:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <HAL_ADC_Init+0x2b0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	69b9      	ldr	r1, [r7, #24]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d130      	bne.n	8002c9c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_ADC_Init+0x2b4>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	0411      	lsls	r1, r2, #16
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c5c:	4311      	orrs	r1, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c62:	430a      	orrs	r2, r1
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	611a      	str	r2, [r3, #16]
 8002c70:	e01c      	b.n	8002cac <HAL_ADC_Init+0x2c8>
 8002c72:	bf00      	nop
 8002c74:	24000000 	.word	0x24000000
 8002c78:	053e2d63 	.word	0x053e2d63
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40022100 	.word	0x40022100
 8002c84:	58026000 	.word	0x58026000
 8002c88:	40022300 	.word	0x40022300
 8002c8c:	58026300 	.word	0x58026300
 8002c90:	fff0c003 	.word	0xfff0c003
 8002c94:	ffffbffc 	.word	0xffffbffc
 8002c98:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fb80 	bl	80033c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10c      	bne.n	8002cea <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f023 010f 	bic.w	r1, r3, #15
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	1e5a      	subs	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce8:	e007      	b.n	8002cfa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 020f 	bic.w	r2, r2, #15
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
 8002d0a:	e007      	b.n	8002d1c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	f043 0210 	orr.w	r2, r3, #16
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	bf00      	nop

08002d28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b0a1      	sub	sp, #132	; 0x84
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a9d      	ldr	r2, [pc, #628]	; (8002fb8 <HAL_ADC_ConfigChannel+0x290>)
 8002d42:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x2a>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e321      	b.n	8003396 <HAL_ADC_ConfigChannel+0x66e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fe19 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 8306 	bne.w	8003378 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x62>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2201      	movs	r2, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	e016      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x90>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d9a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002da2:	2320      	movs	r3, #32
 8002da4:	e003      	b.n	8002dae <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002da6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	2201      	movs	r2, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	69d1      	ldr	r1, [r2, #28]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f7ff fd02 	bl	80027dc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fdda 	bl	8002996 <LL_ADC_REG_IsConversionOngoing>
 8002de2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fde7 	bl	80029bc <LL_ADC_INJ_IsConversionOngoing>
 8002dee:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 80b3 	bne.w	8002f5e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 80af 	bne.w	8002f5e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6819      	ldr	r1, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f7ff fd11 	bl	8002834 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e12:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_ADC_ConfigChannel+0x294>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e1e:	d10b      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x110>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	e01d      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x14c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10b      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x136>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	e00a      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x14c>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	089b      	lsrs	r3, r3, #2
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d027      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6919      	ldr	r1, [r3, #16]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8c:	f7ff fc52 	bl	8002734 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6919      	ldr	r1, [r3, #16]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	7e5b      	ldrb	r3, [r3, #25]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d102      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x17e>
 8002ea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x180>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f7ff fc7c 	bl	80027a6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6919      	ldr	r1, [r3, #16]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	7e1b      	ldrb	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d102      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x19c>
 8002ebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ec2:	e000      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x19e>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f7ff fc54 	bl	8002774 <LL_ADC_SetDataRightShift>
 8002ecc:	e047      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	069b      	lsls	r3, r3, #26
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ef0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	069b      	lsls	r3, r3, #26
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d107      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f14:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	069b      	lsls	r3, r3, #26
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d107      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f38:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	069b      	lsls	r3, r3, #26
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d107      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f5c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fd04 	bl	8002970 <LL_ADC_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 820d 	bne.w	800338a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6819      	ldr	r1, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f7ff fc85 	bl	800288c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4a0c      	ldr	r2, [pc, #48]	; (8002fb8 <HAL_ADC_ConfigChannel+0x290>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	f040 8133 	bne.w	80031f4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d110      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x298>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2b09      	cmp	r3, #9
 8002fac:	bf94      	ite	ls
 8002fae:	2301      	movls	r3, #1
 8002fb0:	2300      	movhi	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e01e      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x2cc>
 8002fb6:	bf00      	nop
 8002fb8:	47ff0000 	.word	0x47ff0000
 8002fbc:	5c001000 	.word	0x5c001000
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	e003      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2b09      	cmp	r3, #9
 8002fec:	bf94      	ite	ls
 8002fee:	2301      	movls	r3, #1
 8002ff0:	2300      	movhi	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d079      	beq.n	80030ec <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x2ec>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	069b      	lsls	r3, r3, #26
 800300e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003012:	e015      	b.n	8003040 <HAL_ADC_ConfigChannel+0x318>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003024:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	e003      	b.n	8003038 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	069b      	lsls	r3, r3, #26
 800303c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x338>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	e017      	b.n	8003090 <HAL_ADC_ConfigChannel+0x368>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e003      	b.n	8003084 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800307c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x38e>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	051b      	lsls	r3, r3, #20
 80030b4:	e018      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x3c0>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80030c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80030ce:	2320      	movs	r3, #32
 80030d0:	e003      	b.n	80030da <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 021f 	and.w	r2, r3, #31
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e8:	430b      	orrs	r3, r1
 80030ea:	e07e      	b.n	80031ea <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x3e0>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	3301      	adds	r3, #1
 8003100:	069b      	lsls	r3, r3, #26
 8003102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003106:	e015      	b.n	8003134 <HAL_ADC_ConfigChannel+0x40c>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003120:	2320      	movs	r3, #32
 8003122:	e003      	b.n	800312c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3301      	adds	r3, #1
 800312e:	069b      	lsls	r3, r3, #26
 8003130:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x42c>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	3301      	adds	r3, #1
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	e017      	b.n	8003184 <HAL_ADC_ConfigChannel+0x45c>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	61bb      	str	r3, [r7, #24]
  return result;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800316c:	2320      	movs	r3, #32
 800316e:	e003      	b.n	8003178 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3301      	adds	r3, #1
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	ea42 0103 	orr.w	r1, r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10d      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x488>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0e9b      	lsrs	r3, r3, #26
 800319a:	3301      	adds	r3, #1
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	3b1e      	subs	r3, #30
 80031a8:	051b      	lsls	r3, r3, #20
 80031aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ae:	e01b      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x4c0>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	60fb      	str	r3, [r7, #12]
  return result;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	e003      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	f003 021f 	and.w	r2, r3, #31
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	3b1e      	subs	r3, #30
 80031e2:	051b      	lsls	r3, r3, #20
 80031e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e8:	430b      	orrs	r3, r1
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	6892      	ldr	r2, [r2, #8]
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7ff fb20 	bl	8002834 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f280 80c6 	bge.w	800338a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a67      	ldr	r2, [pc, #412]	; (80033a0 <HAL_ADC_ConfigChannel+0x678>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x4ea>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a65      	ldr	r2, [pc, #404]	; (80033a4 <HAL_ADC_ConfigChannel+0x67c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x4ee>
 8003212:	4b65      	ldr	r3, [pc, #404]	; (80033a8 <HAL_ADC_ConfigChannel+0x680>)
 8003214:	e000      	b.n	8003218 <HAL_ADC_ConfigChannel+0x4f0>
 8003216:	4b65      	ldr	r3, [pc, #404]	; (80033ac <HAL_ADC_ConfigChannel+0x684>)
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fa7d 	bl	8002718 <LL_ADC_GetCommonPathInternalCh>
 800321e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5e      	ldr	r2, [pc, #376]	; (80033a0 <HAL_ADC_ConfigChannel+0x678>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_ADC_ConfigChannel+0x50c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5d      	ldr	r2, [pc, #372]	; (80033a4 <HAL_ADC_ConfigChannel+0x67c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10e      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x52a>
 8003234:	485a      	ldr	r0, [pc, #360]	; (80033a0 <HAL_ADC_ConfigChannel+0x678>)
 8003236:	f7ff fb9b 	bl	8002970 <LL_ADC_IsEnabled>
 800323a:	4604      	mov	r4, r0
 800323c:	4859      	ldr	r0, [pc, #356]	; (80033a4 <HAL_ADC_ConfigChannel+0x67c>)
 800323e:	f7ff fb97 	bl	8002970 <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	4323      	orrs	r3, r4
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e008      	b.n	8003264 <HAL_ADC_ConfigChannel+0x53c>
 8003252:	4857      	ldr	r0, [pc, #348]	; (80033b0 <HAL_ADC_ConfigChannel+0x688>)
 8003254:	f7ff fb8c 	bl	8002970 <LL_ADC_IsEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d07d      	beq.n	8003364 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <HAL_ADC_ConfigChannel+0x68c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d130      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x5ac>
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d12b      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a4b      	ldr	r2, [pc, #300]	; (80033b0 <HAL_ADC_ConfigChannel+0x688>)
 8003282:	4293      	cmp	r3, r2
 8003284:	f040 8081 	bne.w	800338a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a44      	ldr	r2, [pc, #272]	; (80033a0 <HAL_ADC_ConfigChannel+0x678>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_ADC_ConfigChannel+0x574>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a43      	ldr	r2, [pc, #268]	; (80033a4 <HAL_ADC_ConfigChannel+0x67c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x578>
 800329c:	4a42      	ldr	r2, [pc, #264]	; (80033a8 <HAL_ADC_ConfigChannel+0x680>)
 800329e:	e000      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x57a>
 80032a0:	4a42      	ldr	r2, [pc, #264]	; (80033ac <HAL_ADC_ConfigChannel+0x684>)
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f7ff fa21 	bl	80026f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b0:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_ADC_ConfigChannel+0x690>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	4a41      	ldr	r2, [pc, #260]	; (80033bc <HAL_ADC_ConfigChannel+0x694>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80032c4:	e002      	b.n	80032cc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f9      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d2:	e05a      	b.n	800338a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a39      	ldr	r2, [pc, #228]	; (80033c0 <HAL_ADC_ConfigChannel+0x698>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d11e      	bne.n	800331c <HAL_ADC_ConfigChannel+0x5f4>
 80032de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d119      	bne.n	800331c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a30      	ldr	r2, [pc, #192]	; (80033b0 <HAL_ADC_ConfigChannel+0x688>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d14b      	bne.n	800338a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <HAL_ADC_ConfigChannel+0x678>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_ADC_ConfigChannel+0x5de>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <HAL_ADC_ConfigChannel+0x67c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x5e2>
 8003306:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <HAL_ADC_ConfigChannel+0x680>)
 8003308:	e000      	b.n	800330c <HAL_ADC_ConfigChannel+0x5e4>
 800330a:	4a28      	ldr	r2, [pc, #160]	; (80033ac <HAL_ADC_ConfigChannel+0x684>)
 800330c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7ff f9ec 	bl	80026f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800331a:	e036      	b.n	800338a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a28      	ldr	r2, [pc, #160]	; (80033c4 <HAL_ADC_ConfigChannel+0x69c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d131      	bne.n	800338a <HAL_ADC_ConfigChannel+0x662>
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d12c      	bne.n	800338a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_ADC_ConfigChannel+0x688>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d127      	bne.n	800338a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_ADC_ConfigChannel+0x678>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_ADC_ConfigChannel+0x626>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <HAL_ADC_ConfigChannel+0x67c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x62a>
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <HAL_ADC_ConfigChannel+0x680>)
 8003350:	e000      	b.n	8003354 <HAL_ADC_ConfigChannel+0x62c>
 8003352:	4a16      	ldr	r2, [pc, #88]	; (80033ac <HAL_ADC_ConfigChannel+0x684>)
 8003354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003356:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f7ff f9c8 	bl	80026f2 <LL_ADC_SetCommonPathInternalCh>
 8003362:	e012      	b.n	800338a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003376:	e008      	b.n	800338a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003392:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003396:	4618      	mov	r0, r3
 8003398:	3784      	adds	r7, #132	; 0x84
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	bf00      	nop
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40022100 	.word	0x40022100
 80033a8:	40022300 	.word	0x40022300
 80033ac:	58026300 	.word	0x58026300
 80033b0:	58026000 	.word	0x58026000
 80033b4:	cb840000 	.word	0xcb840000
 80033b8:	24000000 	.word	0x24000000
 80033bc:	053e2d63 	.word	0x053e2d63
 80033c0:	c7520000 	.word	0xc7520000
 80033c4:	cfb80000 	.word	0xcfb80000

080033c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a7a      	ldr	r2, [pc, #488]	; (80035c0 <ADC_ConfigureBoostMode+0x1f8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <ADC_ConfigureBoostMode+0x1c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a79      	ldr	r2, [pc, #484]	; (80035c4 <ADC_ConfigureBoostMode+0x1fc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d109      	bne.n	80033f8 <ADC_ConfigureBoostMode+0x30>
 80033e4:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <ADC_ConfigureBoostMode+0x200>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e008      	b.n	800340a <ADC_ConfigureBoostMode+0x42>
 80033f8:	4b74      	ldr	r3, [pc, #464]	; (80035cc <ADC_ConfigureBoostMode+0x204>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01c      	beq.n	8003448 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800340e:	f003 f8f5 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8003412:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800341c:	d010      	beq.n	8003440 <ADC_ConfigureBoostMode+0x78>
 800341e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003422:	d873      	bhi.n	800350c <ADC_ConfigureBoostMode+0x144>
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d002      	beq.n	8003430 <ADC_ConfigureBoostMode+0x68>
 800342a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800342e:	d16d      	bne.n	800350c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	60fb      	str	r3, [r7, #12]
        break;
 800343e:	e068      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	60fb      	str	r3, [r7, #12]
        break;
 8003446:	e064      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003448:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	f004 fb3a 	bl	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003454:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800345e:	d051      	beq.n	8003504 <ADC_ConfigureBoostMode+0x13c>
 8003460:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003464:	d854      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 8003466:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800346a:	d047      	beq.n	80034fc <ADC_ConfigureBoostMode+0x134>
 800346c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003470:	d84e      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 8003472:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003476:	d03d      	beq.n	80034f4 <ADC_ConfigureBoostMode+0x12c>
 8003478:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800347c:	d848      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 800347e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003482:	d033      	beq.n	80034ec <ADC_ConfigureBoostMode+0x124>
 8003484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003488:	d842      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 800348a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800348e:	d029      	beq.n	80034e4 <ADC_ConfigureBoostMode+0x11c>
 8003490:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003494:	d83c      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 8003496:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800349a:	d01a      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 800349c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034a0:	d836      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 80034a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034a6:	d014      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 80034a8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034ac:	d830      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 80034ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b2:	d00e      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 80034b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b8:	d82a      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 80034ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034be:	d008      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 80034c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034c4:	d824      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x148>
 80034c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034ca:	d002      	beq.n	80034d2 <ADC_ConfigureBoostMode+0x10a>
 80034cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034d0:	d11e      	bne.n	8003510 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	0c9b      	lsrs	r3, r3, #18
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	60fb      	str	r3, [r7, #12]
        break;
 80034e2:	e016      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	60fb      	str	r3, [r7, #12]
        break;
 80034ea:	e012      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	60fb      	str	r3, [r7, #12]
        break;
 80034f2:	e00e      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	60fb      	str	r3, [r7, #12]
        break;
 80034fa:	e00a      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	09db      	lsrs	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
        break;
 8003502:	e006      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	60fb      	str	r3, [r7, #12]
        break;
 800350a:	e002      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
        break;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003510:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003512:	f7ff f8a5 	bl	8002660 <HAL_GetREVID>
 8003516:	4603      	mov	r3, r0
 8003518:	f241 0203 	movw	r2, #4099	; 0x1003
 800351c:	4293      	cmp	r3, r2
 800351e:	d815      	bhi.n	800354c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <ADC_ConfigureBoostMode+0x208>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d908      	bls.n	800353a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003536:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003538:	e03e      	b.n	80035b8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003548:	609a      	str	r2, [r3, #8]
}
 800354a:	e035      	b.n	80035b8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <ADC_ConfigureBoostMode+0x20c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d808      	bhi.n	800356c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003568:	609a      	str	r2, [r3, #8]
}
 800356a:	e025      	b.n	80035b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <ADC_ConfigureBoostMode+0x210>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d80a      	bhi.n	800358a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	e016      	b.n	80035b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a13      	ldr	r2, [pc, #76]	; (80035dc <ADC_ConfigureBoostMode+0x214>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d80a      	bhi.n	80035a8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a4:	609a      	str	r2, [r3, #8]
}
 80035a6:	e007      	b.n	80035b8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80035b6:	609a      	str	r2, [r3, #8]
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40022100 	.word	0x40022100
 80035c8:	40022300 	.word	0x40022300
 80035cc:	58026300 	.word	0x58026300
 80035d0:	01312d00 	.word	0x01312d00
 80035d4:	005f5e10 	.word	0x005f5e10
 80035d8:	00bebc20 	.word	0x00bebc20
 80035dc:	017d7840 	.word	0x017d7840

080035e0 <LL_ADC_IsEnabled>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <LL_ADC_IsEnabled+0x18>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <LL_ADC_IsEnabled+0x1a>
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <LL_ADC_REG_IsConversionOngoing>:
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d101      	bne.n	800361e <LL_ADC_REG_IsConversionOngoing+0x18>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b09f      	sub	sp, #124	; 0x7c
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003646:	2302      	movs	r3, #2
 8003648:	e0be      	b.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003656:	2300      	movs	r3, #0
 8003658:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a5c      	ldr	r2, [pc, #368]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d102      	bne.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003664:	4b5b      	ldr	r3, [pc, #364]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	e001      	b.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e09d      	b.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ffb9 	bl	8003606 <LL_ADC_REG_IsConversionOngoing>
 8003694:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ffb3 	bl	8003606 <LL_ADC_REG_IsConversionOngoing>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d17f      	bne.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d17c      	bne.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a47      	ldr	r2, [pc, #284]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a46      	ldr	r2, [pc, #280]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80036c0:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036c2:	e000      	b.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80036c4:	4b45      	ldr	r3, [pc, #276]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036c6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d039      	beq.n	8003744 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80036d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	431a      	orrs	r2, r3
 80036de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a3a      	ldr	r2, [pc, #232]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10e      	bne.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80036f6:	4836      	ldr	r0, [pc, #216]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036f8:	f7ff ff72 	bl	80035e0 <LL_ADC_IsEnabled>
 80036fc:	4604      	mov	r4, r0
 80036fe:	4835      	ldr	r0, [pc, #212]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003700:	f7ff ff6e 	bl	80035e0 <LL_ADC_IsEnabled>
 8003704:	4603      	mov	r3, r0
 8003706:	4323      	orrs	r3, r4
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e008      	b.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003714:	4832      	ldr	r0, [pc, #200]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003716:	f7ff ff63 	bl	80035e0 <LL_ADC_IsEnabled>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d047      	beq.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800372a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003730:	4013      	ands	r3, r2
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	6811      	ldr	r1, [r2, #0]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6892      	ldr	r2, [r2, #8]
 800373a:	430a      	orrs	r2, r1
 800373c:	431a      	orrs	r2, r3
 800373e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003740:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003742:	e03a      	b.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800374c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d10e      	bne.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003764:	481a      	ldr	r0, [pc, #104]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003766:	f7ff ff3b 	bl	80035e0 <LL_ADC_IsEnabled>
 800376a:	4604      	mov	r4, r0
 800376c:	4819      	ldr	r0, [pc, #100]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800376e:	f7ff ff37 	bl	80035e0 <LL_ADC_IsEnabled>
 8003772:	4603      	mov	r3, r0
 8003774:	4323      	orrs	r3, r4
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e008      	b.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003782:	4817      	ldr	r0, [pc, #92]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003784:	f7ff ff2c 	bl	80035e0 <LL_ADC_IsEnabled>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800379e:	4013      	ands	r3, r2
 80037a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037a2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037a4:	e009      	b.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80037b8:	e000      	b.n	80037bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037ba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	377c      	adds	r7, #124	; 0x7c
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd90      	pop	{r4, r7, pc}
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40022100 	.word	0x40022100
 80037d8:	40022300 	.word	0x40022300
 80037dc:	58026300 	.word	0x58026300
 80037e0:	58026000 	.word	0x58026000
 80037e4:	fffff0e0 	.word	0xfffff0e0

080037e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <__NVIC_SetPriorityGrouping+0x40>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <__NVIC_SetPriorityGrouping+0x44>)
 8003812:	4313      	orrs	r3, r2
 8003814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003816:	4a04      	ldr	r2, [pc, #16]	; (8003828 <__NVIC_SetPriorityGrouping+0x40>)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	60d3      	str	r3, [r2, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000ed00 	.word	0xe000ed00
 800382c:	05fa0000 	.word	0x05fa0000

08003830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <__NVIC_GetPriorityGrouping+0x18>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f003 0307 	and.w	r3, r3, #7
}
 800383e:	4618      	mov	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800385c:	2b00      	cmp	r3, #0
 800385e:	db0a      	blt.n	8003876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	490c      	ldr	r1, [pc, #48]	; (8003898 <__NVIC_SetPriority+0x4c>)
 8003866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	440b      	add	r3, r1
 8003870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003874:	e00a      	b.n	800388c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4908      	ldr	r1, [pc, #32]	; (800389c <__NVIC_SetPriority+0x50>)
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	3b04      	subs	r3, #4
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	440b      	add	r3, r1
 800388a:	761a      	strb	r2, [r3, #24]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000e100 	.word	0xe000e100
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f1c3 0307 	rsb	r3, r3, #7
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf28      	it	cs
 80038be:	2304      	movcs	r3, #4
 80038c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d902      	bls.n	80038d0 <NVIC_EncodePriority+0x30>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3b03      	subs	r3, #3
 80038ce:	e000      	b.n	80038d2 <NVIC_EncodePriority+0x32>
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	401a      	ands	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa01 f303 	lsl.w	r3, r1, r3
 80038f2:	43d9      	mvns	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	4313      	orrs	r3, r2
         );
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3724      	adds	r7, #36	; 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003918:	d301      	bcc.n	800391e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391a:	2301      	movs	r3, #1
 800391c:	e00f      	b.n	800393e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <SysTick_Config+0x40>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003926:	210f      	movs	r1, #15
 8003928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800392c:	f7ff ff8e 	bl	800384c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <SysTick_Config+0x40>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <SysTick_Config+0x40>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000e010 	.word	0xe000e010

0800394c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff47 	bl	80037e8 <__NVIC_SetPriorityGrouping>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff5e 	bl	8003830 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff90 	bl	80038a0 <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5f 	bl	800384c <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ffb2 	bl	8003908 <SysTick_Config>
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0b4      	b.n	8003b2c <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80039c2:	4b5c      	ldr	r3, [pc, #368]	; (8003b34 <HAL_DFSDM_ChannelInit+0x184>)
 80039c4:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 80039c6:	4b5c      	ldr	r3, [pc, #368]	; (8003b38 <HAL_DFSDM_ChannelInit+0x188>)
 80039c8:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 80039ca:	4b5c      	ldr	r3, [pc, #368]	; (8003b3c <HAL_DFSDM_ChannelInit+0x18c>)
 80039cc:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f8b4 	bl	8003b40 <DFSDM_GetChannelFromInstance>
 80039d8:	4603      	mov	r3, r0
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4413      	add	r3, r2
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0a0      	b.n	8003b2c <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fcf2 	bl	80013d4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d125      	bne.n	8003a4e <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	791b      	ldrb	r3, [r3, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003a5c:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6819      	ldr	r1, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a6c:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a72:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 020f 	bic.w	r2, r2, #15
 8003a8a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003ab2:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f002 0207 	and.w	r2, r2, #7
 8003ade:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 f811 	bl	8003b40 <DFSDM_GetChannelFromInstance>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	240010f4 	.word	0x240010f4
 8003b38:	240010f8 	.word	0x240010f8
 8003b3c:	40017000 	.word	0x40017000

08003b40 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <DFSDM_GetChannelFromInstance+0x7c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d102      	bne.n	8003b56 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e02b      	b.n	8003bae <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <DFSDM_GetChannelFromInstance+0x80>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d102      	bne.n	8003b64 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e024      	b.n	8003bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <DFSDM_GetChannelFromInstance+0x84>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d102      	bne.n	8003b72 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e01d      	b.n	8003bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <DFSDM_GetChannelFromInstance+0x88>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d102      	bne.n	8003b80 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e016      	b.n	8003bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <DFSDM_GetChannelFromInstance+0x8c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d102      	bne.n	8003b8e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003b88:	2304      	movs	r3, #4
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	e00f      	b.n	8003bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a0f      	ldr	r2, [pc, #60]	; (8003bd0 <DFSDM_GetChannelFromInstance+0x90>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d102      	bne.n	8003b9c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8003b96:	2305      	movs	r3, #5
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	e008      	b.n	8003bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <DFSDM_GetChannelFromInstance+0x94>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d102      	bne.n	8003baa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8003ba4:	2306      	movs	r3, #6
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	e001      	b.n	8003bae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8003baa:	2307      	movs	r3, #7
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003bae:	68fb      	ldr	r3, [r7, #12]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40017000 	.word	0x40017000
 8003bc0:	40017020 	.word	0x40017020
 8003bc4:	40017040 	.word	0x40017040
 8003bc8:	40017060 	.word	0x40017060
 8003bcc:	40017080 	.word	0x40017080
 8003bd0:	400170a0 	.word	0x400170a0
 8003bd4:	400170c0 	.word	0x400170c0

08003bd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0cf      	b.n	8003d8a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2223      	movs	r2, #35	; 0x23
 8003bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fd fc69 	bl	80014d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c02:	4b64      	ldr	r3, [pc, #400]	; (8003d94 <HAL_ETH_Init+0x1bc>)
 8003c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c08:	4a62      	ldr	r2, [pc, #392]	; (8003d94 <HAL_ETH_Init+0x1bc>)
 8003c0a:	f043 0302 	orr.w	r3, r3, #2
 8003c0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c12:	4b60      	ldr	r3, [pc, #384]	; (8003d94 <HAL_ETH_Init+0x1bc>)
 8003c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7a1b      	ldrb	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d103      	bne.n	8003c30 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f7fe fd25 	bl	8002678 <HAL_SYSCFG_ETHInterfaceSelect>
 8003c2e:	e003      	b.n	8003c38 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003c30:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003c34:	f7fe fd20 	bl	8002678 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003c38:	4b57      	ldr	r3, [pc, #348]	; (8003d98 <HAL_ETH_Init+0x1c0>)
 8003c3a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c54:	f7fe fcd4 	bl	8002600 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c5a:	e011      	b.n	8003c80 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c5c:	f7fe fcd0 	bl	8002600 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c6a:	d909      	bls.n	8003c80 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2204      	movs	r2, #4
 8003c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	22e0      	movs	r2, #224	; 0xe0
 8003c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e084      	b.n	8003d8a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e4      	bne.n	8003c5c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f886 	bl	8003da4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003c98:	f002 fcb0 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4a3f      	ldr	r2, [pc, #252]	; (8003d9c <HAL_ETH_Init+0x1c4>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	0c9a      	lsrs	r2, r3, #18
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3a01      	subs	r2, #1
 8003cac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fa71 	bl	8004198 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cc2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cd2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	22e0      	movs	r2, #224	; 0xe0
 8003cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e049      	b.n	8003d8a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003d02:	4b27      	ldr	r3, [pc, #156]	; (8003da0 <HAL_ETH_Init+0x1c8>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6952      	ldr	r2, [r2, #20]
 8003d0a:	0051      	lsls	r1, r2, #1
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d16:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fad9 	bl	80042d2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fb1f 	bl	8004364 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	3305      	adds	r3, #5
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	3304      	adds	r3, #4
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	061a      	lsls	r2, r3, #24
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	3302      	adds	r3, #2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d64:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d72:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2210      	movs	r2, #16
 8003d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	58024400 	.word	0x58024400
 8003d98:	58000400 	.word	0x58000400
 8003d9c:	431bde83 	.word	0x431bde83
 8003da0:	ffff8001 	.word	0xffff8001

08003da4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003dbe:	f002 fc1d 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8003dc2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d908      	bls.n	8003dde <HAL_ETH_SetMDIOClockRange+0x3a>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d804      	bhi.n	8003dde <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e027      	b.n	8003e2e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d908      	bls.n	8003df8 <HAL_ETH_SetMDIOClockRange+0x54>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d204      	bcs.n	8003df8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e01a      	b.n	8003e2e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d303      	bcc.n	8003e08 <HAL_ETH_SetMDIOClockRange+0x64>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d911      	bls.n	8003e2c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d908      	bls.n	8003e22 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4a0f      	ldr	r2, [pc, #60]	; (8003e50 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d804      	bhi.n	8003e22 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e005      	b.n	8003e2e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e000      	b.n	8003e2e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003e2c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	01312cff 	.word	0x01312cff
 8003e44:	02160ebf 	.word	0x02160ebf
 8003e48:	03938700 	.word	0x03938700
 8003e4c:	05f5e0ff 	.word	0x05f5e0ff
 8003e50:	08f0d17f 	.word	0x08f0d17f

08003e54 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003e66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	791b      	ldrb	r3, [r3, #4]
 8003e6c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003e6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	7b1b      	ldrb	r3, [r3, #12]
 8003e74:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003e76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	7b5b      	ldrb	r3, [r3, #13]
 8003e7c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003e7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	7b9b      	ldrb	r3, [r3, #14]
 8003e84:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003e86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	7bdb      	ldrb	r3, [r3, #15]
 8003e8c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003e8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	7c12      	ldrb	r2, [r2, #16]
 8003e94:	2a00      	cmp	r2, #0
 8003e96:	d102      	bne.n	8003e9e <ETH_SetMACConfig+0x4a>
 8003e98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e9c:	e000      	b.n	8003ea0 <ETH_SetMACConfig+0x4c>
 8003e9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003ea0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	7c52      	ldrb	r2, [r2, #17]
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d102      	bne.n	8003eb0 <ETH_SetMACConfig+0x5c>
 8003eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eae:	e000      	b.n	8003eb2 <ETH_SetMACConfig+0x5e>
 8003eb0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003eb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	7c9b      	ldrb	r3, [r3, #18]
 8003eb8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003eba:	431a      	orrs	r2, r3
               macconf->Speed |
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003ec0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003ec6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	7f1b      	ldrb	r3, [r3, #28]
 8003ecc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003ece:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	7f5b      	ldrb	r3, [r3, #29]
 8003ed4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003ed6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	7f92      	ldrb	r2, [r2, #30]
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	d102      	bne.n	8003ee6 <ETH_SetMACConfig+0x92>
 8003ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ee4:	e000      	b.n	8003ee8 <ETH_SetMACConfig+0x94>
 8003ee6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003ee8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	7fdb      	ldrb	r3, [r3, #31]
 8003eee:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003ef0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	d102      	bne.n	8003f02 <ETH_SetMACConfig+0xae>
 8003efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f00:	e000      	b.n	8003f04 <ETH_SetMACConfig+0xb0>
 8003f02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003f04:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003f0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f12:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003f14:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b56      	ldr	r3, [pc, #344]	; (8004080 <ETH_SetMACConfig+0x22c>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f3e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f48:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003f4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f52:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003f54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003f5c:	2a00      	cmp	r2, #0
 8003f5e:	d102      	bne.n	8003f66 <ETH_SetMACConfig+0x112>
 8003f60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f64:	e000      	b.n	8003f68 <ETH_SetMACConfig+0x114>
 8003f66:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003f68:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	4b42      	ldr	r3, [pc, #264]	; (8004084 <ETH_SetMACConfig+0x230>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	430b      	orrs	r3, r1
 8003f84:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f8c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	4b3a      	ldr	r3, [pc, #232]	; (8004088 <ETH_SetMACConfig+0x234>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fb0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003fb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	d101      	bne.n	8003fc6 <ETH_SetMACConfig+0x172>
 8003fc2:	2280      	movs	r2, #128	; 0x80
 8003fc4:	e000      	b.n	8003fc8 <ETH_SetMACConfig+0x174>
 8003fc6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003fc8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fda:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003fde:	4013      	ands	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003ff0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003ff8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f023 0103 	bic.w	r1, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	430a      	orrs	r2, r1
 8004012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800401e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800403a:	2a00      	cmp	r2, #0
 800403c:	d101      	bne.n	8004042 <ETH_SetMACConfig+0x1ee>
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	e000      	b.n	8004044 <ETH_SetMACConfig+0x1f0>
 8004042:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004044:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800404c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800404e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004056:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004064:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	430a      	orrs	r2, r1
 8004070:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	00048083 	.word	0x00048083
 8004084:	c0f88000 	.word	0xc0f88000
 8004088:	fffffef0 	.word	0xfffffef0

0800408c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b38      	ldr	r3, [pc, #224]	; (8004184 <ETH_SetDMAConfig+0xf8>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	6811      	ldr	r1, [r2, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040b2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	791b      	ldrb	r3, [r3, #4]
 80040b8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80040be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	7b1b      	ldrb	r3, [r3, #12]
 80040c4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <ETH_SetDMAConfig+0xfc>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	68f9      	ldr	r1, [r7, #12]
 80040de:	430b      	orrs	r3, r1
 80040e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040e4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	7b5b      	ldrb	r3, [r3, #13]
 80040ea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004100:	4b22      	ldr	r3, [pc, #136]	; (800418c <ETH_SetDMAConfig+0x100>)
 8004102:	4013      	ands	r3, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	68f9      	ldr	r1, [r7, #12]
 800410a:	430b      	orrs	r3, r1
 800410c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004110:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	7d1b      	ldrb	r3, [r3, #20]
 800411c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800411e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	7f5b      	ldrb	r3, [r3, #29]
 8004124:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004132:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004136:	4b16      	ldr	r3, [pc, #88]	; (8004190 <ETH_SetDMAConfig+0x104>)
 8004138:	4013      	ands	r3, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	430b      	orrs	r3, r1
 8004142:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004146:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	7f1b      	ldrb	r3, [r3, #28]
 800414e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004160:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <ETH_SetDMAConfig+0x108>)
 8004166:	4013      	ands	r3, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	430b      	orrs	r3, r1
 8004170:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004174:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	ffff87fd 	.word	0xffff87fd
 8004188:	ffff2ffe 	.word	0xffff2ffe
 800418c:	fffec000 	.word	0xfffec000
 8004190:	ffc0efef 	.word	0xffc0efef
 8004194:	7fc0ffff 	.word	0x7fc0ffff

08004198 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b0a4      	sub	sp, #144	; 0x90
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80041a6:	2300      	movs	r3, #0
 80041a8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80041d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041d8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80041f0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80041fc:	2300      	movs	r3, #0
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004206:	2300      	movs	r3, #0
 8004208:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004212:	2300      	movs	r3, #0
 8004214:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004216:	2300      	movs	r3, #0
 8004218:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800421a:	2300      	movs	r3, #0
 800421c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800421e:	2300      	movs	r3, #0
 8004220:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004224:	2300      	movs	r3, #0
 8004226:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004230:	2320      	movs	r3, #32
 8004232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800423c:	2300      	movs	r3, #0
 800423e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004242:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004248:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800424c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800424e:	2300      	movs	r3, #0
 8004250:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004254:	2302      	movs	r3, #2
 8004256:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004260:	2300      	movs	r3, #0
 8004262:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004272:	2300      	movs	r3, #0
 8004274:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800427c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fde6 	bl	8003e54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004288:	2301      	movs	r3, #1
 800428a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800428c:	2301      	movs	r3, #1
 800428e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004294:	2300      	movs	r3, #0
 8004296:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800429a:	2300      	movs	r3, #0
 800429c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800429e:	2300      	movs	r3, #0
 80042a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80042a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80042ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80042b8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80042be:	f107 0308 	add.w	r3, r7, #8
 80042c2:	4619      	mov	r1, r3
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff fee1 	bl	800408c <ETH_SetDMAConfig>
}
 80042ca:	bf00      	nop
 80042cc:	3790      	adds	r7, #144	; 0x90
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e01d      	b.n	800431c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68d9      	ldr	r1, [r3, #12]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4613      	mov	r3, r2
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	4413      	add	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	440b      	add	r3, r1
 80042f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2200      	movs	r2, #0
 8004308:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	3206      	adds	r2, #6
 8004312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3301      	adds	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d9de      	bls.n	80042e0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004330:	461a      	mov	r2, r3
 8004332:	2303      	movs	r3, #3
 8004334:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004354:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	e023      	b.n	80043ba <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6919      	ldr	r1, [r3, #16]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4613      	mov	r3, r2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2200      	movs	r2, #0
 800438e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2200      	movs	r2, #0
 800439a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2200      	movs	r2, #0
 80043a6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	3212      	adds	r2, #18
 80043b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3301      	adds	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d9d8      	bls.n	8004372 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e6:	461a      	mov	r2, r3
 80043e8:	2303      	movs	r3, #3
 80043ea:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
	...

08004420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	; 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800442e:	4b89      	ldr	r3, [pc, #548]	; (8004654 <HAL_GPIO_Init+0x234>)
 8004430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004432:	e194      	b.n	800475e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	2101      	movs	r1, #1
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	4013      	ands	r3, r2
 8004442:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8186 	beq.w	8004758 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d005      	beq.n	8004464 <HAL_GPIO_Init+0x44>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d130      	bne.n	80044c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800449a:	2201      	movs	r2, #1
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 0201 	and.w	r2, r3, #1
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d017      	beq.n	8004502 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	2203      	movs	r2, #3
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d123      	bne.n	8004556 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	08da      	lsrs	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3208      	adds	r2, #8
 8004516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	220f      	movs	r2, #15
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	08da      	lsrs	r2, r3, #3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3208      	adds	r2, #8
 8004550:	69b9      	ldr	r1, [r7, #24]
 8004552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	2203      	movs	r2, #3
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0203 	and.w	r2, r3, #3
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80e0 	beq.w	8004758 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004598:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_GPIO_Init+0x238>)
 800459a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800459e:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <HAL_GPIO_Init+0x238>)
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <HAL_GPIO_Init+0x238>)
 80045aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045b6:	4a29      	ldr	r2, [pc, #164]	; (800465c <HAL_GPIO_Init+0x23c>)
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	3302      	adds	r3, #2
 80045be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	220f      	movs	r2, #15
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4013      	ands	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a20      	ldr	r2, [pc, #128]	; (8004660 <HAL_GPIO_Init+0x240>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d052      	beq.n	8004688 <HAL_GPIO_Init+0x268>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <HAL_GPIO_Init+0x244>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d031      	beq.n	800464e <HAL_GPIO_Init+0x22e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <HAL_GPIO_Init+0x248>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d02b      	beq.n	800464a <HAL_GPIO_Init+0x22a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_GPIO_Init+0x24c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d025      	beq.n	8004646 <HAL_GPIO_Init+0x226>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_GPIO_Init+0x250>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01f      	beq.n	8004642 <HAL_GPIO_Init+0x222>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <HAL_GPIO_Init+0x254>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d019      	beq.n	800463e <HAL_GPIO_Init+0x21e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <HAL_GPIO_Init+0x258>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_GPIO_Init+0x21a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <HAL_GPIO_Init+0x25c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00d      	beq.n	8004636 <HAL_GPIO_Init+0x216>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_GPIO_Init+0x260>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <HAL_GPIO_Init+0x212>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a17      	ldr	r2, [pc, #92]	; (8004684 <HAL_GPIO_Init+0x264>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_GPIO_Init+0x20e>
 800462a:	2309      	movs	r3, #9
 800462c:	e02d      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800462e:	230a      	movs	r3, #10
 8004630:	e02b      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004632:	2308      	movs	r3, #8
 8004634:	e029      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004636:	2307      	movs	r3, #7
 8004638:	e027      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800463a:	2306      	movs	r3, #6
 800463c:	e025      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800463e:	2305      	movs	r3, #5
 8004640:	e023      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004642:	2304      	movs	r3, #4
 8004644:	e021      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004646:	2303      	movs	r3, #3
 8004648:	e01f      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800464a:	2302      	movs	r3, #2
 800464c:	e01d      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800464e:	2301      	movs	r3, #1
 8004650:	e01b      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004652:	bf00      	nop
 8004654:	58000080 	.word	0x58000080
 8004658:	58024400 	.word	0x58024400
 800465c:	58000400 	.word	0x58000400
 8004660:	58020000 	.word	0x58020000
 8004664:	58020400 	.word	0x58020400
 8004668:	58020800 	.word	0x58020800
 800466c:	58020c00 	.word	0x58020c00
 8004670:	58021000 	.word	0x58021000
 8004674:	58021400 	.word	0x58021400
 8004678:	58021800 	.word	0x58021800
 800467c:	58021c00 	.word	0x58021c00
 8004680:	58022000 	.word	0x58022000
 8004684:	58022400 	.word	0x58022400
 8004688:	2300      	movs	r3, #0
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	f002 0203 	and.w	r2, r2, #3
 8004690:	0092      	lsls	r2, r2, #2
 8004692:	4093      	lsls	r3, r2
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800469a:	4938      	ldr	r1, [pc, #224]	; (800477c <HAL_GPIO_Init+0x35c>)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	3302      	adds	r3, #2
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	43db      	mvns	r3, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	43db      	mvns	r3, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4013      	ands	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3301      	adds	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	f47f ae63 	bne.w	8004434 <HAL_GPIO_Init+0x14>
  }
}
 800476e:	bf00      	nop
 8004770:	bf00      	nop
 8004772:	3724      	adds	r7, #36	; 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	58000400 	.word	0x58000400

08004780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
 800478c:	4613      	mov	r3, r2
 800478e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004790:	787b      	ldrb	r3, [r7, #1]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800479c:	e003      	b.n	80047a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800479e:	887b      	ldrh	r3, [r7, #2]
 80047a0:	041a      	lsls	r2, r3, #16
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	619a      	str	r2, [r3, #24]
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e07f      	b.n	80048c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fc ff26 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	; 0x24
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004804:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004814:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d107      	bne.n	800482e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	e006      	b.n	800483c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800483a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d104      	bne.n	800484e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800484c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <HAL_I2C_Init+0x11c>)
 800485a:	430b      	orrs	r3, r1
 800485c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800486c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69d9      	ldr	r1, [r3, #28]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1a      	ldr	r2, [r3, #32]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	02008000 	.word	0x02008000

080048d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d138      	bne.n	800495c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e032      	b.n	800495e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6819      	ldr	r1, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	d139      	bne.n	80049f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800498a:	2302      	movs	r3, #2
 800498c:	e033      	b.n	80049f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2224      	movs	r2, #36	; 0x24
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e0bf      	b.n	8004b96 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc fe66 	bl	80016fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004a46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6999      	ldr	r1, [r3, #24]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a5c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6899      	ldr	r1, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <HAL_LTDC_Init+0x19c>)
 8004a78:	400b      	ands	r3, r1
 8004a7a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6899      	ldr	r1, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68d9      	ldr	r1, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b3e      	ldr	r3, [pc, #248]	; (8004ba0 <HAL_LTDC_Init+0x19c>)
 8004aa6:	400b      	ands	r3, r1
 8004aa8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68d9      	ldr	r1, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1a      	ldr	r2, [r3, #32]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6919      	ldr	r1, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b33      	ldr	r3, [pc, #204]	; (8004ba0 <HAL_LTDC_Init+0x19c>)
 8004ad4:	400b      	ands	r3, r1
 8004ad6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6919      	ldr	r1, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6959      	ldr	r1, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <HAL_LTDC_Init+0x19c>)
 8004b02:	400b      	ands	r3, r1
 8004b04:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6959      	ldr	r1, [r3, #20]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004b34:	041b      	lsls	r3, r3, #16
 8004b36:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0206 	orr.w	r2, r2, #6
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	f000f800 	.word	0xf000f800

08004ba4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_LTDC_ConfigLayer+0x1a>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e02c      	b.n	8004c18 <HAL_LTDC_ConfigLayer+0x74>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2134      	movs	r1, #52	; 0x34
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4614      	mov	r4, r2
 8004be2:	461d      	mov	r5, r3
 8004be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f811 	bl	8004c20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bdb0      	pop	{r4, r5, r7, pc}

08004c20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	; 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c3c:	4413      	add	r3, r2
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	01db      	lsls	r3, r3, #7
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3384      	adds	r3, #132	; 0x84
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	4611      	mov	r1, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	01d2      	lsls	r2, r2, #7
 8004c5c:	440a      	add	r2, r1
 8004c5e:	3284      	adds	r2, #132	; 0x84
 8004c60:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c76:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c78:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	01db      	lsls	r3, r3, #7
 8004c84:	440b      	add	r3, r1
 8004c86:	3384      	adds	r3, #132	; 0x84
 8004c88:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c9e:	4413      	add	r3, r2
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	01db      	lsls	r3, r3, #7
 8004cae:	4413      	add	r3, r2
 8004cb0:	3384      	adds	r3, #132	; 0x84
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	01d2      	lsls	r2, r2, #7
 8004cbe:	440a      	add	r2, r1
 8004cc0:	3284      	adds	r2, #132	; 0x84
 8004cc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004cc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cd6:	4413      	add	r3, r2
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	01db      	lsls	r3, r3, #7
 8004ce4:	440b      	add	r3, r1
 8004ce6:	3384      	adds	r3, #132	; 0x84
 8004ce8:	4619      	mov	r1, r3
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	01db      	lsls	r3, r3, #7
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3384      	adds	r3, #132	; 0x84
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	4611      	mov	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	01d2      	lsls	r2, r2, #7
 8004d0a:	440a      	add	r2, r1
 8004d0c:	3284      	adds	r2, #132	; 0x84
 8004d0e:	f023 0307 	bic.w	r3, r3, #7
 8004d12:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	01db      	lsls	r3, r3, #7
 8004d1e:	4413      	add	r3, r2
 8004d20:	3384      	adds	r3, #132	; 0x84
 8004d22:	461a      	mov	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	061b      	lsls	r3, r3, #24
 8004d44:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	01db      	lsls	r3, r3, #7
 8004d50:	4413      	add	r3, r2
 8004d52:	3384      	adds	r3, #132	; 0x84
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	01db      	lsls	r3, r3, #7
 8004d60:	4413      	add	r3, r2
 8004d62:	3384      	adds	r3, #132	; 0x84
 8004d64:	461a      	mov	r2, r3
 8004d66:	2300      	movs	r3, #0
 8004d68:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d70:	461a      	mov	r2, r3
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	01db      	lsls	r3, r3, #7
 8004d84:	440b      	add	r3, r1
 8004d86:	3384      	adds	r3, #132	; 0x84
 8004d88:	4619      	mov	r1, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	01db      	lsls	r3, r3, #7
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3384      	adds	r3, #132	; 0x84
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	4611      	mov	r1, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	01d2      	lsls	r2, r2, #7
 8004daa:	440a      	add	r2, r1
 8004dac:	3284      	adds	r2, #132	; 0x84
 8004dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004db2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	01db      	lsls	r3, r3, #7
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3384      	adds	r3, #132	; 0x84
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	01db      	lsls	r3, r3, #7
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3384      	adds	r3, #132	; 0x84
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	01db      	lsls	r3, r3, #7
 8004de4:	440b      	add	r3, r1
 8004de6:	3384      	adds	r3, #132	; 0x84
 8004de8:	4619      	mov	r1, r3
 8004dea:	4b58      	ldr	r3, [pc, #352]	; (8004f4c <LTDC_SetConfig+0x32c>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	68f9      	ldr	r1, [r7, #12]
 8004dfa:	6809      	ldr	r1, [r1, #0]
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	01c9      	lsls	r1, r1, #7
 8004e02:	4401      	add	r1, r0
 8004e04:	3184      	adds	r1, #132	; 0x84
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	01db      	lsls	r3, r3, #7
 8004e14:	4413      	add	r3, r2
 8004e16:	3384      	adds	r3, #132	; 0x84
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	01db      	lsls	r3, r3, #7
 8004e24:	4413      	add	r3, r2
 8004e26:	3384      	adds	r3, #132	; 0x84
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	01db      	lsls	r3, r3, #7
 8004e38:	4413      	add	r3, r2
 8004e3a:	3384      	adds	r3, #132	; 0x84
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e01b      	b.n	8004e8a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d102      	bne.n	8004e60 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e014      	b.n	8004e8a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d00b      	beq.n	8004e80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d007      	beq.n	8004e80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d003      	beq.n	8004e80 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e7c:	2b07      	cmp	r3, #7
 8004e7e:	d102      	bne.n	8004e86 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004e80:	2302      	movs	r3, #2
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	e001      	b.n	8004e8a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004e86:	2301      	movs	r3, #1
 8004e88:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	01db      	lsls	r3, r3, #7
 8004e94:	4413      	add	r3, r2
 8004e96:	3384      	adds	r3, #132	; 0x84
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	01d2      	lsls	r2, r2, #7
 8004ea4:	440a      	add	r2, r1
 8004ea6:	3284      	adds	r2, #132	; 0x84
 8004ea8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004eac:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	041a      	lsls	r2, r3, #16
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	1acb      	subs	r3, r1, r3
 8004ec4:	69f9      	ldr	r1, [r7, #28]
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	3307      	adds	r3, #7
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	6809      	ldr	r1, [r1, #0]
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	01c9      	lsls	r1, r1, #7
 8004ed6:	4401      	add	r1, r0
 8004ed8:	3184      	adds	r1, #132	; 0x84
 8004eda:	4313      	orrs	r3, r2
 8004edc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	01db      	lsls	r3, r3, #7
 8004ee8:	4413      	add	r3, r2
 8004eea:	3384      	adds	r3, #132	; 0x84
 8004eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	01db      	lsls	r3, r3, #7
 8004ef8:	440b      	add	r3, r1
 8004efa:	3384      	adds	r3, #132	; 0x84
 8004efc:	4619      	mov	r1, r3
 8004efe:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <LTDC_SetConfig+0x330>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	01db      	lsls	r3, r3, #7
 8004f0e:	4413      	add	r3, r2
 8004f10:	3384      	adds	r3, #132	; 0x84
 8004f12:	461a      	mov	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	01db      	lsls	r3, r3, #7
 8004f24:	4413      	add	r3, r2
 8004f26:	3384      	adds	r3, #132	; 0x84
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	01d2      	lsls	r2, r2, #7
 8004f34:	440a      	add	r2, r1
 8004f36:	3284      	adds	r2, #132	; 0x84
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	fffff8f8 	.word	0xfffff8f8
 8004f50:	fffff800 	.word	0xfffff800

08004f54 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e096      	b.n	800509c <HAL_NOR_Init+0x148>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7fd f904 	bl	8002190 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3308      	adds	r3, #8
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f006 fd40 	bl	800ba18 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	f006 fdc8 	bl	800bb38 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6858      	ldr	r0, [r3, #4]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	f006 fe0f 	bl	800bbd8 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	6892      	ldr	r2, [r2, #8]
 8004fc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	6892      	ldr	r2, [r2, #8]
 8004fce:	f041 0101 	orr.w	r1, r1, #1
 8004fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <HAL_NOR_Init+0x150>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e002      	b.n	8004fec <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8004fe6:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <HAL_NOR_Init+0x150>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004fec:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <HAL_NOR_Init+0x154>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2d      	ldr	r2, [pc, #180]	; (80050a8 <HAL_NOR_Init+0x154>)
 8004ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ff6:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <HAL_NOR_Init+0xbc>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8005008:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e012      	b.n	8005036 <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d103      	bne.n	8005020 <HAL_NOR_Init+0xcc>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8005018:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e00a      	b.n	8005036 <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b04      	cmp	r3, #4
 8005026:	d103      	bne.n	8005030 <HAL_NOR_Init+0xdc>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8005028:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	e002      	b.n	8005036 <HAL_NOR_Init+0xe2>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8005030:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8005034:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10c      	bne.n	8005058 <HAL_NOR_Init+0x104>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f006 fdfd 	bl	800bc48 <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2204      	movs	r2, #4
 8005052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005056:	e020      	b.n	800509a <HAL_NOR_Init+0x146>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8005058:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <HAL_NOR_Init+0x150>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d102      	bne.n	8005066 <HAL_NOR_Init+0x112>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	33aa      	adds	r3, #170	; 0xaa
 8005064:	e001      	b.n	800506a <HAL_NOR_Init+0x116>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	3355      	adds	r3, #85	; 0x55
 800506a:	2298      	movs	r2, #152	; 0x98
 800506c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800506e:	f3bf 8f4f 	dsb	sy
}
 8005072:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_NOR_Init+0x150>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d102      	bne.n	8005082 <HAL_NOR_Init+0x12e>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3326      	adds	r3, #38	; 0x26
 8005080:	e001      	b.n	8005086 <HAL_NOR_Init+0x132>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	3313      	adds	r3, #19
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	649a      	str	r2, [r3, #72]	; 0x48

    status = HAL_NOR_ReturnToReadMode(hnor);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f80b 	bl	80050ac <HAL_NOR_ReturnToReadMode>
 8005096:	4603      	mov	r3, r0
 8005098:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 800509a:	7cfb      	ldrb	r3, [r7, #19]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	24001118 	.word	0x24001118
 80050a8:	52004000 	.word	0x52004000

080050ac <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050be:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 80050c0:	7abb      	ldrb	r3, [r7, #10]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d101      	bne.n	80050ca <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
 80050c8:	e052      	b.n	8005170 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 80050ca:	7abb      	ldrb	r3, [r7, #10]
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d101      	bne.n	80050d4 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e04d      	b.n	8005170 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 80050d4:	7abb      	ldrb	r3, [r7, #10]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d149      	bne.n	800516e <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_NOR_ReturnToReadMode+0x3c>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e043      	b.n	8005170 <HAL_NOR_ReturnToReadMode+0xc4>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8005100:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e012      	b.n	800512e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d103      	bne.n	8005118 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8005110:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	e00a      	b.n	800512e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b04      	cmp	r3, #4
 800511e:	d103      	bne.n	8005128 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8005120:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	e002      	b.n	800512e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8005128:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800512c:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005132:	2b02      	cmp	r3, #2
 8005134:	d105      	bne.n	8005142 <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	22f0      	movs	r2, #240	; 0xf0
 800513a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800513c:	f3bf 8f4f 	dsb	sy
}
 8005140:	e00b      	b.n	800515a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005146:	2b01      	cmp	r3, #1
 8005148:	d105      	bne.n	8005156 <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	22ff      	movs	r2, #255	; 0xff
 800514e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005150:	f3bf 8f4f 	dsb	sy
}
 8005154:	e001      	b.n	800515a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7aba      	ldrb	r2, [r7, #10]
 800515e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 800516a:	7afb      	ldrb	r3, [r7, #11]
 800516c:	e000      	b.n	8005170 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800517c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517e:	b08f      	sub	sp, #60	; 0x3c
 8005180:	af0a      	add	r7, sp, #40	; 0x28
 8005182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e116      	b.n	80053bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fc fda9 	bl	8001d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2203      	movs	r2, #3
 80051b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d102      	bne.n	80051c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f007 fb73 	bl	800c8b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	687e      	ldr	r6, [r7, #4]
 80051da:	466d      	mov	r5, sp
 80051dc:	f106 0410 	add.w	r4, r6, #16
 80051e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80051f0:	1d33      	adds	r3, r6, #4
 80051f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f4:	6838      	ldr	r0, [r7, #0]
 80051f6:	f007 faf1 	bl	800c7dc <USB_CoreInit>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0d7      	b.n	80053bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2100      	movs	r1, #0
 8005212:	4618      	mov	r0, r3
 8005214:	f007 fb61 	bl	800c8da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]
 800521c:	e04a      	b.n	80052b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	333d      	adds	r3, #61	; 0x3d
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005232:	7bfa      	ldrb	r2, [r7, #15]
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	333c      	adds	r3, #60	; 0x3c
 8005242:	7bfa      	ldrb	r2, [r7, #15]
 8005244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005246:	7bfa      	ldrb	r2, [r7, #15]
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	b298      	uxth	r0, r3
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	3356      	adds	r3, #86	; 0x56
 800525a:	4602      	mov	r2, r0
 800525c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3340      	adds	r3, #64	; 0x40
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3344      	adds	r3, #68	; 0x44
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005286:	7bfa      	ldrb	r2, [r7, #15]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	3348      	adds	r3, #72	; 0x48
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800529a:	7bfa      	ldrb	r2, [r7, #15]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	334c      	adds	r3, #76	; 0x4c
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	3301      	adds	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d3af      	bcc.n	800521e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
 80052c2:	e044      	b.n	800534e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80052ec:	7bfa      	ldrb	r2, [r7, #15]
 80052ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800531c:	7bfa      	ldrb	r2, [r7, #15]
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	3301      	adds	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
 800534e:	7bfa      	ldrb	r2, [r7, #15]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d3b5      	bcc.n	80052c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	687e      	ldr	r6, [r7, #4]
 8005360:	466d      	mov	r5, sp
 8005362:	f106 0410 	add.w	r4, r6, #16
 8005366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800536a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800536e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005372:	e885 0003 	stmia.w	r5, {r0, r1}
 8005376:	1d33      	adds	r3, r6, #4
 8005378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800537a:	6838      	ldr	r0, [r7, #0]
 800537c:	f007 fafa 	bl	800c974 <USB_DevInit>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e014      	b.n	80053bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d102      	bne.n	80053b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f80a 	bl	80053c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f007 fcb8 	bl	800cd2a <USB_DevDisconnect>

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_PCDEx_ActivateLPM+0x44>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	10000003 	.word	0x10000003

0800540c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005414:	4b19      	ldr	r3, [pc, #100]	; (800547c <HAL_PWREx_ConfigSupply+0x70>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b04      	cmp	r3, #4
 800541e:	d00a      	beq.n	8005436 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005420:	4b16      	ldr	r3, [pc, #88]	; (800547c <HAL_PWREx_ConfigSupply+0x70>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d001      	beq.n	8005432 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e01f      	b.n	8005472 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e01d      	b.n	8005472 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <HAL_PWREx_ConfigSupply+0x70>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f023 0207 	bic.w	r2, r3, #7
 800543e:	490f      	ldr	r1, [pc, #60]	; (800547c <HAL_PWREx_ConfigSupply+0x70>)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4313      	orrs	r3, r2
 8005444:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005446:	f7fd f8db 	bl	8002600 <HAL_GetTick>
 800544a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800544c:	e009      	b.n	8005462 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800544e:	f7fd f8d7 	bl	8002600 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800545c:	d901      	bls.n	8005462 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e007      	b.n	8005472 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005462:	4b06      	ldr	r3, [pc, #24]	; (800547c <HAL_PWREx_ConfigSupply+0x70>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546e:	d1ee      	bne.n	800544e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	58024800 	.word	0x58024800

08005480 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4a04      	ldr	r2, [pc, #16]	; (800549c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800548a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800548e:	60d3      	str	r3, [r2, #12]
}
 8005490:	bf00      	nop
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	58024800 	.word	0x58024800

080054a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80054a8:	f7fd f8aa 	bl	8002600 <HAL_GetTick>
 80054ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e05f      	b.n	8005578 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d107      	bne.n	80054d4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fc f9df 	bl	8001888 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80054ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f85a 	bl	8005588 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	021a      	lsls	r2, r3, #8
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	2120      	movs	r1, #32
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f852 	bl	80055a4 <QSPI_WaitFlagStateUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005504:	7afb      	ldrb	r3, [r7, #11]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d135      	bne.n	8005576 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <HAL_QSPI_Init+0xe0>)
 8005512:	4013      	ands	r3, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6852      	ldr	r2, [r2, #4]
 8005518:	0611      	lsls	r1, r2, #24
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	68d2      	ldr	r2, [r2, #12]
 800551e:	4311      	orrs	r1, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	69d2      	ldr	r2, [r2, #28]
 8005524:	4311      	orrs	r1, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6a12      	ldr	r2, [r2, #32]
 800552a:	4311      	orrs	r1, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	430b      	orrs	r3, r1
 8005532:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <HAL_QSPI_Init+0xe4>)
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6912      	ldr	r2, [r2, #16]
 8005542:	0411      	lsls	r1, r2, #16
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6952      	ldr	r2, [r2, #20]
 8005548:	4311      	orrs	r1, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6992      	ldr	r2, [r2, #24]
 800554e:	4311      	orrs	r1, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	430b      	orrs	r3, r1
 8005556:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005576:	7afb      	ldrb	r3, [r7, #11]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	00ffff2f 	.word	0x00ffff2f
 8005584:	ffe0f8fe 	.word	0xffe0f8fe

08005588 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	4613      	mov	r3, r2
 80055b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055b4:	e01a      	b.n	80055ec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055bc:	d016      	beq.n	80055ec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fd f81f 	bl	8002600 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2204      	movs	r2, #4
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e0:	f043 0201 	orr.w	r2, r3, #1
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e00e      	b.n	800560a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf14      	ite	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	2300      	moveq	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	429a      	cmp	r2, r3
 8005606:	d1d6      	bne.n	80055b6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08c      	sub	sp, #48	; 0x30
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f000 bc48 	b.w	8005eb8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8088 	beq.w	8005746 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005636:	4b99      	ldr	r3, [pc, #612]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005640:	4b96      	ldr	r3, [pc, #600]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	2b10      	cmp	r3, #16
 800564a:	d007      	beq.n	800565c <HAL_RCC_OscConfig+0x48>
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	2b18      	cmp	r3, #24
 8005650:	d111      	bne.n	8005676 <HAL_RCC_OscConfig+0x62>
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d10c      	bne.n	8005676 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565c:	4b8f      	ldr	r3, [pc, #572]	; (800589c <HAL_RCC_OscConfig+0x288>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d06d      	beq.n	8005744 <HAL_RCC_OscConfig+0x130>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d169      	bne.n	8005744 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	f000 bc21 	b.w	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567e:	d106      	bne.n	800568e <HAL_RCC_OscConfig+0x7a>
 8005680:	4b86      	ldr	r3, [pc, #536]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a85      	ldr	r2, [pc, #532]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	e02e      	b.n	80056ec <HAL_RCC_OscConfig+0xd8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x9c>
 8005696:	4b81      	ldr	r3, [pc, #516]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a80      	ldr	r2, [pc, #512]	; (800589c <HAL_RCC_OscConfig+0x288>)
 800569c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4b7e      	ldr	r3, [pc, #504]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a7d      	ldr	r2, [pc, #500]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e01d      	b.n	80056ec <HAL_RCC_OscConfig+0xd8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0xc0>
 80056ba:	4b78      	ldr	r3, [pc, #480]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a77      	ldr	r2, [pc, #476]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b75      	ldr	r3, [pc, #468]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a74      	ldr	r2, [pc, #464]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e00b      	b.n	80056ec <HAL_RCC_OscConfig+0xd8>
 80056d4:	4b71      	ldr	r3, [pc, #452]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a70      	ldr	r2, [pc, #448]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b6e      	ldr	r3, [pc, #440]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6d      	ldr	r2, [pc, #436]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fc ff84 	bl	8002600 <HAL_GetTick>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056fc:	f7fc ff80 	bl	8002600 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e3d4      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800570e:	4b63      	ldr	r3, [pc, #396]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0xe8>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fc ff70 	bl	8002600 <HAL_GetTick>
 8005720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005724:	f7fc ff6c 	bl	8002600 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	; 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e3c0      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005736:	4b59      	ldr	r3, [pc, #356]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x110>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80ca 	beq.w	80058e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005754:	4b51      	ldr	r3, [pc, #324]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800575c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800575e:	4b4f      	ldr	r3, [pc, #316]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <HAL_RCC_OscConfig+0x166>
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	2b18      	cmp	r3, #24
 800576e:	d156      	bne.n	800581e <HAL_RCC_OscConfig+0x20a>
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d151      	bne.n	800581e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800577a:	4b48      	ldr	r3, [pc, #288]	; (800589c <HAL_RCC_OscConfig+0x288>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_RCC_OscConfig+0x17e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e392      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005792:	4b42      	ldr	r3, [pc, #264]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f023 0219 	bic.w	r2, r3, #25
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	493f      	ldr	r1, [pc, #252]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fc ff2c 	bl	8002600 <HAL_GetTick>
 80057a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ac:	f7fc ff28 	bl	8002600 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e37c      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057be:	4b37      	ldr	r3, [pc, #220]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ca:	f7fc ff49 	bl	8002660 <HAL_GetREVID>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d817      	bhi.n	8005808 <HAL_RCC_OscConfig+0x1f4>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d108      	bne.n	80057f2 <HAL_RCC_OscConfig+0x1de>
 80057e0:	4b2e      	ldr	r3, [pc, #184]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057e8:	4a2c      	ldr	r2, [pc, #176]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057f0:	e07a      	b.n	80058e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f2:	4b2a      	ldr	r3, [pc, #168]	; (800589c <HAL_RCC_OscConfig+0x288>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	031b      	lsls	r3, r3, #12
 8005800:	4926      	ldr	r1, [pc, #152]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005802:	4313      	orrs	r3, r2
 8005804:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005806:	e06f      	b.n	80058e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005808:	4b24      	ldr	r3, [pc, #144]	; (800589c <HAL_RCC_OscConfig+0x288>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	061b      	lsls	r3, r3, #24
 8005816:	4921      	ldr	r1, [pc, #132]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005818:	4313      	orrs	r3, r2
 800581a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800581c:	e064      	b.n	80058e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d047      	beq.n	80058b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005826:	4b1d      	ldr	r3, [pc, #116]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 0219 	bic.w	r2, r3, #25
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	491a      	ldr	r1, [pc, #104]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fc fee2 	bl	8002600 <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005840:	f7fc fede 	bl	8002600 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e332      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005852:	4b12      	ldr	r3, [pc, #72]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585e:	f7fc feff 	bl	8002660 <HAL_GetREVID>
 8005862:	4603      	mov	r3, r0
 8005864:	f241 0203 	movw	r2, #4099	; 0x1003
 8005868:	4293      	cmp	r3, r2
 800586a:	d819      	bhi.n	80058a0 <HAL_RCC_OscConfig+0x28c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d108      	bne.n	8005886 <HAL_RCC_OscConfig+0x272>
 8005874:	4b09      	ldr	r3, [pc, #36]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800587c:	4a07      	ldr	r2, [pc, #28]	; (800589c <HAL_RCC_OscConfig+0x288>)
 800587e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005882:	6053      	str	r3, [r2, #4]
 8005884:	e030      	b.n	80058e8 <HAL_RCC_OscConfig+0x2d4>
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	031b      	lsls	r3, r3, #12
 8005894:	4901      	ldr	r1, [pc, #4]	; (800589c <HAL_RCC_OscConfig+0x288>)
 8005896:	4313      	orrs	r3, r2
 8005898:	604b      	str	r3, [r1, #4]
 800589a:	e025      	b.n	80058e8 <HAL_RCC_OscConfig+0x2d4>
 800589c:	58024400 	.word	0x58024400
 80058a0:	4b9a      	ldr	r3, [pc, #616]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	061b      	lsls	r3, r3, #24
 80058ae:	4997      	ldr	r1, [pc, #604]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	604b      	str	r3, [r1, #4]
 80058b4:	e018      	b.n	80058e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b6:	4b95      	ldr	r3, [pc, #596]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a94      	ldr	r2, [pc, #592]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f7fc fe9d 	bl	8002600 <HAL_GetTick>
 80058c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ca:	f7fc fe99 	bl	8002600 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e2ed      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058dc:	4b8b      	ldr	r3, [pc, #556]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80a9 	beq.w	8005a48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f6:	4b85      	ldr	r3, [pc, #532]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005900:	4b82      	ldr	r3, [pc, #520]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d007      	beq.n	800591c <HAL_RCC_OscConfig+0x308>
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b18      	cmp	r3, #24
 8005910:	d13a      	bne.n	8005988 <HAL_RCC_OscConfig+0x374>
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	2b01      	cmp	r3, #1
 800591a:	d135      	bne.n	8005988 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800591c:	4b7b      	ldr	r3, [pc, #492]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_OscConfig+0x320>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	2b80      	cmp	r3, #128	; 0x80
 800592e:	d001      	beq.n	8005934 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e2c1      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005934:	f7fc fe94 	bl	8002660 <HAL_GetREVID>
 8005938:	4603      	mov	r3, r0
 800593a:	f241 0203 	movw	r2, #4099	; 0x1003
 800593e:	4293      	cmp	r3, r2
 8005940:	d817      	bhi.n	8005972 <HAL_RCC_OscConfig+0x35e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	2b20      	cmp	r3, #32
 8005948:	d108      	bne.n	800595c <HAL_RCC_OscConfig+0x348>
 800594a:	4b70      	ldr	r3, [pc, #448]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005952:	4a6e      	ldr	r2, [pc, #440]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005958:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800595a:	e075      	b.n	8005a48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800595c:	4b6b      	ldr	r3, [pc, #428]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	069b      	lsls	r3, r3, #26
 800596a:	4968      	ldr	r1, [pc, #416]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 800596c:	4313      	orrs	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005970:	e06a      	b.n	8005a48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005972:	4b66      	ldr	r3, [pc, #408]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	061b      	lsls	r3, r3, #24
 8005980:	4962      	ldr	r1, [pc, #392]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005982:	4313      	orrs	r3, r2
 8005984:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005986:	e05f      	b.n	8005a48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d042      	beq.n	8005a16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005990:	4b5e      	ldr	r3, [pc, #376]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a5d      	ldr	r2, [pc, #372]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599c:	f7fc fe30 	bl	8002600 <HAL_GetTick>
 80059a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059a4:	f7fc fe2c 	bl	8002600 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e280      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059b6:	4b55      	ldr	r3, [pc, #340]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059c2:	f7fc fe4d 	bl	8002660 <HAL_GetREVID>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d817      	bhi.n	8005a00 <HAL_RCC_OscConfig+0x3ec>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d108      	bne.n	80059ea <HAL_RCC_OscConfig+0x3d6>
 80059d8:	4b4c      	ldr	r3, [pc, #304]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80059e0:	4a4a      	ldr	r2, [pc, #296]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80059e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e6:	6053      	str	r3, [r2, #4]
 80059e8:	e02e      	b.n	8005a48 <HAL_RCC_OscConfig+0x434>
 80059ea:	4b48      	ldr	r3, [pc, #288]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	069b      	lsls	r3, r3, #26
 80059f8:	4944      	ldr	r1, [pc, #272]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	604b      	str	r3, [r1, #4]
 80059fe:	e023      	b.n	8005a48 <HAL_RCC_OscConfig+0x434>
 8005a00:	4b42      	ldr	r3, [pc, #264]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	061b      	lsls	r3, r3, #24
 8005a0e:	493f      	ldr	r1, [pc, #252]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60cb      	str	r3, [r1, #12]
 8005a14:	e018      	b.n	8005a48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a16:	4b3d      	ldr	r3, [pc, #244]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a22:	f7fc fded 	bl	8002600 <HAL_GetTick>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a2a:	f7fc fde9 	bl	8002600 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e23d      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a3c:	4b33      	ldr	r3, [pc, #204]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f0      	bne.n	8005a2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d036      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d019      	beq.n	8005a90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a5c:	4b2b      	ldr	r3, [pc, #172]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a60:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fc fdca 	bl	8002600 <HAL_GetTick>
 8005a6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a70:	f7fc fdc6 	bl	8002600 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e21a      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a82:	4b22      	ldr	r3, [pc, #136]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f0      	beq.n	8005a70 <HAL_RCC_OscConfig+0x45c>
 8005a8e:	e018      	b.n	8005ac2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a90:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9c:	f7fc fdb0 	bl	8002600 <HAL_GetTick>
 8005aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa4:	f7fc fdac 	bl	8002600 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e200      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f0      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d039      	beq.n	8005b42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01c      	beq.n	8005b10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ae0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ae2:	f7fc fd8d 	bl	8002600 <HAL_GetTick>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aea:	f7fc fd89 	bl	8002600 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e1dd      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005afc:	4b03      	ldr	r3, [pc, #12]	; (8005b0c <HAL_RCC_OscConfig+0x4f8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x4d6>
 8005b08:	e01b      	b.n	8005b42 <HAL_RCC_OscConfig+0x52e>
 8005b0a:	bf00      	nop
 8005b0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b10:	4b9b      	ldr	r3, [pc, #620]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a9a      	ldr	r2, [pc, #616]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b1c:	f7fc fd70 	bl	8002600 <HAL_GetTick>
 8005b20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b24:	f7fc fd6c 	bl	8002600 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e1c0      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b36:	4b92      	ldr	r3, [pc, #584]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8081 	beq.w	8005c52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b50:	4b8c      	ldr	r3, [pc, #560]	; (8005d84 <HAL_RCC_OscConfig+0x770>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a8b      	ldr	r2, [pc, #556]	; (8005d84 <HAL_RCC_OscConfig+0x770>)
 8005b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b5c:	f7fc fd50 	bl	8002600 <HAL_GetTick>
 8005b60:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b64:	f7fc fd4c 	bl	8002600 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	; 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e1a0      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b76:	4b83      	ldr	r3, [pc, #524]	; (8005d84 <HAL_RCC_OscConfig+0x770>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d106      	bne.n	8005b98 <HAL_RCC_OscConfig+0x584>
 8005b8a:	4b7d      	ldr	r3, [pc, #500]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	4a7c      	ldr	r2, [pc, #496]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	6713      	str	r3, [r2, #112]	; 0x70
 8005b96:	e02d      	b.n	8005bf4 <HAL_RCC_OscConfig+0x5e0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10c      	bne.n	8005bba <HAL_RCC_OscConfig+0x5a6>
 8005ba0:	4b77      	ldr	r3, [pc, #476]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	4a76      	ldr	r2, [pc, #472]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	6713      	str	r3, [r2, #112]	; 0x70
 8005bac:	4b74      	ldr	r3, [pc, #464]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	4a73      	ldr	r2, [pc, #460]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005bb2:	f023 0304 	bic.w	r3, r3, #4
 8005bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb8:	e01c      	b.n	8005bf4 <HAL_RCC_OscConfig+0x5e0>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCC_OscConfig+0x5c8>
 8005bc2:	4b6f      	ldr	r3, [pc, #444]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	4a6e      	ldr	r2, [pc, #440]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005bc8:	f043 0304 	orr.w	r3, r3, #4
 8005bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bce:	4b6c      	ldr	r3, [pc, #432]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	4a6b      	ldr	r2, [pc, #428]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bda:	e00b      	b.n	8005bf4 <HAL_RCC_OscConfig+0x5e0>
 8005bdc:	4b68      	ldr	r3, [pc, #416]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be0:	4a67      	ldr	r2, [pc, #412]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005be2:	f023 0301 	bic.w	r3, r3, #1
 8005be6:	6713      	str	r3, [r2, #112]	; 0x70
 8005be8:	4b65      	ldr	r3, [pc, #404]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bec:	4a64      	ldr	r2, [pc, #400]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005bee:	f023 0304 	bic.w	r3, r3, #4
 8005bf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d015      	beq.n	8005c28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfc:	f7fc fd00 	bl	8002600 <HAL_GetTick>
 8005c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c02:	e00a      	b.n	8005c1a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c04:	f7fc fcfc 	bl	8002600 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e14e      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c1a:	4b59      	ldr	r3, [pc, #356]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0ee      	beq.n	8005c04 <HAL_RCC_OscConfig+0x5f0>
 8005c26:	e014      	b.n	8005c52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c28:	f7fc fcea 	bl	8002600 <HAL_GetTick>
 8005c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c2e:	e00a      	b.n	8005c46 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c30:	f7fc fce6 	bl	8002600 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e138      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c46:	4b4e      	ldr	r3, [pc, #312]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1ee      	bne.n	8005c30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 812d 	beq.w	8005eb6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c5c:	4b48      	ldr	r3, [pc, #288]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c64:	2b18      	cmp	r3, #24
 8005c66:	f000 80bd 	beq.w	8005de4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	f040 809e 	bne.w	8005db0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c74:	4b42      	ldr	r3, [pc, #264]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a41      	ldr	r2, [pc, #260]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fc fcbe 	bl	8002600 <HAL_GetTick>
 8005c84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fc fcba 	bl	8002600 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e10e      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c9a:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ca6:	4b36      	ldr	r3, [pc, #216]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005caa:	4b37      	ldr	r3, [pc, #220]	; (8005d88 <HAL_RCC_OscConfig+0x774>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cb6:	0112      	lsls	r2, r2, #4
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	4931      	ldr	r1, [pc, #196]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	628b      	str	r3, [r1, #40]	; 0x28
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	025b      	lsls	r3, r3, #9
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	061b      	lsls	r3, r3, #24
 8005cec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cf0:	4923      	ldr	r1, [pc, #140]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	4a21      	ldr	r2, [pc, #132]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d02:	4b1f      	ldr	r3, [pc, #124]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d06:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <HAL_RCC_OscConfig+0x778>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d0e:	00d2      	lsls	r2, r2, #3
 8005d10:	491b      	ldr	r1, [pc, #108]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d16:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1a:	f023 020c 	bic.w	r2, r3, #12
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	4917      	ldr	r1, [pc, #92]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	f023 0202 	bic.w	r2, r3, #2
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	4912      	ldr	r1, [pc, #72]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d3a:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d46:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d52:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	4a07      	ldr	r2, [pc, #28]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d64:	f043 0301 	orr.w	r3, r3, #1
 8005d68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <HAL_RCC_OscConfig+0x76c>)
 8005d70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d76:	f7fc fc43 	bl	8002600 <HAL_GetTick>
 8005d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d7c:	e011      	b.n	8005da2 <HAL_RCC_OscConfig+0x78e>
 8005d7e:	bf00      	nop
 8005d80:	58024400 	.word	0x58024400
 8005d84:	58024800 	.word	0x58024800
 8005d88:	fffffc0c 	.word	0xfffffc0c
 8005d8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d90:	f7fc fc36 	bl	8002600 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e08a      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005da2:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0x77c>
 8005dae:	e082      	b.n	8005eb6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db0:	4b43      	ldr	r3, [pc, #268]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a42      	ldr	r2, [pc, #264]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fc fc20 	bl	8002600 <HAL_GetTick>
 8005dc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fc fc1c 	bl	8002600 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e070      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dd6:	4b3a      	ldr	r3, [pc, #232]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x7b0>
 8005de2:	e068      	b.n	8005eb6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005dea:	4b35      	ldr	r3, [pc, #212]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d031      	beq.n	8005e5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f003 0203 	and.w	r2, r3, #3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d12a      	bne.n	8005e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d122      	bne.n	8005e5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d11a      	bne.n	8005e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	0a5b      	lsrs	r3, r3, #9
 8005e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d111      	bne.n	8005e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	0c1b      	lsrs	r3, r3, #16
 8005e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d108      	bne.n	8005e5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	0e1b      	lsrs	r3, r3, #24
 8005e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e02b      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e60:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e64:	08db      	lsrs	r3, r3, #3
 8005e66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d01f      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e76:	4b12      	ldr	r3, [pc, #72]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	4a11      	ldr	r2, [pc, #68]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005e7c:	f023 0301 	bic.w	r3, r3, #1
 8005e80:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e82:	f7fc fbbd 	bl	8002600 <HAL_GetTick>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e88:	bf00      	nop
 8005e8a:	f7fc fbb9 	bl	8002600 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d0f9      	beq.n	8005e8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <HAL_RCC_OscConfig+0x8b0>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ea2:	00d2      	lsls	r2, r2, #3
 8005ea4:	4906      	ldr	r1, [pc, #24]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <HAL_RCC_OscConfig+0x8ac>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3730      	adds	r7, #48	; 0x30
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	58024400 	.word	0x58024400
 8005ec4:	ffff0007 	.word	0xffff0007

08005ec8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e19c      	b.n	8006216 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005edc:	4b8a      	ldr	r3, [pc, #552]	; (8006108 <HAL_RCC_ClockConfig+0x240>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d910      	bls.n	8005f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eea:	4b87      	ldr	r3, [pc, #540]	; (8006108 <HAL_RCC_ClockConfig+0x240>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f023 020f 	bic.w	r2, r3, #15
 8005ef2:	4985      	ldr	r1, [pc, #532]	; (8006108 <HAL_RCC_ClockConfig+0x240>)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efa:	4b83      	ldr	r3, [pc, #524]	; (8006108 <HAL_RCC_ClockConfig+0x240>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e184      	b.n	8006216 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d010      	beq.n	8005f3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	4b7b      	ldr	r3, [pc, #492]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d908      	bls.n	8005f3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f28:	4b78      	ldr	r3, [pc, #480]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	4975      	ldr	r1, [pc, #468]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d010      	beq.n	8005f68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	4b70      	ldr	r3, [pc, #448]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d908      	bls.n	8005f68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f56:	4b6d      	ldr	r3, [pc, #436]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	496a      	ldr	r1, [pc, #424]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d010      	beq.n	8005f96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699a      	ldr	r2, [r3, #24]
 8005f78:	4b64      	ldr	r3, [pc, #400]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d908      	bls.n	8005f96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f84:	4b61      	ldr	r3, [pc, #388]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	495e      	ldr	r1, [pc, #376]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d010      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	4b59      	ldr	r3, [pc, #356]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d908      	bls.n	8005fc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fb2:	4b56      	ldr	r3, [pc, #344]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	4953      	ldr	r1, [pc, #332]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d010      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	4b4d      	ldr	r3, [pc, #308]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d908      	bls.n	8005ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe0:	4b4a      	ldr	r3, [pc, #296]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f023 020f 	bic.w	r2, r3, #15
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4947      	ldr	r1, [pc, #284]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d055      	beq.n	80060aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ffe:	4b43      	ldr	r3, [pc, #268]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	4940      	ldr	r1, [pc, #256]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 800600c:	4313      	orrs	r3, r2
 800600e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d107      	bne.n	8006028 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006018:	4b3c      	ldr	r3, [pc, #240]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d121      	bne.n	8006068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0f6      	b.n	8006216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b03      	cmp	r3, #3
 800602e:	d107      	bne.n	8006040 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006030:	4b36      	ldr	r3, [pc, #216]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d115      	bne.n	8006068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0ea      	b.n	8006216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d107      	bne.n	8006058 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006048:	4b30      	ldr	r3, [pc, #192]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d109      	bne.n	8006068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0de      	b.n	8006216 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006058:	4b2c      	ldr	r3, [pc, #176]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0d6      	b.n	8006216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006068:	4b28      	ldr	r3, [pc, #160]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f023 0207 	bic.w	r2, r3, #7
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4925      	ldr	r1, [pc, #148]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 8006076:	4313      	orrs	r3, r2
 8006078:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800607a:	f7fc fac1 	bl	8002600 <HAL_GetTick>
 800607e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006080:	e00a      	b.n	8006098 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006082:	f7fc fabd 	bl	8002600 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006090:	4293      	cmp	r3, r2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e0be      	b.n	8006216 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006098:	4b1c      	ldr	r3, [pc, #112]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d1eb      	bne.n	8006082 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d010      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	4b14      	ldr	r3, [pc, #80]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d208      	bcs.n	80060d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c6:	4b11      	ldr	r3, [pc, #68]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f023 020f 	bic.w	r2, r3, #15
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	490e      	ldr	r1, [pc, #56]	; (800610c <HAL_RCC_ClockConfig+0x244>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060d8:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <HAL_RCC_ClockConfig+0x240>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d214      	bcs.n	8006110 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e6:	4b08      	ldr	r3, [pc, #32]	; (8006108 <HAL_RCC_ClockConfig+0x240>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f023 020f 	bic.w	r2, r3, #15
 80060ee:	4906      	ldr	r1, [pc, #24]	; (8006108 <HAL_RCC_ClockConfig+0x240>)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f6:	4b04      	ldr	r3, [pc, #16]	; (8006108 <HAL_RCC_ClockConfig+0x240>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d005      	beq.n	8006110 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e086      	b.n	8006216 <HAL_RCC_ClockConfig+0x34e>
 8006108:	52002000 	.word	0x52002000
 800610c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d010      	beq.n	800613e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	4b3f      	ldr	r3, [pc, #252]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006128:	429a      	cmp	r2, r3
 800612a:	d208      	bcs.n	800613e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800612c:	4b3c      	ldr	r3, [pc, #240]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	4939      	ldr	r1, [pc, #228]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 800613a:	4313      	orrs	r3, r2
 800613c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	2b00      	cmp	r3, #0
 8006148:	d010      	beq.n	800616c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	4b34      	ldr	r3, [pc, #208]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006156:	429a      	cmp	r2, r3
 8006158:	d208      	bcs.n	800616c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800615a:	4b31      	ldr	r3, [pc, #196]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	492e      	ldr	r1, [pc, #184]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 8006168:	4313      	orrs	r3, r2
 800616a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	d010      	beq.n	800619a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699a      	ldr	r2, [r3, #24]
 800617c:	4b28      	ldr	r3, [pc, #160]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006184:	429a      	cmp	r2, r3
 8006186:	d208      	bcs.n	800619a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006188:	4b25      	ldr	r3, [pc, #148]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	4922      	ldr	r1, [pc, #136]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 8006196:	4313      	orrs	r3, r2
 8006198:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d010      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69da      	ldr	r2, [r3, #28]
 80061aa:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d208      	bcs.n	80061c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061b6:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	4917      	ldr	r1, [pc, #92]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061c8:	f000 f89e 	bl	8006308 <HAL_RCC_GetSysClockFreq>
 80061cc:	4602      	mov	r2, r0
 80061ce:	4b14      	ldr	r3, [pc, #80]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	4912      	ldr	r1, [pc, #72]	; (8006224 <HAL_RCC_ClockConfig+0x35c>)
 80061da:	5ccb      	ldrb	r3, [r1, r3]
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
 80061e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <HAL_RCC_ClockConfig+0x358>)
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	4a0d      	ldr	r2, [pc, #52]	; (8006224 <HAL_RCC_ClockConfig+0x35c>)
 80061f0:	5cd3      	ldrb	r3, [r2, r3]
 80061f2:	f003 031f 	and.w	r3, r3, #31
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
 80061fc:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <HAL_RCC_ClockConfig+0x360>)
 80061fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <HAL_RCC_ClockConfig+0x364>)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006206:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <HAL_RCC_ClockConfig+0x368>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fc f9ae 	bl	800256c <HAL_InitTick>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	58024400 	.word	0x58024400
 8006224:	0800ce60 	.word	0x0800ce60
 8006228:	24000004 	.word	0x24000004
 800622c:	24000000 	.word	0x24000000
 8006230:	24000008 	.word	0x24000008

08006234 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08c      	sub	sp, #48	; 0x30
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d12a      	bne.n	800629c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006246:	4b2d      	ldr	r3, [pc, #180]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 8006248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800624c:	4a2b      	ldr	r2, [pc, #172]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006256:	4b29      	ldr	r3, [pc, #164]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 8006258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800626a:	2302      	movs	r3, #2
 800626c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800626e:	2303      	movs	r3, #3
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006272:	2300      	movs	r3, #0
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006276:	2300      	movs	r3, #0
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800627a:	f107 031c 	add.w	r3, r7, #28
 800627e:	4619      	mov	r1, r3
 8006280:	481f      	ldr	r0, [pc, #124]	; (8006300 <HAL_RCC_MCOConfig+0xcc>)
 8006282:	f7fe f8cd 	bl	8004420 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006286:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	430b      	orrs	r3, r1
 8006294:	4919      	ldr	r1, [pc, #100]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800629a:	e02a      	b.n	80062f2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800629c:	4b17      	ldr	r3, [pc, #92]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 800629e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 80062a4:	f043 0304 	orr.w	r3, r3, #4
 80062a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80062ac:	4b13      	ldr	r3, [pc, #76]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 80062ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80062ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c0:	2302      	movs	r3, #2
 80062c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062c4:	2303      	movs	r3, #3
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80062cc:	2300      	movs	r3, #0
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80062d0:	f107 031c 	add.w	r3, r7, #28
 80062d4:	4619      	mov	r1, r3
 80062d6:	480b      	ldr	r0, [pc, #44]	; (8006304 <HAL_RCC_MCOConfig+0xd0>)
 80062d8:	f7fe f8a2 	bl	8004420 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	01d9      	lsls	r1, r3, #7
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	430b      	orrs	r3, r1
 80062ec:	4903      	ldr	r1, [pc, #12]	; (80062fc <HAL_RCC_MCOConfig+0xc8>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	610b      	str	r3, [r1, #16]
}
 80062f2:	bf00      	nop
 80062f4:	3730      	adds	r7, #48	; 0x30
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	58024400 	.word	0x58024400
 8006300:	58020000 	.word	0x58020000
 8006304:	58020800 	.word	0x58020800

08006308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006308:	b480      	push	{r7}
 800630a:	b089      	sub	sp, #36	; 0x24
 800630c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800630e:	4bb3      	ldr	r3, [pc, #716]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006316:	2b18      	cmp	r3, #24
 8006318:	f200 8155 	bhi.w	80065c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <HAL_RCC_GetSysClockFreq+0x1c>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006389 	.word	0x08006389
 8006328:	080065c7 	.word	0x080065c7
 800632c:	080065c7 	.word	0x080065c7
 8006330:	080065c7 	.word	0x080065c7
 8006334:	080065c7 	.word	0x080065c7
 8006338:	080065c7 	.word	0x080065c7
 800633c:	080065c7 	.word	0x080065c7
 8006340:	080065c7 	.word	0x080065c7
 8006344:	080063af 	.word	0x080063af
 8006348:	080065c7 	.word	0x080065c7
 800634c:	080065c7 	.word	0x080065c7
 8006350:	080065c7 	.word	0x080065c7
 8006354:	080065c7 	.word	0x080065c7
 8006358:	080065c7 	.word	0x080065c7
 800635c:	080065c7 	.word	0x080065c7
 8006360:	080065c7 	.word	0x080065c7
 8006364:	080063b5 	.word	0x080063b5
 8006368:	080065c7 	.word	0x080065c7
 800636c:	080065c7 	.word	0x080065c7
 8006370:	080065c7 	.word	0x080065c7
 8006374:	080065c7 	.word	0x080065c7
 8006378:	080065c7 	.word	0x080065c7
 800637c:	080065c7 	.word	0x080065c7
 8006380:	080065c7 	.word	0x080065c7
 8006384:	080063bb 	.word	0x080063bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006388:	4b94      	ldr	r3, [pc, #592]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006394:	4b91      	ldr	r3, [pc, #580]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	08db      	lsrs	r3, r3, #3
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	4a90      	ldr	r2, [pc, #576]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
 80063a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80063a6:	e111      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063a8:	4b8d      	ldr	r3, [pc, #564]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063aa:	61bb      	str	r3, [r7, #24]
      break;
 80063ac:	e10e      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80063ae:	4b8d      	ldr	r3, [pc, #564]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063b0:	61bb      	str	r3, [r7, #24]
      break;
 80063b2:	e10b      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80063b4:	4b8c      	ldr	r3, [pc, #560]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063b6:	61bb      	str	r3, [r7, #24]
      break;
 80063b8:	e108      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063ba:	4b88      	ldr	r3, [pc, #544]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80063c4:	4b85      	ldr	r3, [pc, #532]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	091b      	lsrs	r3, r3, #4
 80063ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063d0:	4b82      	ldr	r3, [pc, #520]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80063da:	4b80      	ldr	r3, [pc, #512]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063de:	08db      	lsrs	r3, r3, #3
 80063e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	fb02 f303 	mul.w	r3, r2, r3
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80e1 	beq.w	80065c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b02      	cmp	r3, #2
 8006402:	f000 8083 	beq.w	800650c <HAL_RCC_GetSysClockFreq+0x204>
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b02      	cmp	r3, #2
 800640a:	f200 80a1 	bhi.w	8006550 <HAL_RCC_GetSysClockFreq+0x248>
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0x114>
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d056      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800641a:	e099      	b.n	8006550 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800641c:	4b6f      	ldr	r3, [pc, #444]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d02d      	beq.n	8006484 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006428:	4b6c      	ldr	r3, [pc, #432]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	08db      	lsrs	r3, r3, #3
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	4a6b      	ldr	r2, [pc, #428]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
 8006438:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006452:	4b62      	ldr	r3, [pc, #392]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006462:	ed97 6a02 	vldr	s12, [r7, #8]
 8006466:	eddf 5a61 	vldr	s11, [pc, #388]	; 80065ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800646a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800647a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006482:	e087      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80065f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006496:	4b51      	ldr	r3, [pc, #324]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80065ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064c6:	e065      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80065f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80064d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064da:	4b40      	ldr	r3, [pc, #256]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80065ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80064f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800650a:	e043      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006516:	eddf 6a38 	vldr	s13, [pc, #224]	; 80065f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800651a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651e:	4b2f      	ldr	r3, [pc, #188]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006532:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80065ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8006536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800654e:	e021      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80065f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800655e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006562:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006572:	ed97 6a02 	vldr	s12, [r7, #8]
 8006576:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80065ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800657a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800658a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006592:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	0a5b      	lsrs	r3, r3, #9
 800659a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800659e:	3301      	adds	r3, #1
 80065a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80065b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065b8:	ee17 3a90 	vmov	r3, s15
 80065bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80065be:	e005      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61bb      	str	r3, [r7, #24]
      break;
 80065c4:	e002      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80065c6:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065c8:	61bb      	str	r3, [r7, #24]
      break;
 80065ca:	bf00      	nop
  }

  return sysclockfreq;
 80065cc:	69bb      	ldr	r3, [r7, #24]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3724      	adds	r7, #36	; 0x24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	58024400 	.word	0x58024400
 80065e0:	03d09000 	.word	0x03d09000
 80065e4:	003d0900 	.word	0x003d0900
 80065e8:	017d7840 	.word	0x017d7840
 80065ec:	46000000 	.word	0x46000000
 80065f0:	4c742400 	.word	0x4c742400
 80065f4:	4a742400 	.word	0x4a742400
 80065f8:	4bbebc20 	.word	0x4bbebc20

080065fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006602:	f7ff fe81 	bl	8006308 <HAL_RCC_GetSysClockFreq>
 8006606:	4602      	mov	r2, r0
 8006608:	4b10      	ldr	r3, [pc, #64]	; (800664c <HAL_RCC_GetHCLKFreq+0x50>)
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	0a1b      	lsrs	r3, r3, #8
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	490f      	ldr	r1, [pc, #60]	; (8006650 <HAL_RCC_GetHCLKFreq+0x54>)
 8006614:	5ccb      	ldrb	r3, [r1, r3]
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	fa22 f303 	lsr.w	r3, r2, r3
 800661e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006620:	4b0a      	ldr	r3, [pc, #40]	; (800664c <HAL_RCC_GetHCLKFreq+0x50>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	4a09      	ldr	r2, [pc, #36]	; (8006650 <HAL_RCC_GetHCLKFreq+0x54>)
 800662a:	5cd3      	ldrb	r3, [r2, r3]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	4a07      	ldr	r2, [pc, #28]	; (8006654 <HAL_RCC_GetHCLKFreq+0x58>)
 8006638:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800663a:	4a07      	ldr	r2, [pc, #28]	; (8006658 <HAL_RCC_GetHCLKFreq+0x5c>)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006640:	4b04      	ldr	r3, [pc, #16]	; (8006654 <HAL_RCC_GetHCLKFreq+0x58>)
 8006642:	681b      	ldr	r3, [r3, #0]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	58024400 	.word	0x58024400
 8006650:	0800ce60 	.word	0x0800ce60
 8006654:	24000004 	.word	0x24000004
 8006658:	24000000 	.word	0x24000000

0800665c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006660:	f7ff ffcc 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8006664:	4602      	mov	r2, r0
 8006666:	4b06      	ldr	r3, [pc, #24]	; (8006680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	4904      	ldr	r1, [pc, #16]	; (8006684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006672:	5ccb      	ldrb	r3, [r1, r3]
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800667c:	4618      	mov	r0, r3
 800667e:	bd80      	pop	{r7, pc}
 8006680:	58024400 	.word	0x58024400
 8006684:	0800ce60 	.word	0x0800ce60

08006688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800668c:	f7ff ffb6 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8006690:	4602      	mov	r2, r0
 8006692:	4b06      	ldr	r3, [pc, #24]	; (80066ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	0a1b      	lsrs	r3, r3, #8
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	4904      	ldr	r1, [pc, #16]	; (80066b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800669e:	5ccb      	ldrb	r3, [r1, r3]
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	58024400 	.word	0x58024400
 80066b0:	0800ce60 	.word	0x0800ce60

080066b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066b8:	b0ca      	sub	sp, #296	; 0x128
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066c0:	2300      	movs	r3, #0
 80066c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066c6:	2300      	movs	r3, #0
 80066c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80066d8:	2500      	movs	r5, #0
 80066da:	ea54 0305 	orrs.w	r3, r4, r5
 80066de:	d049      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80066e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066ea:	d02f      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80066ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066f0:	d828      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80066f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066f6:	d01a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80066f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066fc:	d822      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006706:	d007      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006708:	e01c      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800670a:	4bb8      	ldr	r3, [pc, #736]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	4ab7      	ldr	r2, [pc, #732]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006716:	e01a      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800671c:	3308      	adds	r3, #8
 800671e:	2102      	movs	r1, #2
 8006720:	4618      	mov	r0, r3
 8006722:	f002 fb61 	bl	8008de8 <RCCEx_PLL2_Config>
 8006726:	4603      	mov	r3, r0
 8006728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800672c:	e00f      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006732:	3328      	adds	r3, #40	; 0x28
 8006734:	2102      	movs	r1, #2
 8006736:	4618      	mov	r0, r3
 8006738:	f002 fc08 	bl	8008f4c <RCCEx_PLL3_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006742:	e004      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800674a:	e000      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800674c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10a      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006756:	4ba5      	ldr	r3, [pc, #660]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006764:	4aa1      	ldr	r2, [pc, #644]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006766:	430b      	orrs	r3, r1
 8006768:	6513      	str	r3, [r2, #80]	; 0x50
 800676a:	e003      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006770:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006780:	f04f 0900 	mov.w	r9, #0
 8006784:	ea58 0309 	orrs.w	r3, r8, r9
 8006788:	d047      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800678e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006790:	2b04      	cmp	r3, #4
 8006792:	d82a      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006794:	a201      	add	r2, pc, #4	; (adr r2, 800679c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679a:	bf00      	nop
 800679c:	080067b1 	.word	0x080067b1
 80067a0:	080067bf 	.word	0x080067bf
 80067a4:	080067d5 	.word	0x080067d5
 80067a8:	080067f3 	.word	0x080067f3
 80067ac:	080067f3 	.word	0x080067f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b0:	4b8e      	ldr	r3, [pc, #568]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	4a8d      	ldr	r2, [pc, #564]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067bc:	e01a      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c2:	3308      	adds	r3, #8
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f002 fb0e 	bl	8008de8 <RCCEx_PLL2_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067d2:	e00f      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d8:	3328      	adds	r3, #40	; 0x28
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f002 fbb5 	bl	8008f4c <RCCEx_PLL3_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067e8:	e004      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067f0:	e000      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80067f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067fc:	4b7b      	ldr	r3, [pc, #492]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006800:	f023 0107 	bic.w	r1, r3, #7
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680a:	4a78      	ldr	r2, [pc, #480]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800680c:	430b      	orrs	r3, r1
 800680e:	6513      	str	r3, [r2, #80]	; 0x50
 8006810:	e003      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006826:	f04f 0b00 	mov.w	fp, #0
 800682a:	ea5a 030b 	orrs.w	r3, sl, fp
 800682e:	d04c      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683a:	d030      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800683c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006840:	d829      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006842:	2bc0      	cmp	r3, #192	; 0xc0
 8006844:	d02d      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006846:	2bc0      	cmp	r3, #192	; 0xc0
 8006848:	d825      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d018      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800684e:	2b80      	cmp	r3, #128	; 0x80
 8006850:	d821      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d007      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800685a:	e01c      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4b63      	ldr	r3, [pc, #396]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a62      	ldr	r2, [pc, #392]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006868:	e01c      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686e:	3308      	adds	r3, #8
 8006870:	2100      	movs	r1, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f002 fab8 	bl	8008de8 <RCCEx_PLL2_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800687e:	e011      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006884:	3328      	adds	r3, #40	; 0x28
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f002 fb5f 	bl	8008f4c <RCCEx_PLL3_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006894:	e006      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800689c:	e002      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800689e:	bf00      	nop
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80068a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80068ac:	4b4f      	ldr	r3, [pc, #316]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ba:	4a4c      	ldr	r2, [pc, #304]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068bc:	430b      	orrs	r3, r1
 80068be:	6513      	str	r3, [r2, #80]	; 0x50
 80068c0:	e003      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80068d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068da:	2300      	movs	r3, #0
 80068dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80068e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80068e4:	460b      	mov	r3, r1
 80068e6:	4313      	orrs	r3, r2
 80068e8:	d053      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068f6:	d035      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80068f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068fc:	d82e      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80068fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006902:	d031      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006904:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006908:	d828      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800690a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800690e:	d01a      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006914:	d822      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800691a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800691e:	d007      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006920:	e01c      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006922:	4b32      	ldr	r3, [pc, #200]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	4a31      	ldr	r2, [pc, #196]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800692c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800692e:	e01c      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006934:	3308      	adds	r3, #8
 8006936:	2100      	movs	r1, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f002 fa55 	bl	8008de8 <RCCEx_PLL2_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006944:	e011      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800694a:	3328      	adds	r3, #40	; 0x28
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f002 fafc 	bl	8008f4c <RCCEx_PLL3_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800695a:	e006      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006962:	e002      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006964:	bf00      	nop
 8006966:	e000      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006972:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006976:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800697e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006982:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006984:	430b      	orrs	r3, r1
 8006986:	6593      	str	r3, [r2, #88]	; 0x58
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800698e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800699e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069a2:	2300      	movs	r3, #0
 80069a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80069ac:	460b      	mov	r3, r1
 80069ae:	4313      	orrs	r3, r2
 80069b0:	d056      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069be:	d038      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80069c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069c4:	d831      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80069c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069ca:	d034      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80069cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069d0:	d82b      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80069d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069d6:	d01d      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80069d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069dc:	d825      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80069e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069e6:	d00a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80069e8:	e01f      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80069ea:	bf00      	nop
 80069ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f0:	4ba2      	ldr	r3, [pc, #648]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	4aa1      	ldr	r2, [pc, #644]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069fc:	e01c      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a02:	3308      	adds	r3, #8
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f002 f9ee 	bl	8008de8 <RCCEx_PLL2_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a12:	e011      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a18:	3328      	adds	r3, #40	; 0x28
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f002 fa95 	bl	8008f4c <RCCEx_PLL3_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a28:	e006      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a30:	e002      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10b      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006a40:	4b8e      	ldr	r3, [pc, #568]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a44:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a50:	4a8a      	ldr	r2, [pc, #552]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a52:	430b      	orrs	r3, r1
 8006a54:	6593      	str	r3, [r2, #88]	; 0x58
 8006a56:	e003      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a70:	2300      	movs	r3, #0
 8006a72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	d03a      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a86:	2b30      	cmp	r3, #48	; 0x30
 8006a88:	d01f      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006a8a:	2b30      	cmp	r3, #48	; 0x30
 8006a8c:	d819      	bhi.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d00c      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d815      	bhi.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d019      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d111      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9e:	4b77      	ldr	r3, [pc, #476]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	4a76      	ldr	r2, [pc, #472]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006aaa:	e011      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	2102      	movs	r1, #2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f002 f997 	bl	8008de8 <RCCEx_PLL2_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006ac0:	e006      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ac8:	e002      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006aca:	bf00      	nop
 8006acc:	e000      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ad8:	4b68      	ldr	r3, [pc, #416]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006adc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	4a65      	ldr	r2, [pc, #404]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aec:	e003      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006b02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b06:	2300      	movs	r3, #0
 8006b08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4313      	orrs	r3, r2
 8006b14:	d051      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b20:	d035      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b26:	d82e      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b2c:	d031      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006b2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b32:	d828      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b38:	d01a      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b3e:	d822      	bhi.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b48:	d007      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006b4a:	e01c      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4c:	4b4b      	ldr	r3, [pc, #300]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	4a4a      	ldr	r2, [pc, #296]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b58:	e01c      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5e:	3308      	adds	r3, #8
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f002 f940 	bl	8008de8 <RCCEx_PLL2_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b6e:	e011      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b74:	3328      	adds	r3, #40	; 0x28
 8006b76:	2100      	movs	r1, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f002 f9e7 	bl	8008f4c <RCCEx_PLL3_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b84:	e006      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b8c:	e002      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006b8e:	bf00      	nop
 8006b90:	e000      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006b9c:	4b37      	ldr	r3, [pc, #220]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006baa:	4a34      	ldr	r2, [pc, #208]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6513      	str	r3, [r2, #80]	; 0x50
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006bd0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	d056      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006be4:	d033      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bea:	d82c      	bhi.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006bec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bf0:	d02f      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bf6:	d826      	bhi.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006bf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bfc:	d02b      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006bfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c02:	d820      	bhi.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c08:	d012      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006c0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0e:	d81a      	bhi.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d022      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c18:	d115      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c1e:	3308      	adds	r3, #8
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f002 f8e0 	bl	8008de8 <RCCEx_PLL2_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c2e:	e015      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c34:	3328      	adds	r3, #40	; 0x28
 8006c36:	2101      	movs	r1, #1
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f002 f987 	bl	8008f4c <RCCEx_PLL3_Config>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c44:	e00a      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c4c:	e006      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c4e:	bf00      	nop
 8006c50:	e004      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c52:	bf00      	nop
 8006c54:	e002      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10d      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c64:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c72:	4a02      	ldr	r2, [pc, #8]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c74:	430b      	orrs	r3, r1
 8006c76:	6513      	str	r3, [r2, #80]	; 0x50
 8006c78:	e006      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006c7a:	bf00      	nop
 8006c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c9e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d055      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb4:	d033      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cba:	d82c      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc0:	d02f      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc6:	d826      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ccc:	d02b      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006cce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cd2:	d820      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd8:	d012      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cde:	d81a      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d022      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ce8:	d115      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cee:	3308      	adds	r3, #8
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f002 f878 	bl	8008de8 <RCCEx_PLL2_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006cfe:	e015      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d04:	3328      	adds	r3, #40	; 0x28
 8006d06:	2101      	movs	r1, #1
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f002 f91f 	bl	8008f4c <RCCEx_PLL3_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d14:	e00a      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d1e:	bf00      	nop
 8006d20:	e004      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d34:	4ba3      	ldr	r3, [pc, #652]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d38:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d44:	4a9f      	ldr	r2, [pc, #636]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d46:	430b      	orrs	r3, r1
 8006d48:	6593      	str	r3, [r2, #88]	; 0x58
 8006d4a:	e003      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d037      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d7e:	d00e      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d84:	d816      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d018      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d8e:	d111      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d90:	4b8c      	ldr	r3, [pc, #560]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	4a8b      	ldr	r2, [pc, #556]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d9c:	e00f      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da2:	3308      	adds	r3, #8
 8006da4:	2101      	movs	r1, #1
 8006da6:	4618      	mov	r0, r3
 8006da8:	f002 f81e 	bl	8008de8 <RCCEx_PLL2_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006db2:	e004      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dba:	e000      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006dc6:	4b7f      	ldr	r3, [pc, #508]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd4:	4a7b      	ldr	r2, [pc, #492]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	6513      	str	r3, [r2, #80]	; 0x50
 8006dda:	e003      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006de0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006dfa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4313      	orrs	r3, r2
 8006e02:	d039      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d81c      	bhi.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006e0e:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e51 	.word	0x08006e51
 8006e18:	08006e25 	.word	0x08006e25
 8006e1c:	08006e33 	.word	0x08006e33
 8006e20:	08006e51 	.word	0x08006e51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e24:	4b67      	ldr	r3, [pc, #412]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	4a66      	ldr	r2, [pc, #408]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e30:	e00f      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e36:	3308      	adds	r3, #8
 8006e38:	2102      	movs	r1, #2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 ffd4 	bl	8008de8 <RCCEx_PLL2_Config>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e46:	e004      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e4e:	e000      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e5a:	4b5a      	ldr	r3, [pc, #360]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5e:	f023 0103 	bic.w	r1, r3, #3
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e68:	4a56      	ldr	r2, [pc, #344]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e6a:	430b      	orrs	r3, r1
 8006e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e6e:	e003      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006e84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006e92:	460b      	mov	r3, r1
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f000 809f 	beq.w	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e9a:	4b4b      	ldr	r3, [pc, #300]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a4a      	ldr	r2, [pc, #296]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ea6:	f7fb fbab 	bl	8002600 <HAL_GetTick>
 8006eaa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006eae:	e00b      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb0:	f7fb fba6 	bl	8002600 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b64      	cmp	r3, #100	; 0x64
 8006ebe:	d903      	bls.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ec6:	e005      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ec8:	4b3f      	ldr	r3, [pc, #252]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0ed      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d179      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006edc:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ee8:	4053      	eors	r3, r2
 8006eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d015      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ef2:	4b34      	ldr	r3, [pc, #208]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006efe:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f02:	4a30      	ldr	r2, [pc, #192]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f08:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f0a:	4b2e      	ldr	r3, [pc, #184]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0e:	4a2d      	ldr	r2, [pc, #180]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f14:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f16:	4a2b      	ldr	r2, [pc, #172]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2a:	d118      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2c:	f7fb fb68 	bl	8002600 <HAL_GetTick>
 8006f30:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f34:	e00d      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f36:	f7fb fb63 	bl	8002600 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f40:	1ad2      	subs	r2, r2, r3
 8006f42:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d903      	bls.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006f50:	e005      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f52:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0eb      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d129      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f76:	d10e      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006f78:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f88:	091a      	lsrs	r2, r3, #4
 8006f8a:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	4a0d      	ldr	r2, [pc, #52]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f90:	430b      	orrs	r3, r1
 8006f92:	6113      	str	r3, [r2, #16]
 8006f94:	e005      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	4a0a      	ldr	r2, [pc, #40]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006fa0:	6113      	str	r3, [r2, #16]
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fa4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb2:	4a04      	ldr	r2, [pc, #16]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb8:	e00e      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006fc2:	e009      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006fc4:	58024400 	.word	0x58024400
 8006fc8:	58024800 	.word	0x58024800
 8006fcc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f002 0301 	and.w	r3, r2, #1
 8006fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f000 8089 	beq.w	800710c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007000:	2b28      	cmp	r3, #40	; 0x28
 8007002:	d86b      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	080070e5 	.word	0x080070e5
 8007010:	080070dd 	.word	0x080070dd
 8007014:	080070dd 	.word	0x080070dd
 8007018:	080070dd 	.word	0x080070dd
 800701c:	080070dd 	.word	0x080070dd
 8007020:	080070dd 	.word	0x080070dd
 8007024:	080070dd 	.word	0x080070dd
 8007028:	080070dd 	.word	0x080070dd
 800702c:	080070b1 	.word	0x080070b1
 8007030:	080070dd 	.word	0x080070dd
 8007034:	080070dd 	.word	0x080070dd
 8007038:	080070dd 	.word	0x080070dd
 800703c:	080070dd 	.word	0x080070dd
 8007040:	080070dd 	.word	0x080070dd
 8007044:	080070dd 	.word	0x080070dd
 8007048:	080070dd 	.word	0x080070dd
 800704c:	080070c7 	.word	0x080070c7
 8007050:	080070dd 	.word	0x080070dd
 8007054:	080070dd 	.word	0x080070dd
 8007058:	080070dd 	.word	0x080070dd
 800705c:	080070dd 	.word	0x080070dd
 8007060:	080070dd 	.word	0x080070dd
 8007064:	080070dd 	.word	0x080070dd
 8007068:	080070dd 	.word	0x080070dd
 800706c:	080070e5 	.word	0x080070e5
 8007070:	080070dd 	.word	0x080070dd
 8007074:	080070dd 	.word	0x080070dd
 8007078:	080070dd 	.word	0x080070dd
 800707c:	080070dd 	.word	0x080070dd
 8007080:	080070dd 	.word	0x080070dd
 8007084:	080070dd 	.word	0x080070dd
 8007088:	080070dd 	.word	0x080070dd
 800708c:	080070e5 	.word	0x080070e5
 8007090:	080070dd 	.word	0x080070dd
 8007094:	080070dd 	.word	0x080070dd
 8007098:	080070dd 	.word	0x080070dd
 800709c:	080070dd 	.word	0x080070dd
 80070a0:	080070dd 	.word	0x080070dd
 80070a4:	080070dd 	.word	0x080070dd
 80070a8:	080070dd 	.word	0x080070dd
 80070ac:	080070e5 	.word	0x080070e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b4:	3308      	adds	r3, #8
 80070b6:	2101      	movs	r1, #1
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 fe95 	bl	8008de8 <RCCEx_PLL2_Config>
 80070be:	4603      	mov	r3, r0
 80070c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80070c4:	e00f      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ca:	3328      	adds	r3, #40	; 0x28
 80070cc:	2101      	movs	r1, #1
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 ff3c 	bl	8008f4c <RCCEx_PLL3_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80070da:	e004      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070e2:	e000      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80070e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80070ee:	4bbf      	ldr	r3, [pc, #764]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070fc:	4abb      	ldr	r2, [pc, #748]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070fe:	430b      	orrs	r3, r1
 8007100:	6553      	str	r3, [r2, #84]	; 0x54
 8007102:	e003      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800710c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f002 0302 	and.w	r3, r2, #2
 8007118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800711c:	2300      	movs	r3, #0
 800711e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007122:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007126:	460b      	mov	r3, r1
 8007128:	4313      	orrs	r3, r2
 800712a:	d041      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007132:	2b05      	cmp	r3, #5
 8007134:	d824      	bhi.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007189 	.word	0x08007189
 8007140:	08007155 	.word	0x08007155
 8007144:	0800716b 	.word	0x0800716b
 8007148:	08007189 	.word	0x08007189
 800714c:	08007189 	.word	0x08007189
 8007150:	08007189 	.word	0x08007189
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007158:	3308      	adds	r3, #8
 800715a:	2101      	movs	r1, #1
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fe43 	bl	8008de8 <RCCEx_PLL2_Config>
 8007162:	4603      	mov	r3, r0
 8007164:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007168:	e00f      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716e:	3328      	adds	r3, #40	; 0x28
 8007170:	2101      	movs	r1, #1
 8007172:	4618      	mov	r0, r3
 8007174:	f001 feea 	bl	8008f4c <RCCEx_PLL3_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800717e:	e004      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007186:	e000      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800718a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007192:	4b96      	ldr	r3, [pc, #600]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007196:	f023 0107 	bic.w	r1, r3, #7
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071a0:	4a92      	ldr	r2, [pc, #584]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071a2:	430b      	orrs	r3, r1
 80071a4:	6553      	str	r3, [r2, #84]	; 0x54
 80071a6:	e003      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	f002 0304 	and.w	r3, r2, #4
 80071bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071c0:	2300      	movs	r3, #0
 80071c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4313      	orrs	r3, r2
 80071ce:	d044      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071d8:	2b05      	cmp	r3, #5
 80071da:	d825      	bhi.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80071dc:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	08007231 	.word	0x08007231
 80071e8:	080071fd 	.word	0x080071fd
 80071ec:	08007213 	.word	0x08007213
 80071f0:	08007231 	.word	0x08007231
 80071f4:	08007231 	.word	0x08007231
 80071f8:	08007231 	.word	0x08007231
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007200:	3308      	adds	r3, #8
 8007202:	2101      	movs	r1, #1
 8007204:	4618      	mov	r0, r3
 8007206:	f001 fdef 	bl	8008de8 <RCCEx_PLL2_Config>
 800720a:	4603      	mov	r3, r0
 800720c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007210:	e00f      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007216:	3328      	adds	r3, #40	; 0x28
 8007218:	2101      	movs	r1, #1
 800721a:	4618      	mov	r0, r3
 800721c:	f001 fe96 	bl	8008f4c <RCCEx_PLL3_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007226:	e004      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800722e:	e000      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10b      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800723a:	4b6c      	ldr	r3, [pc, #432]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800723c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723e:	f023 0107 	bic.w	r1, r3, #7
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800724a:	4a68      	ldr	r2, [pc, #416]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800724c:	430b      	orrs	r3, r1
 800724e:	6593      	str	r3, [r2, #88]	; 0x58
 8007250:	e003      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007256:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800725a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f002 0320 	and.w	r3, r2, #32
 8007266:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800726a:	2300      	movs	r3, #0
 800726c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007274:	460b      	mov	r3, r1
 8007276:	4313      	orrs	r3, r2
 8007278:	d055      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800727a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007286:	d033      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800728c:	d82c      	bhi.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800728e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007292:	d02f      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007298:	d826      	bhi.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800729a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800729e:	d02b      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80072a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072a4:	d820      	bhi.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072aa:	d012      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80072ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b0:	d81a      	bhi.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d022      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80072b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ba:	d115      	bne.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c0:	3308      	adds	r3, #8
 80072c2:	2100      	movs	r1, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f001 fd8f 	bl	8008de8 <RCCEx_PLL2_Config>
 80072ca:	4603      	mov	r3, r0
 80072cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80072d0:	e015      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d6:	3328      	adds	r3, #40	; 0x28
 80072d8:	2102      	movs	r1, #2
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fe36 	bl	8008f4c <RCCEx_PLL3_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80072e6:	e00a      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072ee:	e006      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80072f0:	bf00      	nop
 80072f2:	e004      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80072f4:	bf00      	nop
 80072f6:	e002      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80072fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10b      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007306:	4b39      	ldr	r3, [pc, #228]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007316:	4a35      	ldr	r2, [pc, #212]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007318:	430b      	orrs	r3, r1
 800731a:	6553      	str	r3, [r2, #84]	; 0x54
 800731c:	e003      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007322:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007336:	2300      	movs	r3, #0
 8007338:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800733c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007340:	460b      	mov	r3, r1
 8007342:	4313      	orrs	r3, r2
 8007344:	d058      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800734e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007352:	d033      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007354:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007358:	d82c      	bhi.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800735a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735e:	d02f      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007364:	d826      	bhi.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007366:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800736a:	d02b      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800736c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007370:	d820      	bhi.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007376:	d012      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800737c:	d81a      	bhi.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d022      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007386:	d115      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738c:	3308      	adds	r3, #8
 800738e:	2100      	movs	r1, #0
 8007390:	4618      	mov	r0, r3
 8007392:	f001 fd29 	bl	8008de8 <RCCEx_PLL2_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800739c:	e015      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a2:	3328      	adds	r3, #40	; 0x28
 80073a4:	2102      	movs	r1, #2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 fdd0 	bl	8008f4c <RCCEx_PLL3_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073b2:	e00a      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073ba:	e006      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073bc:	bf00      	nop
 80073be:	e004      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073c0:	bf00      	nop
 80073c2:	e002      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073c4:	bf00      	nop
 80073c6:	e000      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10e      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073d2:	4b06      	ldr	r3, [pc, #24]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073e2:	4a02      	ldr	r2, [pc, #8]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073e4:	430b      	orrs	r3, r1
 80073e6:	6593      	str	r3, [r2, #88]	; 0x58
 80073e8:	e006      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80073ea:	bf00      	nop
 80073ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007408:	2300      	movs	r3, #0
 800740a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800740e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007412:	460b      	mov	r3, r1
 8007414:	4313      	orrs	r3, r2
 8007416:	d055      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007420:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007424:	d033      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007426:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800742a:	d82c      	bhi.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800742c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007430:	d02f      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007436:	d826      	bhi.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007438:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800743c:	d02b      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800743e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007442:	d820      	bhi.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007448:	d012      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800744a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800744e:	d81a      	bhi.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d022      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007458:	d115      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745e:	3308      	adds	r3, #8
 8007460:	2100      	movs	r1, #0
 8007462:	4618      	mov	r0, r3
 8007464:	f001 fcc0 	bl	8008de8 <RCCEx_PLL2_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800746e:	e015      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007474:	3328      	adds	r3, #40	; 0x28
 8007476:	2102      	movs	r1, #2
 8007478:	4618      	mov	r0, r3
 800747a:	f001 fd67 	bl	8008f4c <RCCEx_PLL3_Config>
 800747e:	4603      	mov	r3, r0
 8007480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007484:	e00a      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800748c:	e006      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800748e:	bf00      	nop
 8007490:	e004      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007492:	bf00      	nop
 8007494:	e002      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007496:	bf00      	nop
 8007498:	e000      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800749a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800749c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10b      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80074a4:	4ba1      	ldr	r3, [pc, #644]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80074ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074b4:	4a9d      	ldr	r2, [pc, #628]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074b6:	430b      	orrs	r3, r1
 80074b8:	6593      	str	r3, [r2, #88]	; 0x58
 80074ba:	e003      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	f002 0308 	and.w	r3, r2, #8
 80074d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074d4:	2300      	movs	r3, #0
 80074d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80074de:	460b      	mov	r3, r1
 80074e0:	4313      	orrs	r3, r2
 80074e2:	d01e      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f0:	d10c      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f6:	3328      	adds	r3, #40	; 0x28
 80074f8:	2102      	movs	r1, #2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 fd26 	bl	8008f4c <RCCEx_PLL3_Config>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800750c:	4b87      	ldr	r3, [pc, #540]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800750e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007510:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751c:	4a83      	ldr	r2, [pc, #524]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800751e:	430b      	orrs	r3, r1
 8007520:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f002 0310 	and.w	r3, r2, #16
 800752e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007532:	2300      	movs	r3, #0
 8007534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007538:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800753c:	460b      	mov	r3, r1
 800753e:	4313      	orrs	r3, r2
 8007540:	d01e      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800754a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800754e:	d10c      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007554:	3328      	adds	r3, #40	; 0x28
 8007556:	2102      	movs	r1, #2
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fcf7 	bl	8008f4c <RCCEx_PLL3_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800756a:	4b70      	ldr	r3, [pc, #448]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800756c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800757a:	4a6c      	ldr	r2, [pc, #432]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800757c:	430b      	orrs	r3, r1
 800757e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800758c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007590:	2300      	movs	r3, #0
 8007592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007596:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800759a:	460b      	mov	r3, r1
 800759c:	4313      	orrs	r3, r2
 800759e:	d03e      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ac:	d022      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80075ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075b2:	d81b      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80075b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075bc:	d00b      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80075be:	e015      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c4:	3308      	adds	r3, #8
 80075c6:	2100      	movs	r1, #0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fc0d 	bl	8008de8 <RCCEx_PLL2_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80075d4:	e00f      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075da:	3328      	adds	r3, #40	; 0x28
 80075dc:	2102      	movs	r1, #2
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 fcb4 	bl	8008f4c <RCCEx_PLL3_Config>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80075ea:	e004      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075f2:	e000      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80075f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075fe:	4b4b      	ldr	r3, [pc, #300]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007602:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800760a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800760e:	4a47      	ldr	r2, [pc, #284]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007610:	430b      	orrs	r3, r1
 8007612:	6593      	str	r3, [r2, #88]	; 0x58
 8007614:	e003      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800761a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800762a:	67bb      	str	r3, [r7, #120]	; 0x78
 800762c:	2300      	movs	r3, #0
 800762e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007630:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007634:	460b      	mov	r3, r1
 8007636:	4313      	orrs	r3, r2
 8007638:	d03b      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007646:	d01f      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007648:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800764c:	d818      	bhi.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800764e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007652:	d003      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007658:	d007      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800765a:	e011      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800765c:	4b33      	ldr	r3, [pc, #204]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4a32      	ldr	r2, [pc, #200]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007668:	e00f      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766e:	3328      	adds	r3, #40	; 0x28
 8007670:	2101      	movs	r1, #1
 8007672:	4618      	mov	r0, r3
 8007674:	f001 fc6a 	bl	8008f4c <RCCEx_PLL3_Config>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800767e:	e004      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007686:	e000      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800768a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007692:	4b26      	ldr	r3, [pc, #152]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a2:	4a22      	ldr	r2, [pc, #136]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076a4:	430b      	orrs	r3, r1
 80076a6:	6553      	str	r3, [r2, #84]	; 0x54
 80076a8:	e003      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80076be:	673b      	str	r3, [r7, #112]	; 0x70
 80076c0:	2300      	movs	r3, #0
 80076c2:	677b      	str	r3, [r7, #116]	; 0x74
 80076c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80076c8:	460b      	mov	r3, r1
 80076ca:	4313      	orrs	r3, r2
 80076cc:	d034      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80076ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80076d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076dc:	d007      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80076de:	e011      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e0:	4b12      	ldr	r3, [pc, #72]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	4a11      	ldr	r2, [pc, #68]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80076ec:	e00e      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f2:	3308      	adds	r3, #8
 80076f4:	2102      	movs	r1, #2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 fb76 	bl	8008de8 <RCCEx_PLL2_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007702:	e003      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800770a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800770c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10d      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007718:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007722:	4a02      	ldr	r2, [pc, #8]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007724:	430b      	orrs	r3, r1
 8007726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007728:	e006      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007734:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007744:	66bb      	str	r3, [r7, #104]	; 0x68
 8007746:	2300      	movs	r3, #0
 8007748:	66fb      	str	r3, [r7, #108]	; 0x6c
 800774a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800774e:	460b      	mov	r3, r1
 8007750:	4313      	orrs	r3, r2
 8007752:	d00c      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007758:	3328      	adds	r3, #40	; 0x28
 800775a:	2102      	movs	r1, #2
 800775c:	4618      	mov	r0, r3
 800775e:	f001 fbf5 	bl	8008f4c <RCCEx_PLL3_Config>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800777a:	663b      	str	r3, [r7, #96]	; 0x60
 800777c:	2300      	movs	r3, #0
 800777e:	667b      	str	r3, [r7, #100]	; 0x64
 8007780:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007784:	460b      	mov	r3, r1
 8007786:	4313      	orrs	r3, r2
 8007788:	d038      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800778e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007796:	d018      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800779c:	d811      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800779e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a2:	d014      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80077a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a8:	d80b      	bhi.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d011      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80077ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b2:	d106      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b4:	4bc3      	ldr	r3, [pc, #780]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	4ac2      	ldr	r2, [pc, #776]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80077c0:	e008      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077c8:	e004      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80077ca:	bf00      	nop
 80077cc:	e002      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80077d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10b      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077dc:	4bb9      	ldr	r3, [pc, #740]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ec:	4ab5      	ldr	r2, [pc, #724]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077ee:	430b      	orrs	r3, r1
 80077f0:	6553      	str	r3, [r2, #84]	; 0x54
 80077f2:	e003      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007808:	65bb      	str	r3, [r7, #88]	; 0x58
 800780a:	2300      	movs	r3, #0
 800780c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800780e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007812:	460b      	mov	r3, r1
 8007814:	4313      	orrs	r3, r2
 8007816:	d009      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007818:	4baa      	ldr	r3, [pc, #680]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800781a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007826:	4aa7      	ldr	r2, [pc, #668]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007828:	430b      	orrs	r3, r1
 800782a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007838:	653b      	str	r3, [r7, #80]	; 0x50
 800783a:	2300      	movs	r3, #0
 800783c:	657b      	str	r3, [r7, #84]	; 0x54
 800783e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007842:	460b      	mov	r3, r1
 8007844:	4313      	orrs	r3, r2
 8007846:	d00a      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007848:	4b9e      	ldr	r3, [pc, #632]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007854:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007858:	4a9a      	ldr	r2, [pc, #616]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800785a:	430b      	orrs	r3, r1
 800785c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800786a:	64bb      	str	r3, [r7, #72]	; 0x48
 800786c:	2300      	movs	r3, #0
 800786e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007870:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007874:	460b      	mov	r3, r1
 8007876:	4313      	orrs	r3, r2
 8007878:	d009      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800787a:	4b92      	ldr	r3, [pc, #584]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800787c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007888:	4a8e      	ldr	r2, [pc, #568]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800788a:	430b      	orrs	r3, r1
 800788c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800789a:	643b      	str	r3, [r7, #64]	; 0x40
 800789c:	2300      	movs	r3, #0
 800789e:	647b      	str	r3, [r7, #68]	; 0x44
 80078a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80078a4:	460b      	mov	r3, r1
 80078a6:	4313      	orrs	r3, r2
 80078a8:	d00e      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078aa:	4b86      	ldr	r3, [pc, #536]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	4a85      	ldr	r2, [pc, #532]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078b4:	6113      	str	r3, [r2, #16]
 80078b6:	4b83      	ldr	r3, [pc, #524]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078b8:	6919      	ldr	r1, [r3, #16]
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078c2:	4a80      	ldr	r2, [pc, #512]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078c4:	430b      	orrs	r3, r1
 80078c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80078d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80078d6:	2300      	movs	r3, #0
 80078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80078de:	460b      	mov	r3, r1
 80078e0:	4313      	orrs	r3, r2
 80078e2:	d009      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80078e4:	4b77      	ldr	r3, [pc, #476]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	4a74      	ldr	r2, [pc, #464]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f4:	430b      	orrs	r3, r1
 80078f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007904:	633b      	str	r3, [r7, #48]	; 0x30
 8007906:	2300      	movs	r3, #0
 8007908:	637b      	str	r3, [r7, #52]	; 0x34
 800790a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800790e:	460b      	mov	r3, r1
 8007910:	4313      	orrs	r3, r2
 8007912:	d00a      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007914:	4b6b      	ldr	r3, [pc, #428]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007924:	4a67      	ldr	r2, [pc, #412]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007926:	430b      	orrs	r3, r1
 8007928:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	2100      	movs	r1, #0
 8007934:	62b9      	str	r1, [r7, #40]	; 0x28
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800793c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007940:	460b      	mov	r3, r1
 8007942:	4313      	orrs	r3, r2
 8007944:	d011      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794a:	3308      	adds	r3, #8
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fa4a 	bl	8008de8 <RCCEx_PLL2_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800795a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	2100      	movs	r1, #0
 8007974:	6239      	str	r1, [r7, #32]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
 800797c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007980:	460b      	mov	r3, r1
 8007982:	4313      	orrs	r3, r2
 8007984:	d011      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798a:	3308      	adds	r3, #8
 800798c:	2101      	movs	r1, #1
 800798e:	4618      	mov	r0, r3
 8007990:	f001 fa2a 	bl	8008de8 <RCCEx_PLL2_Config>
 8007994:	4603      	mov	r3, r0
 8007996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800799a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	2100      	movs	r1, #0
 80079b4:	61b9      	str	r1, [r7, #24]
 80079b6:	f003 0304 	and.w	r3, r3, #4
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80079c0:	460b      	mov	r3, r1
 80079c2:	4313      	orrs	r3, r2
 80079c4:	d011      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ca:	3308      	adds	r3, #8
 80079cc:	2102      	movs	r1, #2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 fa0a 	bl	8008de8 <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80079da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	2100      	movs	r1, #0
 80079f4:	6139      	str	r1, [r7, #16]
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a00:	460b      	mov	r3, r1
 8007a02:	4313      	orrs	r3, r2
 8007a04:	d011      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0a:	3328      	adds	r3, #40	; 0x28
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 fa9c 	bl	8008f4c <RCCEx_PLL3_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	2100      	movs	r1, #0
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a40:	460b      	mov	r3, r1
 8007a42:	4313      	orrs	r3, r2
 8007a44:	d011      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4a:	3328      	adds	r3, #40	; 0x28
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f001 fa7c 	bl	8008f4c <RCCEx_PLL3_Config>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	2100      	movs	r1, #0
 8007a74:	6039      	str	r1, [r7, #0]
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	607b      	str	r3, [r7, #4]
 8007a7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007a80:	460b      	mov	r3, r1
 8007a82:	4313      	orrs	r3, r2
 8007a84:	d011      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8a:	3328      	adds	r3, #40	; 0x28
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f001 fa5c 	bl	8008f4c <RCCEx_PLL3_Config>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007aaa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e000      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac4:	58024400 	.word	0x58024400

08007ac8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b090      	sub	sp, #64	; 0x40
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007ada:	430b      	orrs	r3, r1
 8007adc:	f040 8094 	bne.w	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007ae0:	4b9e      	ldr	r3, [pc, #632]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2b04      	cmp	r3, #4
 8007aee:	f200 8087 	bhi.w	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b0d 	.word	0x08007b0d
 8007afc:	08007b35 	.word	0x08007b35
 8007b00:	08007b5d 	.word	0x08007b5d
 8007b04:	08007bf9 	.word	0x08007bf9
 8007b08:	08007b85 	.word	0x08007b85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b0c:	4b93      	ldr	r3, [pc, #588]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b18:	d108      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f001 f810 	bl	8008b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b28:	f000 bd45 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b30:	f000 bd41 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b34:	4b89      	ldr	r3, [pc, #548]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b40:	d108      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b42:	f107 0318 	add.w	r3, r7, #24
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fd54 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b50:	f000 bd31 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b58:	f000 bd2d 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b5c:	4b7f      	ldr	r3, [pc, #508]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b68:	d108      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b6a:	f107 030c 	add.w	r3, r7, #12
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fe94 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b78:	f000 bd1d 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b80:	f000 bd19 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b84:	4b75      	ldr	r3, [pc, #468]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b8e:	4b73      	ldr	r3, [pc, #460]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d10c      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d109      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ba0:	4b6e      	ldr	r3, [pc, #440]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	08db      	lsrs	r3, r3, #3
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	4a6d      	ldr	r2, [pc, #436]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007bac:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bb2:	e01f      	b.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bb4:	4b69      	ldr	r3, [pc, #420]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc0:	d106      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bc8:	d102      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007bca:	4b66      	ldr	r3, [pc, #408]	; (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bce:	e011      	b.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bd0:	4b62      	ldr	r3, [pc, #392]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bdc:	d106      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be4:	d102      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007be6:	4b60      	ldr	r3, [pc, #384]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bea:	e003      	b.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007bf0:	f000 bce1 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007bf4:	f000 bcdf 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bf8:	4b5c      	ldr	r3, [pc, #368]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bfc:	f000 bcdb 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c04:	f000 bcd7 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c0c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007c10:	430b      	orrs	r3, r1
 8007c12:	f040 80ad 	bne.w	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007c16:	4b51      	ldr	r3, [pc, #324]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007c1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c26:	d056      	beq.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2e:	f200 8090 	bhi.w	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	2bc0      	cmp	r3, #192	; 0xc0
 8007c36:	f000 8088 	beq.w	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	2bc0      	cmp	r3, #192	; 0xc0
 8007c3e:	f200 8088 	bhi.w	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	2b80      	cmp	r3, #128	; 0x80
 8007c46:	d032      	beq.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	2b80      	cmp	r3, #128	; 0x80
 8007c4c:	f200 8081 	bhi.w	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	2b40      	cmp	r3, #64	; 0x40
 8007c5a:	d014      	beq.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007c5c:	e079      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c5e:	4b3f      	ldr	r3, [pc, #252]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c6a:	d108      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 ff67 	bl	8008b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c7a:	f000 bc9c 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c82:	f000 bc98 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c86:	4b35      	ldr	r3, [pc, #212]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c92:	d108      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c94:	f107 0318 	add.w	r3, r7, #24
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fcab 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ca2:	f000 bc88 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007caa:	f000 bc84 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cae:	4b2b      	ldr	r3, [pc, #172]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cba:	d108      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cbc:	f107 030c 	add.w	r3, r7, #12
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fdeb 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cca:	f000 bc74 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd2:	f000 bc70 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cde:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ce0:	4b1e      	ldr	r3, [pc, #120]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d10c      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d109      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	08db      	lsrs	r3, r3, #3
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	4a18      	ldr	r2, [pc, #96]	; (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d04:	e01f      	b.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d06:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d12:	d106      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d1a:	d102      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d1c:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d20:	e011      	b.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d22:	4b0e      	ldr	r3, [pc, #56]	; (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d2e:	d106      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d36:	d102      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d38:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d3c:	e003      	b.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007d42:	f000 bc38 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d46:	f000 bc36 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d4a:	4b08      	ldr	r3, [pc, #32]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d4e:	f000 bc32 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d56:	f000 bc2e 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d5a:	bf00      	nop
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	03d09000 	.word	0x03d09000
 8007d64:	003d0900 	.word	0x003d0900
 8007d68:	017d7840 	.word	0x017d7840
 8007d6c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d74:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007d78:	430b      	orrs	r3, r1
 8007d7a:	f040 809c 	bne.w	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007d7e:	4b9e      	ldr	r3, [pc, #632]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007d86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d8e:	d054      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d96:	f200 808b 	bhi.w	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007da0:	f000 8083 	beq.w	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007daa:	f200 8081 	bhi.w	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007db4:	d02f      	beq.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dbc:	d878      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dca:	d012      	beq.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007dcc:	e070      	b.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007dce:	4b8a      	ldr	r3, [pc, #552]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dda:	d107      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 feaf 	bl	8008b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dea:	e3e4      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007df0:	e3e1      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007df2:	4b81      	ldr	r3, [pc, #516]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dfe:	d107      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e00:	f107 0318 	add.w	r3, r7, #24
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fbf5 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e0e:	e3d2      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e14:	e3cf      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e16:	4b78      	ldr	r3, [pc, #480]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e22:	d107      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e24:	f107 030c 	add.w	r3, r7, #12
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fd37 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e32:	e3c0      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e38:	e3bd      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e3a:	4b6f      	ldr	r3, [pc, #444]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e44:	4b6c      	ldr	r3, [pc, #432]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d10c      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e56:	4b68      	ldr	r3, [pc, #416]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	08db      	lsrs	r3, r3, #3
 8007e5c:	f003 0303 	and.w	r3, r3, #3
 8007e60:	4a66      	ldr	r2, [pc, #408]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007e62:	fa22 f303 	lsr.w	r3, r2, r3
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e68:	e01e      	b.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e6a:	4b63      	ldr	r3, [pc, #396]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e76:	d106      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e7e:	d102      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e80:	4b5f      	ldr	r3, [pc, #380]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e84:	e010      	b.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e86:	4b5c      	ldr	r3, [pc, #368]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e92:	d106      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9a:	d102      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e9c:	4b59      	ldr	r3, [pc, #356]	; (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ea0:	e002      	b.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ea6:	e386      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ea8:	e385      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007eaa:	4b57      	ldr	r3, [pc, #348]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eae:	e382      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb4:	e37f      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007ebe:	430b      	orrs	r3, r1
 8007ec0:	f040 80a7 	bne.w	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007ec4:	4b4c      	ldr	r3, [pc, #304]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007ecc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ed4:	d055      	beq.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007edc:	f200 8096 	bhi.w	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ee6:	f000 8084 	beq.w	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ef0:	f200 808c 	bhi.w	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007efa:	d030      	beq.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f02:	f200 8083 	bhi.w	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f12:	d012      	beq.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007f14:	e07a      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f16:	4b38      	ldr	r3, [pc, #224]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f22:	d107      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fe0b 	bl	8008b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f32:	e340      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f38:	e33d      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f3a:	4b2f      	ldr	r3, [pc, #188]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f46:	d107      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f48:	f107 0318 	add.w	r3, r7, #24
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 fb51 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f56:	e32e      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f5c:	e32b      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f5e:	4b26      	ldr	r3, [pc, #152]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f6a:	d107      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6c:	f107 030c 	add.w	r3, r7, #12
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fc93 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f7a:	e31c      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f80:	e319      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f82:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d10c      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d109      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f9e:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	08db      	lsrs	r3, r3, #3
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	4a14      	ldr	r2, [pc, #80]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007faa:	fa22 f303 	lsr.w	r3, r2, r3
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb0:	e01e      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fb2:	4b11      	ldr	r3, [pc, #68]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fbe:	d106      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc6:	d102      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fcc:	e010      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fce:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fda:	d106      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe2:	d102      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fe4:	4b07      	ldr	r3, [pc, #28]	; (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe8:	e002      	b.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007fee:	e2e2      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ff0:	e2e1      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ff2:	4b05      	ldr	r3, [pc, #20]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff6:	e2de      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ff8:	58024400 	.word	0x58024400
 8007ffc:	03d09000 	.word	0x03d09000
 8008000:	003d0900 	.word	0x003d0900
 8008004:	017d7840 	.word	0x017d7840
 8008008:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008010:	e2d1      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008016:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800801a:	430b      	orrs	r3, r1
 800801c:	f040 809c 	bne.w	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008020:	4b93      	ldr	r3, [pc, #588]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008024:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008028:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008030:	d054      	beq.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008038:	f200 808b 	bhi.w	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008042:	f000 8083 	beq.w	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800804c:	f200 8081 	bhi.w	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008056:	d02f      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800805e:	d878      	bhi.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	2b00      	cmp	r3, #0
 8008064:	d004      	beq.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800806c:	d012      	beq.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800806e:	e070      	b.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008070:	4b7f      	ldr	r3, [pc, #508]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800807c:	d107      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800807e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fd5e 	bl	8008b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800808c:	e293      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008092:	e290      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008094:	4b76      	ldr	r3, [pc, #472]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800809c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080a0:	d107      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080a2:	f107 0318 	add.w	r3, r7, #24
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 faa4 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080b0:	e281      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080b6:	e27e      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080b8:	4b6d      	ldr	r3, [pc, #436]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080c4:	d107      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080c6:	f107 030c 	add.w	r3, r7, #12
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fbe6 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d4:	e26f      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080da:	e26c      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080dc:	4b64      	ldr	r3, [pc, #400]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080e6:	4b62      	ldr	r3, [pc, #392]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d10c      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80080f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d109      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080f8:	4b5d      	ldr	r3, [pc, #372]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	08db      	lsrs	r3, r3, #3
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	4a5c      	ldr	r2, [pc, #368]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008104:	fa22 f303 	lsr.w	r3, r2, r3
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800810a:	e01e      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800810c:	4b58      	ldr	r3, [pc, #352]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008118:	d106      	bne.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008120:	d102      	bne.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008122:	4b55      	ldr	r3, [pc, #340]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008126:	e010      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008128:	4b51      	ldr	r3, [pc, #324]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008134:	d106      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800813c:	d102      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800813e:	4b4f      	ldr	r3, [pc, #316]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008142:	e002      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008148:	e235      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800814a:	e234      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800814c:	4b4c      	ldr	r3, [pc, #304]	; (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008150:	e231      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008156:	e22e      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008160:	430b      	orrs	r3, r1
 8008162:	f040 808f 	bne.w	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008166:	4b42      	ldr	r3, [pc, #264]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800816a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800816e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008176:	d06b      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800817e:	d874      	bhi.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008186:	d056      	beq.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800818e:	d86c      	bhi.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008196:	d03b      	beq.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800819e:	d864      	bhi.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a6:	d021      	beq.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ae:	d85c      	bhi.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081bc:	d004      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80081be:	e054      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80081c0:	f7fe fa4c 	bl	800665c <HAL_RCC_GetPCLK1Freq>
 80081c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081c6:	e1f6      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081c8:	4b29      	ldr	r3, [pc, #164]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081d4:	d107      	bne.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d6:	f107 0318 	add.w	r3, r7, #24
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fa0a 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081e4:	e1e7      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ea:	e1e4      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081ec:	4b20      	ldr	r3, [pc, #128]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f8:	d107      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fa:	f107 030c 	add.w	r3, r7, #12
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fb4c 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008208:	e1d5      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800820e:	e1d2      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008210:	4b17      	ldr	r3, [pc, #92]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b04      	cmp	r3, #4
 800821a:	d109      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800821c:	4b14      	ldr	r3, [pc, #80]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	08db      	lsrs	r3, r3, #3
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	4a13      	ldr	r2, [pc, #76]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008228:	fa22 f303 	lsr.w	r3, r2, r3
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800822e:	e1c2      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008234:	e1bf      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008236:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008242:	d102      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008244:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008248:	e1b5      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800824e:	e1b2      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008250:	4b07      	ldr	r3, [pc, #28]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800825c:	d102      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008262:	e1a8      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008268:	e1a5      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826e:	e1a2      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008270:	58024400 	.word	0x58024400
 8008274:	03d09000 	.word	0x03d09000
 8008278:	003d0900 	.word	0x003d0900
 800827c:	017d7840 	.word	0x017d7840
 8008280:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008288:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800828c:	430b      	orrs	r3, r1
 800828e:	d173      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008290:	4b9c      	ldr	r3, [pc, #624]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008298:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082a0:	d02f      	beq.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082a8:	d863      	bhi.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b6:	d012      	beq.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80082b8:	e05b      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082ba:	4b92      	ldr	r3, [pc, #584]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082c6:	d107      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c8:	f107 0318 	add.w	r3, r7, #24
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 f991 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d6:	e16e      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082dc:	e16b      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082de:	4b89      	ldr	r3, [pc, #548]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ea:	d107      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ec:	f107 030c 	add.w	r3, r7, #12
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fad3 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082fa:	e15c      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008300:	e159      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008302:	4b80      	ldr	r3, [pc, #512]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800830a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800830c:	4b7d      	ldr	r3, [pc, #500]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b04      	cmp	r3, #4
 8008316:	d10c      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800831e:	4b79      	ldr	r3, [pc, #484]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	08db      	lsrs	r3, r3, #3
 8008324:	f003 0303 	and.w	r3, r3, #3
 8008328:	4a77      	ldr	r2, [pc, #476]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800832a:	fa22 f303 	lsr.w	r3, r2, r3
 800832e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008330:	e01e      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008332:	4b74      	ldr	r3, [pc, #464]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833e:	d106      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008346:	d102      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008348:	4b70      	ldr	r3, [pc, #448]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800834c:	e010      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800834e:	4b6d      	ldr	r3, [pc, #436]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800835a:	d106      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800835c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008362:	d102      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008364:	4b6a      	ldr	r3, [pc, #424]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008368:	e002      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800836e:	e122      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008370:	e121      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008376:	e11e      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800837c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008380:	430b      	orrs	r3, r1
 8008382:	d133      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008384:	4b5f      	ldr	r3, [pc, #380]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800838c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800839a:	d012      	beq.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800839c:	e023      	b.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800839e:	4b59      	ldr	r3, [pc, #356]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083aa:	d107      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fbc7 	bl	8008b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ba:	e0fc      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c0:	e0f9      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083c2:	4b50      	ldr	r3, [pc, #320]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083ce:	d107      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d0:	f107 0318 	add.w	r3, r7, #24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 f90d 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083de:	e0ea      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e4:	e0e7      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ea:	e0e4      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80083ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80083f4:	430b      	orrs	r3, r1
 80083f6:	f040 808d 	bne.w	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80083fa:	4b42      	ldr	r3, [pc, #264]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008402:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800840a:	d06b      	beq.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008412:	d874      	bhi.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841a:	d056      	beq.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008422:	d86c      	bhi.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800842a:	d03b      	beq.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008432:	d864      	bhi.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800843a:	d021      	beq.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008442:	d85c      	bhi.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	2b00      	cmp	r3, #0
 8008448:	d004      	beq.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008450:	d004      	beq.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008452:	e054      	b.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008454:	f000 f8b8 	bl	80085c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008458:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800845a:	e0ac      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800845c:	4b29      	ldr	r3, [pc, #164]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008468:	d107      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800846a:	f107 0318 	add.w	r3, r7, #24
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f8c0 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008478:	e09d      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800847e:	e09a      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008480:	4b20      	ldr	r3, [pc, #128]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800848c:	d107      	bne.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800848e:	f107 030c 	add.w	r3, r7, #12
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fa02 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800849c:	e08b      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a2:	e088      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084a4:	4b17      	ldr	r3, [pc, #92]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d109      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084b0:	4b14      	ldr	r3, [pc, #80]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	08db      	lsrs	r3, r3, #3
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	4a13      	ldr	r2, [pc, #76]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80084bc:	fa22 f303 	lsr.w	r3, r2, r3
 80084c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c2:	e078      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084c8:	e075      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80084ca:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d6:	d102      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80084d8:	4b0c      	ldr	r3, [pc, #48]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084dc:	e06b      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084e2:	e068      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084e4:	4b07      	ldr	r3, [pc, #28]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084f0:	d102      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80084f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f6:	e05e      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084fc:	e05b      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008502:	e058      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008504:	58024400 	.word	0x58024400
 8008508:	03d09000 	.word	0x03d09000
 800850c:	003d0900 	.word	0x003d0900
 8008510:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008518:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800851c:	430b      	orrs	r3, r1
 800851e:	d148      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008520:	4b27      	ldr	r3, [pc, #156]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008524:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008528:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008530:	d02a      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008538:	d838      	bhi.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	2b00      	cmp	r3, #0
 800853e:	d004      	beq.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008546:	d00d      	beq.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008548:	e030      	b.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800854a:	4b1d      	ldr	r3, [pc, #116]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008556:	d102      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008558:	4b1a      	ldr	r3, [pc, #104]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800855c:	e02b      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008562:	e028      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008564:	4b16      	ldr	r3, [pc, #88]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800856c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008570:	d107      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fae4 	bl	8008b44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008580:	e019      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008586:	e016      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008588:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008594:	d107      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008596:	f107 0318 	add.w	r3, r7, #24
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f82a 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a4:	e007      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085aa:	e004      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b0:	e001      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80085b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3740      	adds	r7, #64	; 0x40
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	58024400 	.word	0x58024400
 80085c4:	017d7840 	.word	0x017d7840

080085c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80085cc:	f7fe f816 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 80085d0:	4602      	mov	r2, r0
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	091b      	lsrs	r3, r3, #4
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	4904      	ldr	r1, [pc, #16]	; (80085f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80085de:	5ccb      	ldrb	r3, [r1, r3]
 80085e0:	f003 031f 	and.w	r3, r3, #31
 80085e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	58024400 	.word	0x58024400
 80085f0:	0800ce60 	.word	0x0800ce60

080085f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b089      	sub	sp, #36	; 0x24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085fc:	4ba1      	ldr	r3, [pc, #644]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008600:	f003 0303 	and.w	r3, r3, #3
 8008604:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008606:	4b9f      	ldr	r3, [pc, #636]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860a:	0b1b      	lsrs	r3, r3, #12
 800860c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008610:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008612:	4b9c      	ldr	r3, [pc, #624]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	091b      	lsrs	r3, r3, #4
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800861e:	4b99      	ldr	r3, [pc, #612]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008622:	08db      	lsrs	r3, r3, #3
 8008624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	fb02 f303 	mul.w	r3, r2, r3
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008636:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 8111 	beq.w	8008864 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b02      	cmp	r3, #2
 8008646:	f000 8083 	beq.w	8008750 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b02      	cmp	r3, #2
 800864e:	f200 80a1 	bhi.w	8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d056      	beq.n	800870c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800865e:	e099      	b.n	8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008660:	4b88      	ldr	r3, [pc, #544]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d02d      	beq.n	80086c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800866c:	4b85      	ldr	r3, [pc, #532]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	08db      	lsrs	r3, r3, #3
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	4a84      	ldr	r2, [pc, #528]	; (8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008678:	fa22 f303 	lsr.w	r3, r2, r3
 800867c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	ee07 3a90 	vmov	s15, r3
 8008684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008696:	4b7b      	ldr	r3, [pc, #492]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086c6:	e087      	b.n	80087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80086d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086da:	4b6a      	ldr	r3, [pc, #424]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800870a:	e065      	b.n	80087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800871a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871e:	4b59      	ldr	r3, [pc, #356]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008732:	eddf 5a56 	vldr	s11, [pc, #344]	; 800888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800874e:	e043      	b.n	80087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800875e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008762:	4b48      	ldr	r3, [pc, #288]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008772:	ed97 6a03 	vldr	s12, [r7, #12]
 8008776:	eddf 5a45 	vldr	s11, [pc, #276]	; 800888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008792:	e021      	b.n	80087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a6:	4b37      	ldr	r3, [pc, #220]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800888c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80087d8:	4b2a      	ldr	r3, [pc, #168]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	0a5b      	lsrs	r3, r3, #9
 80087de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80087f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087fe:	ee17 2a90 	vmov	r2, s15
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008806:	4b1f      	ldr	r3, [pc, #124]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	0c1b      	lsrs	r3, r3, #16
 800880c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008810:	ee07 3a90 	vmov	s15, r3
 8008814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800881c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008820:	edd7 6a07 	vldr	s13, [r7, #28]
 8008824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800882c:	ee17 2a90 	vmov	r2, s15
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008834:	4b13      	ldr	r3, [pc, #76]	; (8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	0e1b      	lsrs	r3, r3, #24
 800883a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800884a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800884e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800885a:	ee17 2a90 	vmov	r2, s15
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008862:	e008      	b.n	8008876 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	609a      	str	r2, [r3, #8]
}
 8008876:	bf00      	nop
 8008878:	3724      	adds	r7, #36	; 0x24
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	58024400 	.word	0x58024400
 8008888:	03d09000 	.word	0x03d09000
 800888c:	46000000 	.word	0x46000000
 8008890:	4c742400 	.word	0x4c742400
 8008894:	4a742400 	.word	0x4a742400
 8008898:	4bbebc20 	.word	0x4bbebc20

0800889c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800889c:	b480      	push	{r7}
 800889e:	b089      	sub	sp, #36	; 0x24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088a4:	4ba1      	ldr	r3, [pc, #644]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80088ae:	4b9f      	ldr	r3, [pc, #636]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b2:	0d1b      	lsrs	r3, r3, #20
 80088b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088ba:	4b9c      	ldr	r3, [pc, #624]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	0a1b      	lsrs	r3, r3, #8
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80088c6:	4b99      	ldr	r3, [pc, #612]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ca:	08db      	lsrs	r3, r3, #3
 80088cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	fb02 f303 	mul.w	r3, r2, r3
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8111 	beq.w	8008b0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	f000 8083 	beq.w	80089f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	f200 80a1 	bhi.w	8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d003      	beq.n	8008908 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d056      	beq.n	80089b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008906:	e099      	b.n	8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008908:	4b88      	ldr	r3, [pc, #544]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0320 	and.w	r3, r3, #32
 8008910:	2b00      	cmp	r3, #0
 8008912:	d02d      	beq.n	8008970 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008914:	4b85      	ldr	r3, [pc, #532]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	08db      	lsrs	r3, r3, #3
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	4a84      	ldr	r2, [pc, #528]	; (8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008920:	fa22 f303 	lsr.w	r3, r2, r3
 8008924:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893e:	4b7b      	ldr	r3, [pc, #492]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008952:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800895a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800896e:	e087      	b.n	8008a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	ee07 3a90 	vmov	s15, r3
 8008976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800897e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008982:	4b6a      	ldr	r3, [pc, #424]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008992:	ed97 6a03 	vldr	s12, [r7, #12]
 8008996:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800899a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089b2:	e065      	b.n	8008a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c6:	4b59      	ldr	r3, [pc, #356]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089f6:	e043      	b.n	8008a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	4b48      	ldr	r3, [pc, #288]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a3a:	e021      	b.n	8008a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b37      	ldr	r3, [pc, #220]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008a80:	4b2a      	ldr	r3, [pc, #168]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a84:	0a5b      	lsrs	r3, r3, #9
 8008a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa6:	ee17 2a90 	vmov	r2, s15
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008aae:	4b1f      	ldr	r3, [pc, #124]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab2:	0c1b      	lsrs	r3, r3, #16
 8008ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab8:	ee07 3a90 	vmov	s15, r3
 8008abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ad4:	ee17 2a90 	vmov	r2, s15
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008adc:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae0:	0e1b      	lsrs	r3, r3, #24
 8008ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b02:	ee17 2a90 	vmov	r2, s15
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b0a:	e008      	b.n	8008b1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	609a      	str	r2, [r3, #8]
}
 8008b1e:	bf00      	nop
 8008b20:	3724      	adds	r7, #36	; 0x24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	58024400 	.word	0x58024400
 8008b30:	03d09000 	.word	0x03d09000
 8008b34:	46000000 	.word	0x46000000
 8008b38:	4c742400 	.word	0x4c742400
 8008b3c:	4a742400 	.word	0x4a742400
 8008b40:	4bbebc20 	.word	0x4bbebc20

08008b44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b089      	sub	sp, #36	; 0x24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b4c:	4ba0      	ldr	r3, [pc, #640]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	f003 0303 	and.w	r3, r3, #3
 8008b54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008b56:	4b9e      	ldr	r3, [pc, #632]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5a:	091b      	lsrs	r3, r3, #4
 8008b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008b62:	4b9b      	ldr	r3, [pc, #620]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008b6c:	4b98      	ldr	r3, [pc, #608]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	08db      	lsrs	r3, r3, #3
 8008b72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
 8008b7c:	ee07 3a90 	vmov	s15, r3
 8008b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 8111 	beq.w	8008db2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	f000 8083 	beq.w	8008c9e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	f200 80a1 	bhi.w	8008ce2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d056      	beq.n	8008c5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008bac:	e099      	b.n	8008ce2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bae:	4b88      	ldr	r3, [pc, #544]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0320 	and.w	r3, r3, #32
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d02d      	beq.n	8008c16 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bba:	4b85      	ldr	r3, [pc, #532]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	08db      	lsrs	r3, r3, #3
 8008bc0:	f003 0303 	and.w	r3, r3, #3
 8008bc4:	4a83      	ldr	r2, [pc, #524]	; (8008dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be4:	4b7a      	ldr	r3, [pc, #488]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bec:	ee07 3a90 	vmov	s15, r3
 8008bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bf8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c14:	e087      	b.n	8008d26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	ee07 3a90 	vmov	s15, r3
 8008c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c20:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008ddc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c28:	4b69      	ldr	r3, [pc, #420]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c30:	ee07 3a90 	vmov	s15, r3
 8008c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c38:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c3c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c58:	e065      	b.n	8008d26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	ee07 3a90 	vmov	s15, r3
 8008c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c64:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008de0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c6c:	4b58      	ldr	r3, [pc, #352]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c74:	ee07 3a90 	vmov	s15, r3
 8008c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c80:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c9c:	e043      	b.n	8008d26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	ee07 3a90 	vmov	s15, r3
 8008ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008de4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008cac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb0:	4b47      	ldr	r3, [pc, #284]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb8:	ee07 3a90 	vmov	s15, r3
 8008cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ce0:	e021      	b.n	8008d26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	ee07 3a90 	vmov	s15, r3
 8008ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008ddc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf4:	4b36      	ldr	r3, [pc, #216]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfc:	ee07 3a90 	vmov	s15, r3
 8008d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d04:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d08:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008d26:	4b2a      	ldr	r3, [pc, #168]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2a:	0a5b      	lsrs	r3, r3, #9
 8008d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d4c:	ee17 2a90 	vmov	r2, s15
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008d54:	4b1e      	ldr	r3, [pc, #120]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d58:	0c1b      	lsrs	r3, r3, #16
 8008d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d7a:	ee17 2a90 	vmov	r2, s15
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008d82:	4b13      	ldr	r3, [pc, #76]	; (8008dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	0e1b      	lsrs	r3, r3, #24
 8008d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8c:	ee07 3a90 	vmov	s15, r3
 8008d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008da8:	ee17 2a90 	vmov	r2, s15
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008db0:	e008      	b.n	8008dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	609a      	str	r2, [r3, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	3724      	adds	r7, #36	; 0x24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	58024400 	.word	0x58024400
 8008dd4:	03d09000 	.word	0x03d09000
 8008dd8:	46000000 	.word	0x46000000
 8008ddc:	4c742400 	.word	0x4c742400
 8008de0:	4a742400 	.word	0x4a742400
 8008de4:	4bbebc20 	.word	0x4bbebc20

08008de8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008df6:	4b53      	ldr	r3, [pc, #332]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	f003 0303 	and.w	r3, r3, #3
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d101      	bne.n	8008e06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e099      	b.n	8008f3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e06:	4b4f      	ldr	r3, [pc, #316]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a4e      	ldr	r2, [pc, #312]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008e0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e12:	f7f9 fbf5 	bl	8002600 <HAL_GetTick>
 8008e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e18:	e008      	b.n	8008e2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e1a:	f7f9 fbf1 	bl	8002600 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d901      	bls.n	8008e2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e086      	b.n	8008f3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e2c:	4b45      	ldr	r3, [pc, #276]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1f0      	bne.n	8008e1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e38:	4b42      	ldr	r3, [pc, #264]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	031b      	lsls	r3, r3, #12
 8008e46:	493f      	ldr	r1, [pc, #252]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	628b      	str	r3, [r1, #40]	; 0x28
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	025b      	lsls	r3, r3, #9
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	431a      	orrs	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	041b      	lsls	r3, r3, #16
 8008e6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	061b      	lsls	r3, r3, #24
 8008e78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e7c:	4931      	ldr	r1, [pc, #196]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e82:	4b30      	ldr	r3, [pc, #192]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	492d      	ldr	r1, [pc, #180]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e94:	4b2b      	ldr	r3, [pc, #172]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	f023 0220 	bic.w	r2, r3, #32
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	4928      	ldr	r1, [pc, #160]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ea6:	4b27      	ldr	r3, [pc, #156]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	4a26      	ldr	r2, [pc, #152]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008eac:	f023 0310 	bic.w	r3, r3, #16
 8008eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008eb2:	4b24      	ldr	r3, [pc, #144]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb6:	4b24      	ldr	r3, [pc, #144]	; (8008f48 <RCCEx_PLL2_Config+0x160>)
 8008eb8:	4013      	ands	r3, r2
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	69d2      	ldr	r2, [r2, #28]
 8008ebe:	00d2      	lsls	r2, r2, #3
 8008ec0:	4920      	ldr	r1, [pc, #128]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ec6:	4b1f      	ldr	r3, [pc, #124]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eca:	4a1e      	ldr	r2, [pc, #120]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008ecc:	f043 0310 	orr.w	r3, r3, #16
 8008ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d106      	bne.n	8008ee6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ed8:	4b1a      	ldr	r3, [pc, #104]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ee4:	e00f      	b.n	8008f06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d106      	bne.n	8008efa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008eec:	4b15      	ldr	r3, [pc, #84]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	4a14      	ldr	r2, [pc, #80]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ef8:	e005      	b.n	8008f06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008efa:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efe:	4a11      	ldr	r2, [pc, #68]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a0e      	ldr	r2, [pc, #56]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008f0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f12:	f7f9 fb75 	bl	8002600 <HAL_GetTick>
 8008f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f18:	e008      	b.n	8008f2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f1a:	f7f9 fb71 	bl	8002600 <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d901      	bls.n	8008f2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e006      	b.n	8008f3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f2c:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <RCCEx_PLL2_Config+0x15c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0f0      	beq.n	8008f1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	58024400 	.word	0x58024400
 8008f48:	ffff0007 	.word	0xffff0007

08008f4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f5a:	4b53      	ldr	r3, [pc, #332]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d101      	bne.n	8008f6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e099      	b.n	800909e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f6a:	4b4f      	ldr	r3, [pc, #316]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a4e      	ldr	r2, [pc, #312]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f76:	f7f9 fb43 	bl	8002600 <HAL_GetTick>
 8008f7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f7c:	e008      	b.n	8008f90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f7e:	f7f9 fb3f 	bl	8002600 <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d901      	bls.n	8008f90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e086      	b.n	800909e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f90:	4b45      	ldr	r3, [pc, #276]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1f0      	bne.n	8008f7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f9c:	4b42      	ldr	r3, [pc, #264]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	051b      	lsls	r3, r3, #20
 8008faa:	493f      	ldr	r1, [pc, #252]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	628b      	str	r3, [r1, #40]	; 0x28
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	025b      	lsls	r3, r3, #9
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	041b      	lsls	r3, r3, #16
 8008fce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	061b      	lsls	r3, r3, #24
 8008fdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fe0:	4931      	ldr	r1, [pc, #196]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fe6:	4b30      	ldr	r3, [pc, #192]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	492d      	ldr	r1, [pc, #180]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ff8:	4b2b      	ldr	r3, [pc, #172]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	4928      	ldr	r1, [pc, #160]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009006:	4313      	orrs	r3, r2
 8009008:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800900a:	4b27      	ldr	r3, [pc, #156]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 800900c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900e:	4a26      	ldr	r2, [pc, #152]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009014:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009016:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800901a:	4b24      	ldr	r3, [pc, #144]	; (80090ac <RCCEx_PLL3_Config+0x160>)
 800901c:	4013      	ands	r3, r2
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	69d2      	ldr	r2, [r2, #28]
 8009022:	00d2      	lsls	r2, r2, #3
 8009024:	4920      	ldr	r1, [pc, #128]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009026:	4313      	orrs	r3, r2
 8009028:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800902a:	4b1f      	ldr	r3, [pc, #124]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	4a1e      	ldr	r2, [pc, #120]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009034:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800903c:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	4a19      	ldr	r2, [pc, #100]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009042:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009046:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009048:	e00f      	b.n	800906a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d106      	bne.n	800905e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009050:	4b15      	ldr	r3, [pc, #84]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	4a14      	ldr	r2, [pc, #80]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009056:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800905a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800905c:	e005      	b.n	800906a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800905e:	4b12      	ldr	r3, [pc, #72]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009062:	4a11      	ldr	r2, [pc, #68]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009068:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800906a:	4b0f      	ldr	r3, [pc, #60]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a0e      	ldr	r2, [pc, #56]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009076:	f7f9 fac3 	bl	8002600 <HAL_GetTick>
 800907a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800907c:	e008      	b.n	8009090 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800907e:	f7f9 fabf 	bl	8002600 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2b02      	cmp	r3, #2
 800908a:	d901      	bls.n	8009090 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e006      	b.n	800909e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <RCCEx_PLL3_Config+0x15c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0f0      	beq.n	800907e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800909c:	7bfb      	ldrb	r3, [r7, #15]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	58024400 	.word	0x58024400
 80090ac:	ffff0007 	.word	0xffff0007

080090b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	; 0x28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e28e      	b.n	80095e0 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80090c2:	f7f9 facd 	bl	8002660 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d113      	bne.n	80090f8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a96      	ldr	r2, [pc, #600]	; (8009330 <HAL_SAI_Init+0x280>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d004      	beq.n	80090e4 <HAL_SAI_Init+0x34>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a95      	ldr	r2, [pc, #596]	; (8009334 <HAL_SAI_Init+0x284>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d107      	bne.n	80090f4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d103      	bne.n	80090f4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e273      	b.n	80095e0 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a8c      	ldr	r2, [pc, #560]	; (8009330 <HAL_SAI_Init+0x280>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d004      	beq.n	800910c <HAL_SAI_Init+0x5c>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a8c      	ldr	r2, [pc, #560]	; (8009338 <HAL_SAI_Init+0x288>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d102      	bne.n	8009112 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800910c:	4b8b      	ldr	r3, [pc, #556]	; (800933c <HAL_SAI_Init+0x28c>)
 800910e:	61bb      	str	r3, [r7, #24]
 8009110:	e028      	b.n	8009164 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a8a      	ldr	r2, [pc, #552]	; (8009340 <HAL_SAI_Init+0x290>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d004      	beq.n	8009126 <HAL_SAI_Init+0x76>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a88      	ldr	r2, [pc, #544]	; (8009344 <HAL_SAI_Init+0x294>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d102      	bne.n	800912c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009126:	4b88      	ldr	r3, [pc, #544]	; (8009348 <HAL_SAI_Init+0x298>)
 8009128:	61bb      	str	r3, [r7, #24]
 800912a:	e01b      	b.n	8009164 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a86      	ldr	r2, [pc, #536]	; (800934c <HAL_SAI_Init+0x29c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d004      	beq.n	8009140 <HAL_SAI_Init+0x90>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a85      	ldr	r2, [pc, #532]	; (8009350 <HAL_SAI_Init+0x2a0>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d102      	bne.n	8009146 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009140:	4b84      	ldr	r3, [pc, #528]	; (8009354 <HAL_SAI_Init+0x2a4>)
 8009142:	61bb      	str	r3, [r7, #24]
 8009144:	e00e      	b.n	8009164 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a7a      	ldr	r2, [pc, #488]	; (8009334 <HAL_SAI_Init+0x284>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d004      	beq.n	800915a <HAL_SAI_Init+0xaa>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a80      	ldr	r2, [pc, #512]	; (8009358 <HAL_SAI_Init+0x2a8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d102      	bne.n	8009160 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800915a:	4b80      	ldr	r3, [pc, #512]	; (800935c <HAL_SAI_Init+0x2ac>)
 800915c:	61bb      	str	r3, [r7, #24]
 800915e:	e001      	b.n	8009164 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e23d      	b.n	80095e0 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d106      	bne.n	800917e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7f9 f827 	bl	80021cc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa40 	bl	8009604 <SAI_Disable>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e228      	b.n	80095e0 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2202      	movs	r2, #2
 8009192:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d00c      	beq.n	80091b8 <HAL_SAI_Init+0x108>
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d80d      	bhi.n	80091be <HAL_SAI_Init+0x10e>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HAL_SAI_Init+0xfc>
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d003      	beq.n	80091b2 <HAL_SAI_Init+0x102>
 80091aa:	e008      	b.n	80091be <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80091b0:	e008      	b.n	80091c4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80091b2:	2310      	movs	r3, #16
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80091b6:	e005      	b.n	80091c4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80091b8:	2320      	movs	r3, #32
 80091ba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80091bc:	e002      	b.n	80091c4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80091c2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	2b05      	cmp	r3, #5
 80091ca:	d832      	bhi.n	8009232 <HAL_SAI_Init+0x182>
 80091cc:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <HAL_SAI_Init+0x124>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	080091ed 	.word	0x080091ed
 80091d8:	080091f3 	.word	0x080091f3
 80091dc:	080091fb 	.word	0x080091fb
 80091e0:	08009203 	.word	0x08009203
 80091e4:	08009213 	.word	0x08009213
 80091e8:	08009223 	.word	0x08009223
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61fb      	str	r3, [r7, #28]
      break;
 80091f0:	e022      	b.n	8009238 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80091f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f6:	61fb      	str	r3, [r7, #28]
      break;
 80091f8:	e01e      	b.n	8009238 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80091fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091fe:	61fb      	str	r3, [r7, #28]
      break;
 8009200:	e01a      	b.n	8009238 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009206:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	f043 0301 	orr.w	r3, r3, #1
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009210:	e012      	b.n	8009238 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009212:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009216:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	f043 0302 	orr.w	r3, r3, #2
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009220:	e00a      	b.n	8009238 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009226:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	f043 0303 	orr.w	r3, r3, #3
 800922e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009230:	e002      	b.n	8009238 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	61fb      	str	r3, [r7, #28]
      break;
 8009236:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800923c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 80c5 	beq.w	80093d2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a37      	ldr	r2, [pc, #220]	; (8009330 <HAL_SAI_Init+0x280>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d004      	beq.n	8009260 <HAL_SAI_Init+0x1b0>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a37      	ldr	r2, [pc, #220]	; (8009338 <HAL_SAI_Init+0x288>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d106      	bne.n	800926e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009260:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009264:	f04f 0100 	mov.w	r1, #0
 8009268:	f7fe fc2e 	bl	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 800926c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a33      	ldr	r2, [pc, #204]	; (8009340 <HAL_SAI_Init+0x290>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d004      	beq.n	8009282 <HAL_SAI_Init+0x1d2>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a31      	ldr	r2, [pc, #196]	; (8009344 <HAL_SAI_Init+0x294>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d106      	bne.n	8009290 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009282:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009286:	f04f 0100 	mov.w	r1, #0
 800928a:	f7fe fc1d 	bl	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 800928e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a2d      	ldr	r2, [pc, #180]	; (800934c <HAL_SAI_Init+0x29c>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d004      	beq.n	80092a4 <HAL_SAI_Init+0x1f4>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a2c      	ldr	r2, [pc, #176]	; (8009350 <HAL_SAI_Init+0x2a0>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d106      	bne.n	80092b2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80092a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80092a8:	f04f 0100 	mov.w	r1, #0
 80092ac:	f7fe fc0c 	bl	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 80092b0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a1f      	ldr	r2, [pc, #124]	; (8009334 <HAL_SAI_Init+0x284>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d106      	bne.n	80092ca <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80092bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80092c0:	f04f 0100 	mov.w	r1, #0
 80092c4:	f7fe fc00 	bl	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 80092c8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a22      	ldr	r2, [pc, #136]	; (8009358 <HAL_SAI_Init+0x2a8>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d106      	bne.n	80092e2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80092d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80092d8:	f04f 0100 	mov.w	r1, #0
 80092dc:	f7fe fbf4 	bl	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 80092e0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80092ea:	d139      	bne.n	8009360 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d102      	bne.n	80092fa <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80092f4:	2340      	movs	r3, #64	; 0x40
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	e00a      	b.n	8009310 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fe:	2b08      	cmp	r3, #8
 8009300:	d103      	bne.n	800930a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	e002      	b.n	8009310 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	4619      	mov	r1, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	fb02 f303 	mul.w	r3, r2, r3
 8009326:	fbb1 f3f3 	udiv	r3, r1, r3
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	e030      	b.n	8009390 <HAL_SAI_Init+0x2e0>
 800932e:	bf00      	nop
 8009330:	40015804 	.word	0x40015804
 8009334:	58005404 	.word	0x58005404
 8009338:	40015824 	.word	0x40015824
 800933c:	40015800 	.word	0x40015800
 8009340:	40015c04 	.word	0x40015c04
 8009344:	40015c24 	.word	0x40015c24
 8009348:	40015c00 	.word	0x40015c00
 800934c:	40016004 	.word	0x40016004
 8009350:	40016024 	.word	0x40016024
 8009354:	40016000 	.word	0x40016000
 8009358:	58005424 	.word	0x58005424
 800935c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009368:	d101      	bne.n	800936e <HAL_SAI_Init+0x2be>
 800936a:	2302      	movs	r3, #2
 800936c:	e000      	b.n	8009370 <HAL_SAI_Init+0x2c0>
 800936e:	2301      	movs	r3, #1
 8009370:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	4613      	mov	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	4619      	mov	r1, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	fb02 f303 	mul.w	r3, r2, r3
 8009388:	021b      	lsls	r3, r3, #8
 800938a:	fbb1 f3f3 	udiv	r3, r1, r3
 800938e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	4a95      	ldr	r2, [pc, #596]	; (80095e8 <HAL_SAI_Init+0x538>)
 8009394:	fba2 2303 	umull	r2, r3, r2, r3
 8009398:	08da      	lsrs	r2, r3, #3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800939e:	6939      	ldr	r1, [r7, #16]
 80093a0:	4b91      	ldr	r3, [pc, #580]	; (80095e8 <HAL_SAI_Init+0x538>)
 80093a2:	fba3 2301 	umull	r2, r3, r3, r1
 80093a6:	08da      	lsrs	r2, r3, #3
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	1aca      	subs	r2, r1, r3
 80093b2:	2a08      	cmp	r2, #8
 80093b4:	d904      	bls.n	80093c0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d104      	bne.n	80093d2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	085a      	lsrs	r2, r3, #1
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <HAL_SAI_Init+0x332>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d109      	bne.n	80093f6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d101      	bne.n	80093ee <HAL_SAI_Init+0x33e>
 80093ea:	2300      	movs	r3, #0
 80093ec:	e001      	b.n	80093f2 <HAL_SAI_Init+0x342>
 80093ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093f2:	623b      	str	r3, [r7, #32]
 80093f4:	e008      	b.n	8009408 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d102      	bne.n	8009404 <HAL_SAI_Init+0x354>
 80093fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009402:	e000      	b.n	8009406 <HAL_SAI_Init+0x356>
 8009404:	2300      	movs	r3, #0
 8009406:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009408:	f7f9 f92a 	bl	8002660 <HAL_GetREVID>
 800940c:	4603      	mov	r3, r0
 800940e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009412:	d331      	bcc.n	8009478 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6819      	ldr	r1, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4b73      	ldr	r3, [pc, #460]	; (80095ec <HAL_SAI_Init+0x53c>)
 8009420:	400b      	ands	r3, r1
 8009422:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6819      	ldr	r1, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009432:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009438:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943e:	431a      	orrs	r2, r3
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800944c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009458:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	051b      	lsls	r3, r3, #20
 8009460:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009466:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	e02d      	b.n	80094d4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6819      	ldr	r1, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	4b5b      	ldr	r3, [pc, #364]	; (80095f0 <HAL_SAI_Init+0x540>)
 8009484:	400b      	ands	r3, r1
 8009486:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6819      	ldr	r1, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009496:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800949c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a2:	431a      	orrs	r2, r3
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80094b0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094bc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	051b      	lsls	r3, r3, #20
 80094c4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80094ca:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6859      	ldr	r1, [r3, #4]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b45      	ldr	r3, [pc, #276]	; (80095f4 <HAL_SAI_Init+0x544>)
 80094e0:	400b      	ands	r3, r1
 80094e2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6859      	ldr	r1, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69da      	ldr	r2, [r3, #28]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	431a      	orrs	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	431a      	orrs	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6899      	ldr	r1, [r3, #8]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	4b3a      	ldr	r3, [pc, #232]	; (80095f8 <HAL_SAI_Init+0x548>)
 800950e:	400b      	ands	r3, r1
 8009510:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6899      	ldr	r1, [r3, #8]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009522:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009528:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800952e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009534:	3b01      	subs	r3, #1
 8009536:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009538:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68d9      	ldr	r1, [r3, #12]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009550:	400b      	ands	r3, r1
 8009552:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68d9      	ldr	r1, [r3, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009562:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009568:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800956a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009570:	3b01      	subs	r3, #1
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a1e      	ldr	r2, [pc, #120]	; (80095fc <HAL_SAI_Init+0x54c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d004      	beq.n	8009592 <HAL_SAI_Init+0x4e2>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a1c      	ldr	r2, [pc, #112]	; (8009600 <HAL_SAI_Init+0x550>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d119      	bne.n	80095c6 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009596:	f023 0201 	bic.w	r2, r3, #1
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d10e      	bne.n	80095c6 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b0:	3b01      	subs	r3, #1
 80095b2:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80095b4:	431a      	orrs	r2, r3
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095be:	f043 0201 	orr.w	r2, r3, #1
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3728      	adds	r7, #40	; 0x28
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	cccccccd 	.word	0xcccccccd
 80095ec:	f005c010 	.word	0xf005c010
 80095f0:	f805c010 	.word	0xf805c010
 80095f4:	ffff1ff0 	.word	0xffff1ff0
 80095f8:	fff88000 	.word	0xfff88000
 80095fc:	40015804 	.word	0x40015804
 8009600:	58005404 	.word	0x58005404

08009604 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800960c:	4b18      	ldr	r3, [pc, #96]	; (8009670 <SAI_Disable+0x6c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a18      	ldr	r2, [pc, #96]	; (8009674 <SAI_Disable+0x70>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	0b1b      	lsrs	r3, r3, #12
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800962e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800963c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	72fb      	strb	r3, [r7, #11]
      break;
 800964a:	e009      	b.n	8009660 <SAI_Disable+0x5c>
    }
    count--;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3b01      	subs	r3, #1
 8009650:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e7      	bne.n	8009630 <SAI_Disable+0x2c>

  return status;
 8009660:	7afb      	ldrb	r3, [r7, #11]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	24000000 	.word	0x24000000
 8009674:	95cbec1b 	.word	0x95cbec1b

08009678 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08a      	sub	sp, #40	; 0x28
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e075      	b.n	8009776 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d105      	bne.n	80096a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7f8 f9f9 	bl	8001a94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2204      	movs	r2, #4
 80096a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f868 	bl	8009780 <HAL_SD_InitCard>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e05d      	b.n	8009776 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80096ba:	f107 0308 	add.w	r3, r7, #8
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fa9d 	bl	8009c00 <HAL_SD_GetCardStatus>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e052      	b.n	8009776 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80096d0:	7e3b      	ldrb	r3, [r7, #24]
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80096d6:	7e7b      	ldrb	r3, [r7, #25]
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d10a      	bne.n	80096fa <HAL_SD_Init+0x82>
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d102      	bne.n	80096f0 <HAL_SD_Init+0x78>
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d004      	beq.n	80096fa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096f6:	659a      	str	r2, [r3, #88]	; 0x58
 80096f8:	e00b      	b.n	8009712 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d104      	bne.n	800970c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009708:	659a      	str	r2, [r3, #88]	; 0x58
 800970a:	e002      	b.n	8009712 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fb2f 	bl	8009d7c <HAL_SD_ConfigWideBusOperation>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e026      	b.n	8009776 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009728:	f7f8 ff6a 	bl	8002600 <HAL_GetTick>
 800972c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800972e:	e011      	b.n	8009754 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009730:	f7f8 ff66 	bl	8002600 <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800973e:	d109      	bne.n	8009754 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009746:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e010      	b.n	8009776 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fc23 	bl	8009fa0 <HAL_SD_GetCardState>
 800975a:	4603      	mov	r3, r0
 800975c:	2b04      	cmp	r3, #4
 800975e:	d1e7      	bne.n	8009730 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3728      	adds	r7, #40	; 0x28
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009780:	b590      	push	{r4, r7, lr}
 8009782:	b08d      	sub	sp, #52	; 0x34
 8009784:	af02      	add	r7, sp, #8
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800978c:	2300      	movs	r3, #0
 800978e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009794:	2300      	movs	r3, #0
 8009796:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009798:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800979c:	f04f 0100 	mov.w	r1, #0
 80097a0:	f7fe f992 	bl	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 80097a4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d109      	bne.n	80097c0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80097ba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e070      	b.n	80098a2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	0a1b      	lsrs	r3, r3, #8
 80097c4:	4a39      	ldr	r2, [pc, #228]	; (80098ac <HAL_SD_InitCard+0x12c>)
 80097c6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ca:	091b      	lsrs	r3, r3, #4
 80097cc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681c      	ldr	r4, [r3, #0]
 80097d2:	466a      	mov	r2, sp
 80097d4:	f107 0318 	add.w	r3, r7, #24
 80097d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097dc:	e882 0003 	stmia.w	r2, {r0, r1}
 80097e0:	f107 030c 	add.w	r3, r7, #12
 80097e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097e6:	4620      	mov	r0, r4
 80097e8:	f002 fb0a 	bl	800be00 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f002 fb3c 	bl	800be6e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009802:	fbb2 f3f3 	udiv	r3, r2, r3
 8009806:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	2b00      	cmp	r3, #0
 800980c:	d007      	beq.n	800981e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800980e:	4a28      	ldr	r2, [pc, #160]	; (80098b0 <HAL_SD_InitCard+0x130>)
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	fbb2 f3f3 	udiv	r3, r2, r3
 8009816:	3301      	adds	r3, #1
 8009818:	4618      	mov	r0, r3
 800981a:	f7f8 fefd 	bl	8002618 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fcac 	bl	800a17c <SD_PowerON>
 8009824:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e02e      	b.n	80098a2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fbcb 	bl	8009fe0 <SD_InitCard>
 800984a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	431a      	orrs	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e01b      	b.n	80098a2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009872:	4618      	mov	r0, r3
 8009874:	f002 fb90 	bl	800bf98 <SDMMC_CmdBlockLength>
 8009878:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00f      	beq.n	80098a0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a0b      	ldr	r2, [pc, #44]	; (80098b4 <HAL_SD_InitCard+0x134>)
 8009886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	431a      	orrs	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e000      	b.n	80098a2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	372c      	adds	r7, #44	; 0x2c
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd90      	pop	{r4, r7, pc}
 80098aa:	bf00      	nop
 80098ac:	014f8b59 	.word	0x014f8b59
 80098b0:	00012110 	.word	0x00012110
 80098b4:	1fe00fff 	.word	0x1fe00fff

080098b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098c6:	0f9b      	lsrs	r3, r3, #30
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d2:	0e9b      	lsrs	r3, r3, #26
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 030f 	and.w	r3, r3, #15
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e4:	0e1b      	lsrs	r3, r3, #24
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f6:	0c1b      	lsrs	r3, r3, #16
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009902:	0a1b      	lsrs	r3, r3, #8
 8009904:	b2da      	uxtb	r2, r3
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990e:	b2da      	uxtb	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009918:	0d1b      	lsrs	r3, r3, #20
 800991a:	b29a      	uxth	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009924:	0c1b      	lsrs	r3, r3, #16
 8009926:	b2db      	uxtb	r3, r3
 8009928:	f003 030f 	and.w	r3, r3, #15
 800992c:	b2da      	uxtb	r2, r3
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009936:	0bdb      	lsrs	r3, r3, #15
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	b2da      	uxtb	r2, r3
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009948:	0b9b      	lsrs	r3, r3, #14
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	b2da      	uxtb	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800995a:	0b5b      	lsrs	r3, r3, #13
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	b2da      	uxtb	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800996c:	0b1b      	lsrs	r3, r3, #12
 800996e:	b2db      	uxtb	r3, r3
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	b2da      	uxtb	r2, r3
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2200      	movs	r2, #0
 800997e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009984:	2b00      	cmp	r3, #0
 8009986:	d163      	bne.n	8009a50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800998c:	009a      	lsls	r2, r3, #2
 800998e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009992:	4013      	ands	r3, r2
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009998:	0f92      	lsrs	r2, r2, #30
 800999a:	431a      	orrs	r2, r3
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099a4:	0edb      	lsrs	r3, r3, #27
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b6:	0e1b      	lsrs	r3, r3, #24
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c8:	0d5b      	lsrs	r3, r3, #21
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 0307 	and.w	r3, r3, #7
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099da:	0c9b      	lsrs	r3, r3, #18
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099ec:	0bdb      	lsrs	r3, r3, #15
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 0307 	and.w	r3, r3, #7
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	7e1b      	ldrb	r3, [r3, #24]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	f003 0307 	and.w	r3, r3, #7
 8009a0e:	3302      	adds	r3, #2
 8009a10:	2201      	movs	r2, #1
 8009a12:	fa02 f303 	lsl.w	r3, r2, r3
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009a1a:	fb03 f202 	mul.w	r2, r3, r2
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	7a1b      	ldrb	r3, [r3, #8]
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 030f 	and.w	r3, r3, #15
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	409a      	lsls	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009a3c:	0a52      	lsrs	r2, r2, #9
 8009a3e:	fb03 f202 	mul.w	r2, r3, r2
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a4c:	655a      	str	r2, [r3, #84]	; 0x54
 8009a4e:	e031      	b.n	8009ab4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d11d      	bne.n	8009a94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a5c:	041b      	lsls	r3, r3, #16
 8009a5e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a66:	0c1b      	lsrs	r3, r3, #16
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	3301      	adds	r3, #1
 8009a74:	029a      	lsls	r2, r3, #10
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a88:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	655a      	str	r2, [r3, #84]	; 0x54
 8009a92:	e00f      	b.n	8009ab4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a58      	ldr	r2, [pc, #352]	; (8009bfc <HAL_SD_GetCardCSD+0x344>)
 8009a9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e09d      	b.n	8009bf0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ab8:	0b9b      	lsrs	r3, r3, #14
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009aca:	09db      	lsrs	r3, r3, #7
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aec:	0fdb      	lsrs	r3, r3, #31
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009af8:	0f5b      	lsrs	r3, r3, #29
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	f003 0303 	and.w	r3, r3, #3
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b0a:	0e9b      	lsrs	r3, r3, #26
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b1c:	0d9b      	lsrs	r3, r3, #22
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	f003 030f 	and.w	r3, r3, #15
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b2e:	0d5b      	lsrs	r3, r3, #21
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b4a:	0c1b      	lsrs	r3, r3, #16
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b5e:	0bdb      	lsrs	r3, r3, #15
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b72:	0b9b      	lsrs	r3, r3, #14
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b86:	0b5b      	lsrs	r3, r3, #13
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b9a:	0b1b      	lsrs	r3, r3, #12
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bae:	0a9b      	lsrs	r3, r3, #10
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	f003 0303 	and.w	r3, r3, #3
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bc2:	0a1b      	lsrs	r3, r3, #8
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bd6:	085b      	lsrs	r3, r3, #1
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	1fe00fff 	.word	0x1fe00fff

08009c00 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b094      	sub	sp, #80	; 0x50
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d101      	bne.n	8009c20 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e0a7      	b.n	8009d70 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009c20:	f107 0308 	add.w	r3, r7, #8
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fb36 	bl	800a298 <SD_SendSDStatus>
 8009c2c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d011      	beq.n	8009c58 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a4f      	ldr	r2, [pc, #316]	; (8009d78 <HAL_SD_GetCardStatus+0x178>)
 8009c3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c42:	431a      	orrs	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009c56:	e070      	b.n	8009d3a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	099b      	lsrs	r3, r3, #6
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	0e1b      	lsrs	r3, r3, #24
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	061a      	lsls	r2, r3, #24
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	021b      	lsls	r3, r3, #8
 8009c9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c9e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	0a1b      	lsrs	r3, r3, #8
 8009ca4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009ca8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	0e1b      	lsrs	r3, r3, #24
 8009cae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	0a1b      	lsrs	r3, r3, #8
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	0d1b      	lsrs	r3, r3, #20
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	0c1b      	lsrs	r3, r3, #16
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	4313      	orrs	r3, r2
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	0a9b      	lsrs	r3, r3, #10
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	0a1b      	lsrs	r3, r3, #8
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	091b      	lsrs	r3, r3, #4
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 030f 	and.w	r3, r3, #15
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	f003 030f 	and.w	r3, r3, #15
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	0e1b      	lsrs	r3, r3, #24
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d42:	4618      	mov	r0, r3
 8009d44:	f002 f928 	bl	800bf98 <SDMMC_CmdBlockLength>
 8009d48:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00d      	beq.n	8009d6c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a08      	ldr	r2, [pc, #32]	; (8009d78 <HAL_SD_GetCardStatus+0x178>)
 8009d56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d5c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8009d6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3750      	adds	r7, #80	; 0x50
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	1fe00fff 	.word	0x1fe00fff

08009d7c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009d7c:	b590      	push	{r4, r7, lr}
 8009d7e:	b08d      	sub	sp, #52	; 0x34
 8009d80:	af02      	add	r7, sp, #8
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2203      	movs	r2, #3
 8009d90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d02e      	beq.n	8009dfa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da2:	d106      	bne.n	8009db2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	635a      	str	r2, [r3, #52]	; 0x34
 8009db0:	e029      	b.n	8009e06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009db8:	d10a      	bne.n	8009dd0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fb64 	bl	800a488 <SD_WideBus_Enable>
 8009dc0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8009dce:	e01a      	b.n	8009e06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10a      	bne.n	8009dec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fba1 	bl	800a51e <SD_WideBus_Disable>
 8009ddc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	431a      	orrs	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	635a      	str	r2, [r3, #52]	; 0x34
 8009dea:	e00c      	b.n	8009e06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	635a      	str	r2, [r3, #52]	; 0x34
 8009df8:	e005      	b.n	8009e06 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d007      	beq.n	8009e1e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a5f      	ldr	r2, [pc, #380]	; (8009f90 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009e14:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e1c:	e096      	b.n	8009f4c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009e1e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009e22:	f04f 0100 	mov.w	r1, #0
 8009e26:	f7fd fe4f 	bl	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e2a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 8083 	beq.w	8009f3a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695a      	ldr	r2, [r3, #20]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4950      	ldr	r1, [pc, #320]	; (8009f94 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009e52:	fba1 1303 	umull	r1, r3, r1, r3
 8009e56:	0e1b      	lsrs	r3, r3, #24
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d303      	bcc.n	8009e64 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	61bb      	str	r3, [r7, #24]
 8009e62:	e05a      	b.n	8009f1a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e6c:	d103      	bne.n	8009e76 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	61bb      	str	r3, [r7, #24]
 8009e74:	e051      	b.n	8009f1a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e7e:	d126      	bne.n	8009ece <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10e      	bne.n	8009ea6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	4a43      	ldr	r2, [pc, #268]	; (8009f98 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d906      	bls.n	8009e9e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	4a40      	ldr	r2, [pc, #256]	; (8009f94 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009e94:	fba2 2303 	umull	r2, r3, r2, r3
 8009e98:	0e5b      	lsrs	r3, r3, #25
 8009e9a:	61bb      	str	r3, [r7, #24]
 8009e9c:	e03d      	b.n	8009f1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	61bb      	str	r3, [r7, #24]
 8009ea4:	e039      	b.n	8009f1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	69fa      	ldr	r2, [r7, #28]
 8009eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb2:	4a39      	ldr	r2, [pc, #228]	; (8009f98 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d906      	bls.n	8009ec6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	4a36      	ldr	r2, [pc, #216]	; (8009f94 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec0:	0e5b      	lsrs	r3, r3, #25
 8009ec2:	61bb      	str	r3, [r7, #24]
 8009ec4:	e029      	b.n	8009f1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	61bb      	str	r3, [r7, #24]
 8009ecc:	e025      	b.n	8009f1a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10e      	bne.n	8009ef4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	4a30      	ldr	r2, [pc, #192]	; (8009f9c <HAL_SD_ConfigWideBusOperation+0x220>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d906      	bls.n	8009eec <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4a2c      	ldr	r2, [pc, #176]	; (8009f94 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	0e1b      	lsrs	r3, r3, #24
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	e016      	b.n	8009f1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	e012      	b.n	8009f1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	69fa      	ldr	r2, [r7, #28]
 8009efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f00:	4a26      	ldr	r2, [pc, #152]	; (8009f9c <HAL_SD_ConfigWideBusOperation+0x220>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d906      	bls.n	8009f14 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	4a22      	ldr	r2, [pc, #136]	; (8009f94 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0e:	0e1b      	lsrs	r3, r3, #24
 8009f10:	61bb      	str	r3, [r7, #24]
 8009f12:	e002      	b.n	8009f1a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681c      	ldr	r4, [r3, #0]
 8009f1e:	466a      	mov	r2, sp
 8009f20:	f107 0314 	add.w	r3, r7, #20
 8009f24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f28:	e882 0003 	stmia.w	r2, {r0, r1}
 8009f2c:	f107 0308 	add.w	r3, r7, #8
 8009f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f32:	4620      	mov	r0, r4
 8009f34:	f001 ff64 	bl	800be00 <SDMMC_Init>
 8009f38:	e008      	b.n	8009f4c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f54:	4618      	mov	r0, r3
 8009f56:	f002 f81f 	bl	800bf98 <SDMMC_CmdBlockLength>
 8009f5a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00c      	beq.n	8009f7c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a0a      	ldr	r2, [pc, #40]	; (8009f90 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	431a      	orrs	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	372c      	adds	r7, #44	; 0x2c
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd90      	pop	{r4, r7, pc}
 8009f90:	1fe00fff 	.word	0x1fe00fff
 8009f94:	55e63b89 	.word	0x55e63b89
 8009f98:	02faf080 	.word	0x02faf080
 8009f9c:	017d7840 	.word	0x017d7840

08009fa0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009fac:	f107 030c 	add.w	r3, r7, #12
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fa40 	bl	800a438 <SD_SendStatus>
 8009fb8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	0a5b      	lsrs	r3, r3, #9
 8009fd0:	f003 030f 	and.w	r3, r3, #15
 8009fd4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009fd6:	693b      	ldr	r3, [r7, #16]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b090      	sub	sp, #64	; 0x40
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009fec:	f7f8 fb08 	bl	8002600 <HAL_GetTick>
 8009ff0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 ff4a 	bl	800be90 <SDMMC_GetPowerState>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a002:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a006:	e0b5      	b.n	800a174 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d02e      	beq.n	800a06e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4618      	mov	r0, r3
 800a016:	f002 f8cb 	bl	800c1b0 <SDMMC_CmdSendCID>
 800a01a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <SD_InitCard+0x46>
    {
      return errorstate;
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	e0a6      	b.n	800a174 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2100      	movs	r1, #0
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 ff74 	bl	800bf1a <SDMMC_GetResponse>
 800a032:	4602      	mov	r2, r0
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2104      	movs	r1, #4
 800a03e:	4618      	mov	r0, r3
 800a040:	f001 ff6b 	bl	800bf1a <SDMMC_GetResponse>
 800a044:	4602      	mov	r2, r0
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2108      	movs	r1, #8
 800a050:	4618      	mov	r0, r3
 800a052:	f001 ff62 	bl	800bf1a <SDMMC_GetResponse>
 800a056:	4602      	mov	r2, r0
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	210c      	movs	r1, #12
 800a062:	4618      	mov	r0, r3
 800a064:	f001 ff59 	bl	800bf1a <SDMMC_GetResponse>
 800a068:	4602      	mov	r2, r0
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a072:	2b03      	cmp	r3, #3
 800a074:	d01d      	beq.n	800a0b2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a076:	e019      	b.n	800a0ac <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f107 020a 	add.w	r2, r7, #10
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f002 f8d3 	bl	800c22e <SDMMC_CmdSetRelAdd>
 800a088:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <SD_InitCard+0xb4>
      {
        return errorstate;
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	e06f      	b.n	800a174 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a094:	f7f8 fab4 	bl	8002600 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	f241 3287 	movw	r2, #4999	; 0x1387
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d902      	bls.n	800a0ac <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a0a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0aa:	e063      	b.n	800a174 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a0ac:	897b      	ldrh	r3, [r7, #10]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0e2      	beq.n	800a078 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d036      	beq.n	800a128 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a0ba:	897b      	ldrh	r3, [r7, #10]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ca:	041b      	lsls	r3, r3, #16
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f002 f88d 	bl	800c1ee <SDMMC_CmdSendCSD>
 800a0d4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <SD_InitCard+0x100>
    {
      return errorstate;
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	e049      	b.n	800a174 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 ff17 	bl	800bf1a <SDMMC_GetResponse>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2104      	movs	r1, #4
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 ff0e 	bl	800bf1a <SDMMC_GetResponse>
 800a0fe:	4602      	mov	r2, r0
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2108      	movs	r1, #8
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 ff05 	bl	800bf1a <SDMMC_GetResponse>
 800a110:	4602      	mov	r2, r0
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	210c      	movs	r1, #12
 800a11c:	4618      	mov	r0, r3
 800a11e:	f001 fefc 	bl	800bf1a <SDMMC_GetResponse>
 800a122:	4602      	mov	r2, r0
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2104      	movs	r1, #4
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 fef3 	bl	800bf1a <SDMMC_GetResponse>
 800a134:	4603      	mov	r3, r0
 800a136:	0d1a      	lsrs	r2, r3, #20
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a13c:	f107 030c 	add.w	r3, r7, #12
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff fbb8 	bl	80098b8 <HAL_SD_GetCardCSD>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a14e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a152:	e00f      	b.n	800a174 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15c:	041b      	lsls	r3, r3, #16
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f001 ff3c 	bl	800bfde <SDMMC_CmdSelDesel>
 800a166:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <SD_InitCard+0x192>
  {
    return errorstate;
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	e000      	b.n	800a174 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3740      	adds	r7, #64	; 0x40
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4618      	mov	r0, r3
 800a196:	f001 ff45 	bl	800c024 <SDMMC_CmdGoIdleState>
 800a19a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	e072      	b.n	800a28c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f001 ff58 	bl	800c060 <SDMMC_CmdOperCond>
 800a1b0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1b8:	d10d      	bne.n	800a1d6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f001 ff2d 	bl	800c024 <SDMMC_CmdGoIdleState>
 800a1ca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d004      	beq.n	800a1dc <SD_PowerON+0x60>
    {
      return errorstate;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	e05a      	b.n	800a28c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d137      	bne.n	800a254 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f001 ff58 	bl	800c0a0 <SDMMC_CmdAppCommand>
 800a1f0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d02d      	beq.n	800a254 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a1fc:	e046      	b.n	800a28c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2100      	movs	r1, #0
 800a204:	4618      	mov	r0, r3
 800a206:	f001 ff4b 	bl	800c0a0 <SDMMC_CmdAppCommand>
 800a20a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <SD_PowerON+0x9a>
    {
      return errorstate;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	e03a      	b.n	800a28c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	491e      	ldr	r1, [pc, #120]	; (800a294 <SD_PowerON+0x118>)
 800a21c:	4618      	mov	r0, r3
 800a21e:	f001 ff62 	bl	800c0e6 <SDMMC_CmdAppOperCommand>
 800a222:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a22a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a22e:	e02d      	b.n	800a28c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2100      	movs	r1, #0
 800a236:	4618      	mov	r0, r3
 800a238:	f001 fe6f 	bl	800bf1a <SDMMC_GetResponse>
 800a23c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	0fdb      	lsrs	r3, r3, #31
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <SD_PowerON+0xce>
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <SD_PowerON+0xd0>
 800a24a:	2300      	movs	r3, #0
 800a24c:	613b      	str	r3, [r7, #16]

    count++;
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	3301      	adds	r3, #1
 800a252:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d802      	bhi.n	800a264 <SD_PowerON+0xe8>
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d0cc      	beq.n	800a1fe <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d902      	bls.n	800a274 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a26e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a272:	e00b      	b.n	800a28c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	c1100000 	.word	0xc1100000

0800a298 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08c      	sub	sp, #48	; 0x30
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a2a2:	f7f8 f9ad 	bl	8002600 <HAL_GetTick>
 800a2a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f001 fe31 	bl	800bf1a <SDMMC_GetResponse>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2c2:	d102      	bne.n	800a2ca <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a2c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2c8:	e0b0      	b.n	800a42c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2140      	movs	r1, #64	; 0x40
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f001 fe61 	bl	800bf98 <SDMMC_CmdBlockLength>
 800a2d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d005      	beq.n	800a2ea <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	e0a0      	b.n	800a42c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f2:	041b      	lsls	r3, r3, #16
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	f001 fed2 	bl	800c0a0 <SDMMC_CmdAppCommand>
 800a2fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d005      	beq.n	800a310 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	e08d      	b.n	800a42c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a314:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a316:	2340      	movs	r3, #64	; 0x40
 800a318:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a31a:	2360      	movs	r3, #96	; 0x60
 800a31c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a31e:	2302      	movs	r3, #2
 800a320:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a322:	2300      	movs	r3, #0
 800a324:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a326:	2301      	movs	r3, #1
 800a328:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f107 0208 	add.w	r2, r7, #8
 800a332:	4611      	mov	r1, r2
 800a334:	4618      	mov	r0, r3
 800a336:	f001 fe03 	bl	800bf40 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f001 ffba 	bl	800c2b8 <SDMMC_CmdStatusRegister>
 800a344:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d02b      	beq.n	800a3a4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	e069      	b.n	800a42c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a35e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d013      	beq.n	800a38e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a366:	2300      	movs	r3, #0
 800a368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a36a:	e00d      	b.n	800a388 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4618      	mov	r0, r3
 800a372:	f001 fd6f 	bl	800be54 <SDMMC_ReadFIFO>
 800a376:	4602      	mov	r2, r0
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	601a      	str	r2, [r3, #0]
        pData++;
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	3304      	adds	r3, #4
 800a380:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800a382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a384:	3301      	adds	r3, #1
 800a386:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	2b07      	cmp	r3, #7
 800a38c:	d9ee      	bls.n	800a36c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a38e:	f7f8 f937 	bl	8002600 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a39c:	d102      	bne.n	800a3a4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a39e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3a2:	e043      	b.n	800a42c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3aa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0d2      	beq.n	800a358 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d001      	beq.n	800a3c4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a3c0:	2308      	movs	r3, #8
 800a3c2:	e033      	b.n	800a42c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e02a      	b.n	800a42c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3dc:	f003 0320 	and.w	r3, r3, #32
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d017      	beq.n	800a414 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	e021      	b.n	800a42c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 fd31 	bl	800be54 <SDMMC_ReadFIFO>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	601a      	str	r2, [r3, #0]
    pData++;
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a3fe:	f7f8 f8ff 	bl	8002600 <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a40c:	d102      	bne.n	800a414 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a40e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a412:	e00b      	b.n	800a42c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1e2      	bne.n	800a3e8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a03      	ldr	r2, [pc, #12]	; (800a434 <SD_SendSDStatus+0x19c>)
 800a428:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3730      	adds	r7, #48	; 0x30
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	18000f3a 	.word	0x18000f3a

0800a438 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d102      	bne.n	800a44e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a448:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a44c:	e018      	b.n	800a480 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a456:	041b      	lsls	r3, r3, #16
 800a458:	4619      	mov	r1, r3
 800a45a:	4610      	mov	r0, r2
 800a45c:	f001 ff09 	bl	800c272 <SDMMC_CmdSendStatus>
 800a460:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	e009      	b.n	800a480 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2100      	movs	r1, #0
 800a472:	4618      	mov	r0, r3
 800a474:	f001 fd51 	bl	800bf1a <SDMMC_GetResponse>
 800a478:	4602      	mov	r2, r0
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	2300      	movs	r3, #0
 800a496:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2100      	movs	r1, #0
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f001 fd3b 	bl	800bf1a <SDMMC_GetResponse>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4ae:	d102      	bne.n	800a4b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a4b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4b4:	e02f      	b.n	800a516 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a4b6:	f107 030c 	add.w	r3, r7, #12
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f879 	bl	800a5b4 <SD_FindSCR>
 800a4c2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	e023      	b.n	800a516 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01c      	beq.n	800a512 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e0:	041b      	lsls	r3, r3, #16
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	f001 fddb 	bl	800c0a0 <SDMMC_CmdAppCommand>
 800a4ea:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	e00f      	b.n	800a516 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2102      	movs	r1, #2
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f001 fe12 	bl	800c126 <SDMMC_CmdBusWidth>
 800a502:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	e003      	b.n	800a516 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a50e:	2300      	movs	r3, #0
 800a510:	e001      	b.n	800a516 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a512:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b086      	sub	sp, #24
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a526:	2300      	movs	r3, #0
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	2300      	movs	r3, #0
 800a52c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2100      	movs	r1, #0
 800a534:	4618      	mov	r0, r3
 800a536:	f001 fcf0 	bl	800bf1a <SDMMC_GetResponse>
 800a53a:	4603      	mov	r3, r0
 800a53c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a544:	d102      	bne.n	800a54c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a546:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a54a:	e02f      	b.n	800a5ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a54c:	f107 030c 	add.w	r3, r7, #12
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f82e 	bl	800a5b4 <SD_FindSCR>
 800a558:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	e023      	b.n	800a5ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d01c      	beq.n	800a5a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a576:	041b      	lsls	r3, r3, #16
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f001 fd90 	bl	800c0a0 <SDMMC_CmdAppCommand>
 800a580:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	e00f      	b.n	800a5ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2100      	movs	r1, #0
 800a592:	4618      	mov	r0, r3
 800a594:	f001 fdc7 	bl	800c126 <SDMMC_CmdBusWidth>
 800a598:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	e003      	b.n	800a5ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	e001      	b.n	800a5ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a5a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3718      	adds	r7, #24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08e      	sub	sp, #56	; 0x38
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a5be:	f7f8 f81f 	bl	8002600 <HAL_GetTick>
 800a5c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60bb      	str	r3, [r7, #8]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2108      	movs	r1, #8
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f001 fcdc 	bl	800bf98 <SDMMC_CmdBlockLength>
 800a5e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <SD_FindSCR+0x38>
  {
    return errorstate;
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	e0ad      	b.n	800a748 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f4:	041b      	lsls	r3, r3, #16
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	f001 fd51 	bl	800c0a0 <SDMMC_CmdAppCommand>
 800a5fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	e09e      	b.n	800a748 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a60a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a60e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a610:	2308      	movs	r3, #8
 800a612:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a614:	2330      	movs	r3, #48	; 0x30
 800a616:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a618:	2302      	movs	r3, #2
 800a61a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a620:	2301      	movs	r3, #1
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f107 0210 	add.w	r2, r7, #16
 800a62c:	4611      	mov	r1, r2
 800a62e:	4618      	mov	r0, r3
 800a630:	f001 fc86 	bl	800bf40 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4618      	mov	r0, r3
 800a63a:	f001 fd97 	bl	800c16c <SDMMC_CmdSendSCR>
 800a63e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	2b00      	cmp	r3, #0
 800a644:	d027      	beq.n	800a696 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	e07e      	b.n	800a748 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d113      	bne.n	800a680 <SD_FindSCR+0xcc>
 800a658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d110      	bne.n	800a680 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4618      	mov	r0, r3
 800a664:	f001 fbf6 	bl	800be54 <SDMMC_ReadFIFO>
 800a668:	4603      	mov	r3, r0
 800a66a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4618      	mov	r0, r3
 800a672:	f001 fbef 	bl	800be54 <SDMMC_ReadFIFO>
 800a676:	4603      	mov	r3, r0
 800a678:	60fb      	str	r3, [r7, #12]
      index++;
 800a67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67c:	3301      	adds	r3, #1
 800a67e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a680:	f7f7 ffbe 	bl	8002600 <HAL_GetTick>
 800a684:	4602      	mov	r2, r0
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a68e:	d102      	bne.n	800a696 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a694:	e058      	b.n	800a748 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a69c:	f240 532a 	movw	r3, #1322	; 0x52a
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0d1      	beq.n	800a64a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ac:	f003 0308 	and.w	r3, r3, #8
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d005      	beq.n	800a6c0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2208      	movs	r2, #8
 800a6ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a6bc:	2308      	movs	r3, #8
 800a6be:	e043      	b.n	800a748 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c6:	f003 0302 	and.w	r3, r3, #2
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	e036      	b.n	800a748 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d005      	beq.n	800a6f4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a6f0:	2320      	movs	r3, #32
 800a6f2:	e029      	b.n	800a748 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a15      	ldr	r2, [pc, #84]	; (800a750 <SD_FindSCR+0x19c>)
 800a6fa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	061a      	lsls	r2, r3, #24
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a708:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	0a1b      	lsrs	r3, r3, #8
 800a70e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a712:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	0e1b      	lsrs	r3, r3, #24
 800a718:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	601a      	str	r2, [r3, #0]
    scr++;
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	3304      	adds	r3, #4
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	061a      	lsls	r2, r3, #24
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	021b      	lsls	r3, r3, #8
 800a72c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a730:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	0a1b      	lsrs	r3, r3, #8
 800a736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a73a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	0e1b      	lsrs	r3, r3, #24
 800a740:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a744:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3738      	adds	r7, #56	; 0x38
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	18000f3a 	.word	0x18000f3a

0800a754 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e02b      	b.n	800a7c0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b00      	cmp	r3, #0
 800a772:	d106      	bne.n	800a782 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7f7 fd1b 	bl	80021b8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2202      	movs	r2, #2
 800a786:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3304      	adds	r3, #4
 800a792:	4619      	mov	r1, r3
 800a794:	4610      	mov	r0, r2
 800a796:	f001 fa6d 	bl	800bc74 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	f001 fac1 	bl	800bd2c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a7aa:	4b07      	ldr	r3, [pc, #28]	; (800a7c8 <HAL_SDRAM_Init+0x74>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a06      	ldr	r2, [pc, #24]	; (800a7c8 <HAL_SDRAM_Init+0x74>)
 800a7b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7b4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	52004000 	.word	0x52004000

0800a7cc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e03e      	b.n	800a860 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d106      	bne.n	800a7fc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7f7 fcd4 	bl	80021a4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	3308      	adds	r3, #8
 800a804:	4619      	mov	r1, r3
 800a806:	4610      	mov	r0, r2
 800a808:	f001 f906 	bl	800ba18 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6818      	ldr	r0, [r3, #0]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	461a      	mov	r2, r3
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	f001 f98e 	bl	800bb38 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6858      	ldr	r0, [r3, #4]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	6879      	ldr	r1, [r7, #4]
 800a82a:	f001 f9d5 	bl	800bbd8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	6892      	ldr	r2, [r2, #8]
 800a836:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	6892      	ldr	r2, [r2, #8]
 800a842:	f041 0101 	orr.w	r1, r1, #1
 800a846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <HAL_SRAM_Init+0x9c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a06      	ldr	r2, [pc, #24]	; (800a868 <HAL_SRAM_Init+0x9c>)
 800a850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a854:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	52004000 	.word	0x52004000

0800a86c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e042      	b.n	800a904 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a884:	2b00      	cmp	r3, #0
 800a886:	d106      	bne.n	800a896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7f7 f9cb 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2224      	movs	r2, #36	; 0x24
 800a89a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0201 	bic.w	r2, r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f82c 	bl	800a90c <UART_SetConfig>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d101      	bne.n	800a8be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e022      	b.n	800a904 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fd88 	bl	800b3dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689a      	ldr	r2, [r3, #8]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0201 	orr.w	r2, r2, #1
 800a8fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fe0f 	bl	800b520 <UART_CheckIdleState>
 800a902:	4603      	mov	r3, r0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a90c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a910:	b092      	sub	sp, #72	; 0x48
 800a912:	af00      	add	r7, sp, #0
 800a914:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	431a      	orrs	r2, r3
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	69db      	ldr	r3, [r3, #28]
 800a930:	4313      	orrs	r3, r2
 800a932:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	4bbe      	ldr	r3, [pc, #760]	; (800ac34 <UART_SetConfig+0x328>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	6812      	ldr	r2, [r2, #0]
 800a942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a944:	430b      	orrs	r3, r1
 800a946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	430a      	orrs	r2, r1
 800a95c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4ab3      	ldr	r2, [pc, #716]	; (800ac38 <UART_SetConfig+0x32c>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d004      	beq.n	800a978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a974:	4313      	orrs	r3, r2
 800a976:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689a      	ldr	r2, [r3, #8]
 800a97e:	4baf      	ldr	r3, [pc, #700]	; (800ac3c <UART_SetConfig+0x330>)
 800a980:	4013      	ands	r3, r2
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	6812      	ldr	r2, [r2, #0]
 800a986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a988:	430b      	orrs	r3, r1
 800a98a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a992:	f023 010f 	bic.w	r1, r3, #15
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4aa6      	ldr	r2, [pc, #664]	; (800ac40 <UART_SetConfig+0x334>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d177      	bne.n	800aa9c <UART_SetConfig+0x190>
 800a9ac:	4ba5      	ldr	r3, [pc, #660]	; (800ac44 <UART_SetConfig+0x338>)
 800a9ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9b4:	2b28      	cmp	r3, #40	; 0x28
 800a9b6:	d86d      	bhi.n	800aa94 <UART_SetConfig+0x188>
 800a9b8:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <UART_SetConfig+0xb4>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800aa65 	.word	0x0800aa65
 800a9c4:	0800aa95 	.word	0x0800aa95
 800a9c8:	0800aa95 	.word	0x0800aa95
 800a9cc:	0800aa95 	.word	0x0800aa95
 800a9d0:	0800aa95 	.word	0x0800aa95
 800a9d4:	0800aa95 	.word	0x0800aa95
 800a9d8:	0800aa95 	.word	0x0800aa95
 800a9dc:	0800aa95 	.word	0x0800aa95
 800a9e0:	0800aa6d 	.word	0x0800aa6d
 800a9e4:	0800aa95 	.word	0x0800aa95
 800a9e8:	0800aa95 	.word	0x0800aa95
 800a9ec:	0800aa95 	.word	0x0800aa95
 800a9f0:	0800aa95 	.word	0x0800aa95
 800a9f4:	0800aa95 	.word	0x0800aa95
 800a9f8:	0800aa95 	.word	0x0800aa95
 800a9fc:	0800aa95 	.word	0x0800aa95
 800aa00:	0800aa75 	.word	0x0800aa75
 800aa04:	0800aa95 	.word	0x0800aa95
 800aa08:	0800aa95 	.word	0x0800aa95
 800aa0c:	0800aa95 	.word	0x0800aa95
 800aa10:	0800aa95 	.word	0x0800aa95
 800aa14:	0800aa95 	.word	0x0800aa95
 800aa18:	0800aa95 	.word	0x0800aa95
 800aa1c:	0800aa95 	.word	0x0800aa95
 800aa20:	0800aa7d 	.word	0x0800aa7d
 800aa24:	0800aa95 	.word	0x0800aa95
 800aa28:	0800aa95 	.word	0x0800aa95
 800aa2c:	0800aa95 	.word	0x0800aa95
 800aa30:	0800aa95 	.word	0x0800aa95
 800aa34:	0800aa95 	.word	0x0800aa95
 800aa38:	0800aa95 	.word	0x0800aa95
 800aa3c:	0800aa95 	.word	0x0800aa95
 800aa40:	0800aa85 	.word	0x0800aa85
 800aa44:	0800aa95 	.word	0x0800aa95
 800aa48:	0800aa95 	.word	0x0800aa95
 800aa4c:	0800aa95 	.word	0x0800aa95
 800aa50:	0800aa95 	.word	0x0800aa95
 800aa54:	0800aa95 	.word	0x0800aa95
 800aa58:	0800aa95 	.word	0x0800aa95
 800aa5c:	0800aa95 	.word	0x0800aa95
 800aa60:	0800aa8d 	.word	0x0800aa8d
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6a:	e222      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aa6c:	2304      	movs	r3, #4
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa72:	e21e      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aa74:	2308      	movs	r3, #8
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7a:	e21a      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aa7c:	2310      	movs	r3, #16
 800aa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa82:	e216      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aa84:	2320      	movs	r3, #32
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8a:	e212      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aa8c:	2340      	movs	r3, #64	; 0x40
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa92:	e20e      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aa94:	2380      	movs	r3, #128	; 0x80
 800aa96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9a:	e20a      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a69      	ldr	r2, [pc, #420]	; (800ac48 <UART_SetConfig+0x33c>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d130      	bne.n	800ab08 <UART_SetConfig+0x1fc>
 800aaa6:	4b67      	ldr	r3, [pc, #412]	; (800ac44 <UART_SetConfig+0x338>)
 800aaa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaaa:	f003 0307 	and.w	r3, r3, #7
 800aaae:	2b05      	cmp	r3, #5
 800aab0:	d826      	bhi.n	800ab00 <UART_SetConfig+0x1f4>
 800aab2:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <UART_SetConfig+0x1ac>)
 800aab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab8:	0800aad1 	.word	0x0800aad1
 800aabc:	0800aad9 	.word	0x0800aad9
 800aac0:	0800aae1 	.word	0x0800aae1
 800aac4:	0800aae9 	.word	0x0800aae9
 800aac8:	0800aaf1 	.word	0x0800aaf1
 800aacc:	0800aaf9 	.word	0x0800aaf9
 800aad0:	2300      	movs	r3, #0
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad6:	e1ec      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aad8:	2304      	movs	r3, #4
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aade:	e1e8      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aae0:	2308      	movs	r3, #8
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae6:	e1e4      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aae8:	2310      	movs	r3, #16
 800aaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaee:	e1e0      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aaf0:	2320      	movs	r3, #32
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaf6:	e1dc      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aaf8:	2340      	movs	r3, #64	; 0x40
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafe:	e1d8      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ab00:	2380      	movs	r3, #128	; 0x80
 800ab02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab06:	e1d4      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a4f      	ldr	r2, [pc, #316]	; (800ac4c <UART_SetConfig+0x340>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d130      	bne.n	800ab74 <UART_SetConfig+0x268>
 800ab12:	4b4c      	ldr	r3, [pc, #304]	; (800ac44 <UART_SetConfig+0x338>)
 800ab14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab16:	f003 0307 	and.w	r3, r3, #7
 800ab1a:	2b05      	cmp	r3, #5
 800ab1c:	d826      	bhi.n	800ab6c <UART_SetConfig+0x260>
 800ab1e:	a201      	add	r2, pc, #4	; (adr r2, 800ab24 <UART_SetConfig+0x218>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab3d 	.word	0x0800ab3d
 800ab28:	0800ab45 	.word	0x0800ab45
 800ab2c:	0800ab4d 	.word	0x0800ab4d
 800ab30:	0800ab55 	.word	0x0800ab55
 800ab34:	0800ab5d 	.word	0x0800ab5d
 800ab38:	0800ab65 	.word	0x0800ab65
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab42:	e1b6      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ab44:	2304      	movs	r3, #4
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4a:	e1b2      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ab4c:	2308      	movs	r3, #8
 800ab4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab52:	e1ae      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ab54:	2310      	movs	r3, #16
 800ab56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab5a:	e1aa      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ab5c:	2320      	movs	r3, #32
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab62:	e1a6      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ab64:	2340      	movs	r3, #64	; 0x40
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab6a:	e1a2      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ab6c:	2380      	movs	r3, #128	; 0x80
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab72:	e19e      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a35      	ldr	r2, [pc, #212]	; (800ac50 <UART_SetConfig+0x344>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d130      	bne.n	800abe0 <UART_SetConfig+0x2d4>
 800ab7e:	4b31      	ldr	r3, [pc, #196]	; (800ac44 <UART_SetConfig+0x338>)
 800ab80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	2b05      	cmp	r3, #5
 800ab88:	d826      	bhi.n	800abd8 <UART_SetConfig+0x2cc>
 800ab8a:	a201      	add	r2, pc, #4	; (adr r2, 800ab90 <UART_SetConfig+0x284>)
 800ab8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab90:	0800aba9 	.word	0x0800aba9
 800ab94:	0800abb1 	.word	0x0800abb1
 800ab98:	0800abb9 	.word	0x0800abb9
 800ab9c:	0800abc1 	.word	0x0800abc1
 800aba0:	0800abc9 	.word	0x0800abc9
 800aba4:	0800abd1 	.word	0x0800abd1
 800aba8:	2300      	movs	r3, #0
 800abaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abae:	e180      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800abb0:	2304      	movs	r3, #4
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abb6:	e17c      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800abb8:	2308      	movs	r3, #8
 800abba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abbe:	e178      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800abc0:	2310      	movs	r3, #16
 800abc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abc6:	e174      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800abc8:	2320      	movs	r3, #32
 800abca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abce:	e170      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800abd0:	2340      	movs	r3, #64	; 0x40
 800abd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abd6:	e16c      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800abd8:	2380      	movs	r3, #128	; 0x80
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abde:	e168      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a1b      	ldr	r2, [pc, #108]	; (800ac54 <UART_SetConfig+0x348>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d142      	bne.n	800ac70 <UART_SetConfig+0x364>
 800abea:	4b16      	ldr	r3, [pc, #88]	; (800ac44 <UART_SetConfig+0x338>)
 800abec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abee:	f003 0307 	and.w	r3, r3, #7
 800abf2:	2b05      	cmp	r3, #5
 800abf4:	d838      	bhi.n	800ac68 <UART_SetConfig+0x35c>
 800abf6:	a201      	add	r2, pc, #4	; (adr r2, 800abfc <UART_SetConfig+0x2f0>)
 800abf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfc:	0800ac15 	.word	0x0800ac15
 800ac00:	0800ac1d 	.word	0x0800ac1d
 800ac04:	0800ac25 	.word	0x0800ac25
 800ac08:	0800ac2d 	.word	0x0800ac2d
 800ac0c:	0800ac59 	.word	0x0800ac59
 800ac10:	0800ac61 	.word	0x0800ac61
 800ac14:	2300      	movs	r3, #0
 800ac16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac1a:	e14a      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac22:	e146      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ac24:	2308      	movs	r3, #8
 800ac26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac2a:	e142      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ac2c:	2310      	movs	r3, #16
 800ac2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac32:	e13e      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ac34:	cfff69f3 	.word	0xcfff69f3
 800ac38:	58000c00 	.word	0x58000c00
 800ac3c:	11fff4ff 	.word	0x11fff4ff
 800ac40:	40011000 	.word	0x40011000
 800ac44:	58024400 	.word	0x58024400
 800ac48:	40004400 	.word	0x40004400
 800ac4c:	40004800 	.word	0x40004800
 800ac50:	40004c00 	.word	0x40004c00
 800ac54:	40005000 	.word	0x40005000
 800ac58:	2320      	movs	r3, #32
 800ac5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac5e:	e128      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ac60:	2340      	movs	r3, #64	; 0x40
 800ac62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac66:	e124      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ac68:	2380      	movs	r3, #128	; 0x80
 800ac6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac6e:	e120      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4acb      	ldr	r2, [pc, #812]	; (800afa4 <UART_SetConfig+0x698>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d176      	bne.n	800ad68 <UART_SetConfig+0x45c>
 800ac7a:	4bcb      	ldr	r3, [pc, #812]	; (800afa8 <UART_SetConfig+0x69c>)
 800ac7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac82:	2b28      	cmp	r3, #40	; 0x28
 800ac84:	d86c      	bhi.n	800ad60 <UART_SetConfig+0x454>
 800ac86:	a201      	add	r2, pc, #4	; (adr r2, 800ac8c <UART_SetConfig+0x380>)
 800ac88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8c:	0800ad31 	.word	0x0800ad31
 800ac90:	0800ad61 	.word	0x0800ad61
 800ac94:	0800ad61 	.word	0x0800ad61
 800ac98:	0800ad61 	.word	0x0800ad61
 800ac9c:	0800ad61 	.word	0x0800ad61
 800aca0:	0800ad61 	.word	0x0800ad61
 800aca4:	0800ad61 	.word	0x0800ad61
 800aca8:	0800ad61 	.word	0x0800ad61
 800acac:	0800ad39 	.word	0x0800ad39
 800acb0:	0800ad61 	.word	0x0800ad61
 800acb4:	0800ad61 	.word	0x0800ad61
 800acb8:	0800ad61 	.word	0x0800ad61
 800acbc:	0800ad61 	.word	0x0800ad61
 800acc0:	0800ad61 	.word	0x0800ad61
 800acc4:	0800ad61 	.word	0x0800ad61
 800acc8:	0800ad61 	.word	0x0800ad61
 800accc:	0800ad41 	.word	0x0800ad41
 800acd0:	0800ad61 	.word	0x0800ad61
 800acd4:	0800ad61 	.word	0x0800ad61
 800acd8:	0800ad61 	.word	0x0800ad61
 800acdc:	0800ad61 	.word	0x0800ad61
 800ace0:	0800ad61 	.word	0x0800ad61
 800ace4:	0800ad61 	.word	0x0800ad61
 800ace8:	0800ad61 	.word	0x0800ad61
 800acec:	0800ad49 	.word	0x0800ad49
 800acf0:	0800ad61 	.word	0x0800ad61
 800acf4:	0800ad61 	.word	0x0800ad61
 800acf8:	0800ad61 	.word	0x0800ad61
 800acfc:	0800ad61 	.word	0x0800ad61
 800ad00:	0800ad61 	.word	0x0800ad61
 800ad04:	0800ad61 	.word	0x0800ad61
 800ad08:	0800ad61 	.word	0x0800ad61
 800ad0c:	0800ad51 	.word	0x0800ad51
 800ad10:	0800ad61 	.word	0x0800ad61
 800ad14:	0800ad61 	.word	0x0800ad61
 800ad18:	0800ad61 	.word	0x0800ad61
 800ad1c:	0800ad61 	.word	0x0800ad61
 800ad20:	0800ad61 	.word	0x0800ad61
 800ad24:	0800ad61 	.word	0x0800ad61
 800ad28:	0800ad61 	.word	0x0800ad61
 800ad2c:	0800ad59 	.word	0x0800ad59
 800ad30:	2301      	movs	r3, #1
 800ad32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad36:	e0bc      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ad38:	2304      	movs	r3, #4
 800ad3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad3e:	e0b8      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ad40:	2308      	movs	r3, #8
 800ad42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad46:	e0b4      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ad48:	2310      	movs	r3, #16
 800ad4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad4e:	e0b0      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ad50:	2320      	movs	r3, #32
 800ad52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad56:	e0ac      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ad58:	2340      	movs	r3, #64	; 0x40
 800ad5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad5e:	e0a8      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ad60:	2380      	movs	r3, #128	; 0x80
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad66:	e0a4      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a8f      	ldr	r2, [pc, #572]	; (800afac <UART_SetConfig+0x6a0>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d130      	bne.n	800add4 <UART_SetConfig+0x4c8>
 800ad72:	4b8d      	ldr	r3, [pc, #564]	; (800afa8 <UART_SetConfig+0x69c>)
 800ad74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad76:	f003 0307 	and.w	r3, r3, #7
 800ad7a:	2b05      	cmp	r3, #5
 800ad7c:	d826      	bhi.n	800adcc <UART_SetConfig+0x4c0>
 800ad7e:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <UART_SetConfig+0x478>)
 800ad80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad84:	0800ad9d 	.word	0x0800ad9d
 800ad88:	0800ada5 	.word	0x0800ada5
 800ad8c:	0800adad 	.word	0x0800adad
 800ad90:	0800adb5 	.word	0x0800adb5
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adc5 	.word	0x0800adc5
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ada2:	e086      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ada4:	2304      	movs	r3, #4
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adaa:	e082      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800adac:	2308      	movs	r3, #8
 800adae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adb2:	e07e      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800adb4:	2310      	movs	r3, #16
 800adb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adba:	e07a      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800adbc:	2320      	movs	r3, #32
 800adbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adc2:	e076      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800adc4:	2340      	movs	r3, #64	; 0x40
 800adc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adca:	e072      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800adcc:	2380      	movs	r3, #128	; 0x80
 800adce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800add2:	e06e      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a75      	ldr	r2, [pc, #468]	; (800afb0 <UART_SetConfig+0x6a4>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d130      	bne.n	800ae40 <UART_SetConfig+0x534>
 800adde:	4b72      	ldr	r3, [pc, #456]	; (800afa8 <UART_SetConfig+0x69c>)
 800ade0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	2b05      	cmp	r3, #5
 800ade8:	d826      	bhi.n	800ae38 <UART_SetConfig+0x52c>
 800adea:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <UART_SetConfig+0x4e4>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae09 	.word	0x0800ae09
 800adf4:	0800ae11 	.word	0x0800ae11
 800adf8:	0800ae19 	.word	0x0800ae19
 800adfc:	0800ae21 	.word	0x0800ae21
 800ae00:	0800ae29 	.word	0x0800ae29
 800ae04:	0800ae31 	.word	0x0800ae31
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae0e:	e050      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae10:	2304      	movs	r3, #4
 800ae12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae16:	e04c      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae18:	2308      	movs	r3, #8
 800ae1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae1e:	e048      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae20:	2310      	movs	r3, #16
 800ae22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae26:	e044      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae28:	2320      	movs	r3, #32
 800ae2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae2e:	e040      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae30:	2340      	movs	r3, #64	; 0x40
 800ae32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae36:	e03c      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae38:	2380      	movs	r3, #128	; 0x80
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae3e:	e038      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a5b      	ldr	r2, [pc, #364]	; (800afb4 <UART_SetConfig+0x6a8>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d130      	bne.n	800aeac <UART_SetConfig+0x5a0>
 800ae4a:	4b57      	ldr	r3, [pc, #348]	; (800afa8 <UART_SetConfig+0x69c>)
 800ae4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4e:	f003 0307 	and.w	r3, r3, #7
 800ae52:	2b05      	cmp	r3, #5
 800ae54:	d826      	bhi.n	800aea4 <UART_SetConfig+0x598>
 800ae56:	a201      	add	r2, pc, #4	; (adr r2, 800ae5c <UART_SetConfig+0x550>)
 800ae58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5c:	0800ae75 	.word	0x0800ae75
 800ae60:	0800ae7d 	.word	0x0800ae7d
 800ae64:	0800ae85 	.word	0x0800ae85
 800ae68:	0800ae8d 	.word	0x0800ae8d
 800ae6c:	0800ae95 	.word	0x0800ae95
 800ae70:	0800ae9d 	.word	0x0800ae9d
 800ae74:	2302      	movs	r3, #2
 800ae76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae7a:	e01a      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae7c:	2304      	movs	r3, #4
 800ae7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae82:	e016      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae84:	2308      	movs	r3, #8
 800ae86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae8a:	e012      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae8c:	2310      	movs	r3, #16
 800ae8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae92:	e00e      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae94:	2320      	movs	r3, #32
 800ae96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae9a:	e00a      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800ae9c:	2340      	movs	r3, #64	; 0x40
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aea2:	e006      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aea4:	2380      	movs	r3, #128	; 0x80
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeaa:	e002      	b.n	800aeb2 <UART_SetConfig+0x5a6>
 800aeac:	2380      	movs	r3, #128	; 0x80
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a3f      	ldr	r2, [pc, #252]	; (800afb4 <UART_SetConfig+0x6a8>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	f040 80f8 	bne.w	800b0ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aebe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aec2:	2b20      	cmp	r3, #32
 800aec4:	dc46      	bgt.n	800af54 <UART_SetConfig+0x648>
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	f2c0 8082 	blt.w	800afd0 <UART_SetConfig+0x6c4>
 800aecc:	3b02      	subs	r3, #2
 800aece:	2b1e      	cmp	r3, #30
 800aed0:	d87e      	bhi.n	800afd0 <UART_SetConfig+0x6c4>
 800aed2:	a201      	add	r2, pc, #4	; (adr r2, 800aed8 <UART_SetConfig+0x5cc>)
 800aed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed8:	0800af5b 	.word	0x0800af5b
 800aedc:	0800afd1 	.word	0x0800afd1
 800aee0:	0800af63 	.word	0x0800af63
 800aee4:	0800afd1 	.word	0x0800afd1
 800aee8:	0800afd1 	.word	0x0800afd1
 800aeec:	0800afd1 	.word	0x0800afd1
 800aef0:	0800af73 	.word	0x0800af73
 800aef4:	0800afd1 	.word	0x0800afd1
 800aef8:	0800afd1 	.word	0x0800afd1
 800aefc:	0800afd1 	.word	0x0800afd1
 800af00:	0800afd1 	.word	0x0800afd1
 800af04:	0800afd1 	.word	0x0800afd1
 800af08:	0800afd1 	.word	0x0800afd1
 800af0c:	0800afd1 	.word	0x0800afd1
 800af10:	0800af83 	.word	0x0800af83
 800af14:	0800afd1 	.word	0x0800afd1
 800af18:	0800afd1 	.word	0x0800afd1
 800af1c:	0800afd1 	.word	0x0800afd1
 800af20:	0800afd1 	.word	0x0800afd1
 800af24:	0800afd1 	.word	0x0800afd1
 800af28:	0800afd1 	.word	0x0800afd1
 800af2c:	0800afd1 	.word	0x0800afd1
 800af30:	0800afd1 	.word	0x0800afd1
 800af34:	0800afd1 	.word	0x0800afd1
 800af38:	0800afd1 	.word	0x0800afd1
 800af3c:	0800afd1 	.word	0x0800afd1
 800af40:	0800afd1 	.word	0x0800afd1
 800af44:	0800afd1 	.word	0x0800afd1
 800af48:	0800afd1 	.word	0x0800afd1
 800af4c:	0800afd1 	.word	0x0800afd1
 800af50:	0800afc3 	.word	0x0800afc3
 800af54:	2b40      	cmp	r3, #64	; 0x40
 800af56:	d037      	beq.n	800afc8 <UART_SetConfig+0x6bc>
 800af58:	e03a      	b.n	800afd0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800af5a:	f7fd fb35 	bl	80085c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800af5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af60:	e03c      	b.n	800afdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af66:	4618      	mov	r0, r3
 800af68:	f7fd fb44 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af70:	e034      	b.n	800afdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af72:	f107 0318 	add.w	r3, r7, #24
 800af76:	4618      	mov	r0, r3
 800af78:	f7fd fc90 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af80:	e02c      	b.n	800afdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af82:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <UART_SetConfig+0x69c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 0320 	and.w	r3, r3, #32
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d016      	beq.n	800afbc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af8e:	4b06      	ldr	r3, [pc, #24]	; (800afa8 <UART_SetConfig+0x69c>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	08db      	lsrs	r3, r3, #3
 800af94:	f003 0303 	and.w	r3, r3, #3
 800af98:	4a07      	ldr	r2, [pc, #28]	; (800afb8 <UART_SetConfig+0x6ac>)
 800af9a:	fa22 f303 	lsr.w	r3, r2, r3
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afa0:	e01c      	b.n	800afdc <UART_SetConfig+0x6d0>
 800afa2:	bf00      	nop
 800afa4:	40011400 	.word	0x40011400
 800afa8:	58024400 	.word	0x58024400
 800afac:	40007800 	.word	0x40007800
 800afb0:	40007c00 	.word	0x40007c00
 800afb4:	58000c00 	.word	0x58000c00
 800afb8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800afbc:	4b9d      	ldr	r3, [pc, #628]	; (800b234 <UART_SetConfig+0x928>)
 800afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afc0:	e00c      	b.n	800afdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afc2:	4b9d      	ldr	r3, [pc, #628]	; (800b238 <UART_SetConfig+0x92c>)
 800afc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afc6:	e009      	b.n	800afdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afce:	e005      	b.n	800afdc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800afda:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 81de 	beq.w	800b3a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe8:	4a94      	ldr	r2, [pc, #592]	; (800b23c <UART_SetConfig+0x930>)
 800afea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afee:	461a      	mov	r2, r3
 800aff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aff6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	4613      	mov	r3, r2
 800affe:	005b      	lsls	r3, r3, #1
 800b000:	4413      	add	r3, r2
 800b002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b004:	429a      	cmp	r2, r3
 800b006:	d305      	bcc.n	800b014 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b00e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b010:	429a      	cmp	r2, r3
 800b012:	d903      	bls.n	800b01c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b01a:	e1c1      	b.n	800b3a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01e:	2200      	movs	r2, #0
 800b020:	60bb      	str	r3, [r7, #8]
 800b022:	60fa      	str	r2, [r7, #12]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b028:	4a84      	ldr	r2, [pc, #528]	; (800b23c <UART_SetConfig+0x930>)
 800b02a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b02e:	b29b      	uxth	r3, r3
 800b030:	2200      	movs	r2, #0
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	607a      	str	r2, [r7, #4]
 800b036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b03a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b03e:	f7f5 f94b 	bl	80002d8 <__aeabi_uldivmod>
 800b042:	4602      	mov	r2, r0
 800b044:	460b      	mov	r3, r1
 800b046:	4610      	mov	r0, r2
 800b048:	4619      	mov	r1, r3
 800b04a:	f04f 0200 	mov.w	r2, #0
 800b04e:	f04f 0300 	mov.w	r3, #0
 800b052:	020b      	lsls	r3, r1, #8
 800b054:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b058:	0202      	lsls	r2, r0, #8
 800b05a:	6979      	ldr	r1, [r7, #20]
 800b05c:	6849      	ldr	r1, [r1, #4]
 800b05e:	0849      	lsrs	r1, r1, #1
 800b060:	2000      	movs	r0, #0
 800b062:	460c      	mov	r4, r1
 800b064:	4605      	mov	r5, r0
 800b066:	eb12 0804 	adds.w	r8, r2, r4
 800b06a:	eb43 0905 	adc.w	r9, r3, r5
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	469a      	mov	sl, r3
 800b076:	4693      	mov	fp, r2
 800b078:	4652      	mov	r2, sl
 800b07a:	465b      	mov	r3, fp
 800b07c:	4640      	mov	r0, r8
 800b07e:	4649      	mov	r1, r9
 800b080:	f7f5 f92a 	bl	80002d8 <__aeabi_uldivmod>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4613      	mov	r3, r2
 800b08a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b092:	d308      	bcc.n	800b0a6 <UART_SetConfig+0x79a>
 800b094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b09a:	d204      	bcs.n	800b0a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0a2:	60da      	str	r2, [r3, #12]
 800b0a4:	e17c      	b.n	800b3a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b0ac:	e178      	b.n	800b3a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	69db      	ldr	r3, [r3, #28]
 800b0b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0b6:	f040 80c5 	bne.w	800b244 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b0ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b0be:	2b20      	cmp	r3, #32
 800b0c0:	dc48      	bgt.n	800b154 <UART_SetConfig+0x848>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	db7b      	blt.n	800b1be <UART_SetConfig+0x8b2>
 800b0c6:	2b20      	cmp	r3, #32
 800b0c8:	d879      	bhi.n	800b1be <UART_SetConfig+0x8b2>
 800b0ca:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <UART_SetConfig+0x7c4>)
 800b0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d0:	0800b15b 	.word	0x0800b15b
 800b0d4:	0800b163 	.word	0x0800b163
 800b0d8:	0800b1bf 	.word	0x0800b1bf
 800b0dc:	0800b1bf 	.word	0x0800b1bf
 800b0e0:	0800b16b 	.word	0x0800b16b
 800b0e4:	0800b1bf 	.word	0x0800b1bf
 800b0e8:	0800b1bf 	.word	0x0800b1bf
 800b0ec:	0800b1bf 	.word	0x0800b1bf
 800b0f0:	0800b17b 	.word	0x0800b17b
 800b0f4:	0800b1bf 	.word	0x0800b1bf
 800b0f8:	0800b1bf 	.word	0x0800b1bf
 800b0fc:	0800b1bf 	.word	0x0800b1bf
 800b100:	0800b1bf 	.word	0x0800b1bf
 800b104:	0800b1bf 	.word	0x0800b1bf
 800b108:	0800b1bf 	.word	0x0800b1bf
 800b10c:	0800b1bf 	.word	0x0800b1bf
 800b110:	0800b18b 	.word	0x0800b18b
 800b114:	0800b1bf 	.word	0x0800b1bf
 800b118:	0800b1bf 	.word	0x0800b1bf
 800b11c:	0800b1bf 	.word	0x0800b1bf
 800b120:	0800b1bf 	.word	0x0800b1bf
 800b124:	0800b1bf 	.word	0x0800b1bf
 800b128:	0800b1bf 	.word	0x0800b1bf
 800b12c:	0800b1bf 	.word	0x0800b1bf
 800b130:	0800b1bf 	.word	0x0800b1bf
 800b134:	0800b1bf 	.word	0x0800b1bf
 800b138:	0800b1bf 	.word	0x0800b1bf
 800b13c:	0800b1bf 	.word	0x0800b1bf
 800b140:	0800b1bf 	.word	0x0800b1bf
 800b144:	0800b1bf 	.word	0x0800b1bf
 800b148:	0800b1bf 	.word	0x0800b1bf
 800b14c:	0800b1bf 	.word	0x0800b1bf
 800b150:	0800b1b1 	.word	0x0800b1b1
 800b154:	2b40      	cmp	r3, #64	; 0x40
 800b156:	d02e      	beq.n	800b1b6 <UART_SetConfig+0x8aa>
 800b158:	e031      	b.n	800b1be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b15a:	f7fb fa7f 	bl	800665c <HAL_RCC_GetPCLK1Freq>
 800b15e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b160:	e033      	b.n	800b1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b162:	f7fb fa91 	bl	8006688 <HAL_RCC_GetPCLK2Freq>
 800b166:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b168:	e02f      	b.n	800b1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b16a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fd fa40 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b178:	e027      	b.n	800b1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b17a:	f107 0318 	add.w	r3, r7, #24
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fd fb8c 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b188:	e01f      	b.n	800b1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b18a:	4b2d      	ldr	r3, [pc, #180]	; (800b240 <UART_SetConfig+0x934>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b00      	cmp	r3, #0
 800b194:	d009      	beq.n	800b1aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b196:	4b2a      	ldr	r3, [pc, #168]	; (800b240 <UART_SetConfig+0x934>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	08db      	lsrs	r3, r3, #3
 800b19c:	f003 0303 	and.w	r3, r3, #3
 800b1a0:	4a24      	ldr	r2, [pc, #144]	; (800b234 <UART_SetConfig+0x928>)
 800b1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1a8:	e00f      	b.n	800b1ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b1aa:	4b22      	ldr	r3, [pc, #136]	; (800b234 <UART_SetConfig+0x928>)
 800b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ae:	e00c      	b.n	800b1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1b0:	4b21      	ldr	r3, [pc, #132]	; (800b238 <UART_SetConfig+0x92c>)
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1b4:	e009      	b.n	800b1ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1bc:	e005      	b.n	800b1ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b1c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 80e7 	beq.w	800b3a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	4a19      	ldr	r2, [pc, #100]	; (800b23c <UART_SetConfig+0x930>)
 800b1d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1e4:	005a      	lsls	r2, r3, #1
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	085b      	lsrs	r3, r3, #1
 800b1ec:	441a      	add	r2, r3
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	2b0f      	cmp	r3, #15
 800b1fc:	d916      	bls.n	800b22c <UART_SetConfig+0x920>
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b204:	d212      	bcs.n	800b22c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	b29b      	uxth	r3, r3
 800b20a:	f023 030f 	bic.w	r3, r3, #15
 800b20e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b212:	085b      	lsrs	r3, r3, #1
 800b214:	b29b      	uxth	r3, r3
 800b216:	f003 0307 	and.w	r3, r3, #7
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b21e:	4313      	orrs	r3, r2
 800b220:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b228:	60da      	str	r2, [r3, #12]
 800b22a:	e0b9      	b.n	800b3a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b232:	e0b5      	b.n	800b3a0 <UART_SetConfig+0xa94>
 800b234:	03d09000 	.word	0x03d09000
 800b238:	003d0900 	.word	0x003d0900
 800b23c:	0800ce70 	.word	0x0800ce70
 800b240:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b244:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b248:	2b20      	cmp	r3, #32
 800b24a:	dc49      	bgt.n	800b2e0 <UART_SetConfig+0x9d4>
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	db7c      	blt.n	800b34a <UART_SetConfig+0xa3e>
 800b250:	2b20      	cmp	r3, #32
 800b252:	d87a      	bhi.n	800b34a <UART_SetConfig+0xa3e>
 800b254:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <UART_SetConfig+0x950>)
 800b256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25a:	bf00      	nop
 800b25c:	0800b2e7 	.word	0x0800b2e7
 800b260:	0800b2ef 	.word	0x0800b2ef
 800b264:	0800b34b 	.word	0x0800b34b
 800b268:	0800b34b 	.word	0x0800b34b
 800b26c:	0800b2f7 	.word	0x0800b2f7
 800b270:	0800b34b 	.word	0x0800b34b
 800b274:	0800b34b 	.word	0x0800b34b
 800b278:	0800b34b 	.word	0x0800b34b
 800b27c:	0800b307 	.word	0x0800b307
 800b280:	0800b34b 	.word	0x0800b34b
 800b284:	0800b34b 	.word	0x0800b34b
 800b288:	0800b34b 	.word	0x0800b34b
 800b28c:	0800b34b 	.word	0x0800b34b
 800b290:	0800b34b 	.word	0x0800b34b
 800b294:	0800b34b 	.word	0x0800b34b
 800b298:	0800b34b 	.word	0x0800b34b
 800b29c:	0800b317 	.word	0x0800b317
 800b2a0:	0800b34b 	.word	0x0800b34b
 800b2a4:	0800b34b 	.word	0x0800b34b
 800b2a8:	0800b34b 	.word	0x0800b34b
 800b2ac:	0800b34b 	.word	0x0800b34b
 800b2b0:	0800b34b 	.word	0x0800b34b
 800b2b4:	0800b34b 	.word	0x0800b34b
 800b2b8:	0800b34b 	.word	0x0800b34b
 800b2bc:	0800b34b 	.word	0x0800b34b
 800b2c0:	0800b34b 	.word	0x0800b34b
 800b2c4:	0800b34b 	.word	0x0800b34b
 800b2c8:	0800b34b 	.word	0x0800b34b
 800b2cc:	0800b34b 	.word	0x0800b34b
 800b2d0:	0800b34b 	.word	0x0800b34b
 800b2d4:	0800b34b 	.word	0x0800b34b
 800b2d8:	0800b34b 	.word	0x0800b34b
 800b2dc:	0800b33d 	.word	0x0800b33d
 800b2e0:	2b40      	cmp	r3, #64	; 0x40
 800b2e2:	d02e      	beq.n	800b342 <UART_SetConfig+0xa36>
 800b2e4:	e031      	b.n	800b34a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2e6:	f7fb f9b9 	bl	800665c <HAL_RCC_GetPCLK1Freq>
 800b2ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b2ec:	e033      	b.n	800b356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2ee:	f7fb f9cb 	bl	8006688 <HAL_RCC_GetPCLK2Freq>
 800b2f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b2f4:	e02f      	b.n	800b356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fd f97a 	bl	80085f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b304:	e027      	b.n	800b356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b306:	f107 0318 	add.w	r3, r7, #24
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fd fac6 	bl	800889c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b314:	e01f      	b.n	800b356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b316:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <UART_SetConfig+0xac0>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 0320 	and.w	r3, r3, #32
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d009      	beq.n	800b336 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b322:	4b2a      	ldr	r3, [pc, #168]	; (800b3cc <UART_SetConfig+0xac0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	08db      	lsrs	r3, r3, #3
 800b328:	f003 0303 	and.w	r3, r3, #3
 800b32c:	4a28      	ldr	r2, [pc, #160]	; (800b3d0 <UART_SetConfig+0xac4>)
 800b32e:	fa22 f303 	lsr.w	r3, r2, r3
 800b332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b334:	e00f      	b.n	800b356 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b336:	4b26      	ldr	r3, [pc, #152]	; (800b3d0 <UART_SetConfig+0xac4>)
 800b338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b33a:	e00c      	b.n	800b356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b33c:	4b25      	ldr	r3, [pc, #148]	; (800b3d4 <UART_SetConfig+0xac8>)
 800b33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b340:	e009      	b.n	800b356 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b348:	e005      	b.n	800b356 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b354:	bf00      	nop
    }

    if (pclk != 0U)
 800b356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d021      	beq.n	800b3a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	4a1d      	ldr	r2, [pc, #116]	; (800b3d8 <UART_SetConfig+0xacc>)
 800b362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b366:	461a      	mov	r2, r3
 800b368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	085b      	lsrs	r3, r3, #1
 800b374:	441a      	add	r2, r3
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	2b0f      	cmp	r3, #15
 800b384:	d909      	bls.n	800b39a <UART_SetConfig+0xa8e>
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b38c:	d205      	bcs.n	800b39a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b390:	b29a      	uxth	r2, r3
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	60da      	str	r2, [r3, #12]
 800b398:	e002      	b.n	800b3a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b3bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3748      	adds	r7, #72	; 0x48
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3ca:	bf00      	nop
 800b3cc:	58024400 	.word	0x58024400
 800b3d0:	03d09000 	.word	0x03d09000
 800b3d4:	003d0900 	.word	0x003d0900
 800b3d8:	0800ce70 	.word	0x0800ce70

0800b3dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00a      	beq.n	800b406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	430a      	orrs	r2, r1
 800b404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40a:	f003 0302 	and.w	r3, r3, #2
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00a      	beq.n	800b428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	430a      	orrs	r2, r1
 800b426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00a      	beq.n	800b44a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	430a      	orrs	r2, r1
 800b448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44e:	f003 0308 	and.w	r3, r3, #8
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00a      	beq.n	800b46c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	430a      	orrs	r2, r1
 800b46a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b470:	f003 0310 	and.w	r3, r3, #16
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00a      	beq.n	800b48e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	430a      	orrs	r2, r1
 800b48c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b492:	f003 0320 	and.w	r3, r3, #32
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00a      	beq.n	800b4b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01a      	beq.n	800b4f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	430a      	orrs	r2, r1
 800b4d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4da:	d10a      	bne.n	800b4f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00a      	beq.n	800b514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	430a      	orrs	r2, r1
 800b512:	605a      	str	r2, [r3, #4]
  }
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b098      	sub	sp, #96	; 0x60
 800b524:	af02      	add	r7, sp, #8
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b530:	f7f7 f866 	bl	8002600 <HAL_GetTick>
 800b534:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0308 	and.w	r3, r3, #8
 800b540:	2b08      	cmp	r3, #8
 800b542:	d12f      	bne.n	800b5a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b54c:	2200      	movs	r2, #0
 800b54e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f88e 	bl	800b674 <UART_WaitOnFlagUntilTimeout>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d022      	beq.n	800b5a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	e853 3f00 	ldrex	r3, [r3]
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b572:	653b      	str	r3, [r7, #80]	; 0x50
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	461a      	mov	r2, r3
 800b57a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b57c:	647b      	str	r3, [r7, #68]	; 0x44
 800b57e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b580:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b584:	e841 2300 	strex	r3, r2, [r1]
 800b588:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1e6      	bne.n	800b55e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e063      	b.n	800b66c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0304 	and.w	r3, r3, #4
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d149      	bne.n	800b646 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f857 	bl	800b674 <UART_WaitOnFlagUntilTimeout>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d03c      	beq.n	800b646 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	e853 3f00 	ldrex	r3, [r3]
 800b5d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ea:	633b      	str	r3, [r7, #48]	; 0x30
 800b5ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1e6      	bne.n	800b5cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3308      	adds	r3, #8
 800b604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f023 0301 	bic.w	r3, r3, #1
 800b614:	64bb      	str	r3, [r7, #72]	; 0x48
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3308      	adds	r3, #8
 800b61c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b61e:	61fa      	str	r2, [r7, #28]
 800b620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b622:	69b9      	ldr	r1, [r7, #24]
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	e841 2300 	strex	r3, r2, [r1]
 800b62a:	617b      	str	r3, [r7, #20]
   return(result);
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1e5      	bne.n	800b5fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2220      	movs	r2, #32
 800b636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b642:	2303      	movs	r3, #3
 800b644:	e012      	b.n	800b66c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2220      	movs	r2, #32
 800b64a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2220      	movs	r2, #32
 800b652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3758      	adds	r7, #88	; 0x58
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	4613      	mov	r3, r2
 800b682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b684:	e049      	b.n	800b71a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b68c:	d045      	beq.n	800b71a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b68e:	f7f6 ffb7 	bl	8002600 <HAL_GetTick>
 800b692:	4602      	mov	r2, r0
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	69ba      	ldr	r2, [r7, #24]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d302      	bcc.n	800b6a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e048      	b.n	800b73a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 0304 	and.w	r3, r3, #4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d031      	beq.n	800b71a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	69db      	ldr	r3, [r3, #28]
 800b6bc:	f003 0308 	and.w	r3, r3, #8
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	d110      	bne.n	800b6e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2208      	movs	r2, #8
 800b6ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 f839 	bl	800b744 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2208      	movs	r2, #8
 800b6d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e029      	b.n	800b73a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	69db      	ldr	r3, [r3, #28]
 800b6ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6f4:	d111      	bne.n	800b71a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 f81f 	bl	800b744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2220      	movs	r2, #32
 800b70a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	e00f      	b.n	800b73a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	69da      	ldr	r2, [r3, #28]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	4013      	ands	r3, r2
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	429a      	cmp	r2, r3
 800b728:	bf0c      	ite	eq
 800b72a:	2301      	moveq	r3, #1
 800b72c:	2300      	movne	r3, #0
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	461a      	mov	r2, r3
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	429a      	cmp	r2, r3
 800b736:	d0a6      	beq.n	800b686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
	...

0800b744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b744:	b480      	push	{r7}
 800b746:	b095      	sub	sp, #84	; 0x54
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b760:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	461a      	mov	r2, r3
 800b768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76a:	643b      	str	r3, [r7, #64]	; 0x40
 800b76c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e6      	bne.n	800b74c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3308      	adds	r3, #8
 800b784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	e853 3f00 	ldrex	r3, [r3]
 800b78c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b78e:	69fa      	ldr	r2, [r7, #28]
 800b790:	4b1e      	ldr	r3, [pc, #120]	; (800b80c <UART_EndRxTransfer+0xc8>)
 800b792:	4013      	ands	r3, r2
 800b794:	64bb      	str	r3, [r7, #72]	; 0x48
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3308      	adds	r3, #8
 800b79c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b79e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7a6:	e841 2300 	strex	r3, r2, [r1]
 800b7aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1e5      	bne.n	800b77e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d118      	bne.n	800b7ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	e853 3f00 	ldrex	r3, [r3]
 800b7c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	f023 0310 	bic.w	r3, r3, #16
 800b7ce:	647b      	str	r3, [r7, #68]	; 0x44
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7d8:	61bb      	str	r3, [r7, #24]
 800b7da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7dc:	6979      	ldr	r1, [r7, #20]
 800b7de:	69ba      	ldr	r2, [r7, #24]
 800b7e0:	e841 2300 	strex	r3, r2, [r1]
 800b7e4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e6      	bne.n	800b7ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b800:	bf00      	nop
 800b802:	3754      	adds	r7, #84	; 0x54
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	effffffe 	.word	0xeffffffe

0800b810 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d101      	bne.n	800b826 <HAL_UARTEx_DisableFifoMode+0x16>
 800b822:	2302      	movs	r3, #2
 800b824:	e027      	b.n	800b876 <HAL_UARTEx_DisableFifoMode+0x66>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2224      	movs	r2, #36	; 0x24
 800b832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f022 0201 	bic.w	r2, r2, #1
 800b84c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b854:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2220      	movs	r2, #32
 800b868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b084      	sub	sp, #16
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b892:	2b01      	cmp	r3, #1
 800b894:	d101      	bne.n	800b89a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b896:	2302      	movs	r3, #2
 800b898:	e02d      	b.n	800b8f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2224      	movs	r2, #36	; 0x24
 800b8a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f022 0201 	bic.w	r2, r2, #1
 800b8c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 f850 	bl	800b97c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d101      	bne.n	800b916 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b912:	2302      	movs	r3, #2
 800b914:	e02d      	b.n	800b972 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2224      	movs	r2, #36	; 0x24
 800b922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f022 0201 	bic.w	r2, r2, #1
 800b93c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f812 	bl	800b97c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2220      	movs	r2, #32
 800b964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
	...

0800b97c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d108      	bne.n	800b99e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b99c:	e031      	b.n	800ba02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b99e:	2310      	movs	r3, #16
 800b9a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9a2:	2310      	movs	r3, #16
 800b9a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	0e5b      	lsrs	r3, r3, #25
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	f003 0307 	and.w	r3, r3, #7
 800b9b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	0f5b      	lsrs	r3, r3, #29
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	f003 0307 	and.w	r3, r3, #7
 800b9c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	7b3a      	ldrb	r2, [r7, #12]
 800b9ca:	4911      	ldr	r1, [pc, #68]	; (800ba10 <UARTEx_SetNbDataToProcess+0x94>)
 800b9cc:	5c8a      	ldrb	r2, [r1, r2]
 800b9ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9d2:	7b3a      	ldrb	r2, [r7, #12]
 800b9d4:	490f      	ldr	r1, [pc, #60]	; (800ba14 <UARTEx_SetNbDataToProcess+0x98>)
 800b9d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
 800b9e6:	7b7a      	ldrb	r2, [r7, #13]
 800b9e8:	4909      	ldr	r1, [pc, #36]	; (800ba10 <UARTEx_SetNbDataToProcess+0x94>)
 800b9ea:	5c8a      	ldrb	r2, [r1, r2]
 800b9ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b9f0:	7b7a      	ldrb	r2, [r7, #13]
 800b9f2:	4908      	ldr	r1, [pc, #32]	; (800ba14 <UARTEx_SetNbDataToProcess+0x98>)
 800b9f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ba02:	bf00      	nop
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	0800ce88 	.word	0x0800ce88
 800ba14:	0800ce90 	.word	0x0800ce90

0800ba18 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	6812      	ldr	r2, [r2, #0]
 800ba30:	f023 0101 	bic.w	r1, r3, #1
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	2b08      	cmp	r3, #8
 800ba40:	d102      	bne.n	800ba48 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ba42:	2340      	movs	r3, #64	; 0x40
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	e001      	b.n	800ba4c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800ba58:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800ba5e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800ba64:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800ba6a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800ba70:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800ba76:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800ba7c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800ba82:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800ba88:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	4313      	orrs	r3, r2
 800baae:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800bab0:	4b20      	ldr	r3, [pc, #128]	; (800bb34 <FMC_NORSRAM_Init+0x11c>)
 800bab2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baba:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bac2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800baca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	43db      	mvns	r3, r3
 800bada:	ea02 0103 	and.w	r1, r2, r3
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	4319      	orrs	r1, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baf4:	d10c      	bne.n	800bb10 <FMC_NORSRAM_Init+0xf8>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d008      	beq.n	800bb10 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d006      	beq.n	800bb26 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb20:	431a      	orrs	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	371c      	adds	r7, #28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	0008fb7f 	.word	0x0008fb7f

0800bb38 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	1c5a      	adds	r2, r3, #1
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	011b      	lsls	r3, r3, #4
 800bb5c:	431a      	orrs	r2, r3
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	021b      	lsls	r3, r3, #8
 800bb64:	431a      	orrs	r2, r3
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	041b      	lsls	r3, r3, #16
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	3b01      	subs	r3, #1
 800bb74:	051b      	lsls	r3, r3, #20
 800bb76:	431a      	orrs	r2, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	3b02      	subs	r3, #2
 800bb7e:	061b      	lsls	r3, r3, #24
 800bb80:	431a      	orrs	r2, r3
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	3201      	adds	r2, #1
 800bb8c:	4319      	orrs	r1, r3
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bba0:	d113      	bne.n	800bbca <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bbaa:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	051b      	lsls	r3, r3, #20
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	431a      	orrs	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	371c      	adds	r7, #28
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbec:	d11d      	bne.n	800bc2a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bbf6:	4b13      	ldr	r3, [pc, #76]	; (800bc44 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	6811      	ldr	r1, [r2, #0]
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	6852      	ldr	r2, [r2, #4]
 800bc02:	0112      	lsls	r2, r2, #4
 800bc04:	4311      	orrs	r1, r2
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	6892      	ldr	r2, [r2, #8]
 800bc0a:	0212      	lsls	r2, r2, #8
 800bc0c:	4311      	orrs	r1, r2
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	6992      	ldr	r2, [r2, #24]
 800bc12:	4311      	orrs	r1, r2
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	68d2      	ldr	r2, [r2, #12]
 800bc18:	0412      	lsls	r2, r2, #16
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	ea43 0102 	orr.w	r1, r3, r2
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bc28:	e005      	b.n	800bc36 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bc32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	cff00000 	.word	0xcff00000

0800bc48 <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d121      	bne.n	800bcca <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	4b27      	ldr	r3, [pc, #156]	; (800bd28 <FMC_SDRAM_Init+0xb4>)
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	6851      	ldr	r1, [r2, #4]
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	6892      	ldr	r2, [r2, #8]
 800bc96:	4311      	orrs	r1, r2
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	68d2      	ldr	r2, [r2, #12]
 800bc9c:	4311      	orrs	r1, r2
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	6912      	ldr	r2, [r2, #16]
 800bca2:	4311      	orrs	r1, r2
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	6952      	ldr	r2, [r2, #20]
 800bca8:	4311      	orrs	r1, r2
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	6992      	ldr	r2, [r2, #24]
 800bcae:	4311      	orrs	r1, r2
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	69d2      	ldr	r2, [r2, #28]
 800bcb4:	4311      	orrs	r1, r2
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	6a12      	ldr	r2, [r2, #32]
 800bcba:	4311      	orrs	r1, r2
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bcc0:	430a      	orrs	r2, r1
 800bcc2:	431a      	orrs	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	e026      	b.n	800bd18 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	69d9      	ldr	r1, [r3, #28]
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	4319      	orrs	r1, r3
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	430b      	orrs	r3, r1
 800bce2:	431a      	orrs	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	4b0e      	ldr	r3, [pc, #56]	; (800bd28 <FMC_SDRAM_Init+0xb4>)
 800bcee:	4013      	ands	r3, r2
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	6851      	ldr	r1, [r2, #4]
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	6892      	ldr	r2, [r2, #8]
 800bcf8:	4311      	orrs	r1, r2
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	68d2      	ldr	r2, [r2, #12]
 800bcfe:	4311      	orrs	r1, r2
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	6912      	ldr	r2, [r2, #16]
 800bd04:	4311      	orrs	r1, r2
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	6952      	ldr	r2, [r2, #20]
 800bd0a:	4311      	orrs	r1, r2
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	6992      	ldr	r2, [r2, #24]
 800bd10:	430a      	orrs	r2, r1
 800bd12:	431a      	orrs	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	ffff8000 	.word	0xffff8000

0800bd2c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d128      	bne.n	800bd90 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	1e59      	subs	r1, r3, #1
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	3b01      	subs	r3, #1
 800bd52:	011b      	lsls	r3, r3, #4
 800bd54:	4319      	orrs	r1, r3
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	021b      	lsls	r3, r3, #8
 800bd5e:	4319      	orrs	r1, r3
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	031b      	lsls	r3, r3, #12
 800bd68:	4319      	orrs	r1, r3
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	041b      	lsls	r3, r3, #16
 800bd72:	4319      	orrs	r1, r3
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	051b      	lsls	r3, r3, #20
 800bd7c:	4319      	orrs	r1, r3
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	3b01      	subs	r3, #1
 800bd84:	061b      	lsls	r3, r3, #24
 800bd86:	430b      	orrs	r3, r1
 800bd88:	431a      	orrs	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	609a      	str	r2, [r3, #8]
 800bd8e:	e02d      	b.n	800bdec <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	4b19      	ldr	r3, [pc, #100]	; (800bdfc <FMC_SDRAM_Timing_Init+0xd0>)
 800bd96:	4013      	ands	r3, r2
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	68d2      	ldr	r2, [r2, #12]
 800bd9c:	3a01      	subs	r2, #1
 800bd9e:	0311      	lsls	r1, r2, #12
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	6952      	ldr	r2, [r2, #20]
 800bda4:	3a01      	subs	r2, #1
 800bda6:	0512      	lsls	r2, r2, #20
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	431a      	orrs	r2, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	1e59      	subs	r1, r3, #1
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	011b      	lsls	r3, r3, #4
 800bdc6:	4319      	orrs	r1, r3
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	021b      	lsls	r3, r3, #8
 800bdd0:	4319      	orrs	r1, r3
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	041b      	lsls	r3, r3, #16
 800bdda:	4319      	orrs	r1, r3
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	061b      	lsls	r3, r3, #24
 800bde4:	430b      	orrs	r3, r1
 800bde6:	431a      	orrs	r2, r3
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	ff0f0fff 	.word	0xff0f0fff

0800be00 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800be00:	b084      	sub	sp, #16
 800be02:	b480      	push	{r7}
 800be04:	b085      	sub	sp, #20
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	f107 001c 	add.w	r0, r7, #28
 800be0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800be12:	2300      	movs	r3, #0
 800be14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800be16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800be18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800be1a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800be1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800be22:	431a      	orrs	r2, r3
             Init.ClockDiv
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800be26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685a      	ldr	r2, [r3, #4]
 800be32:	4b07      	ldr	r3, [pc, #28]	; (800be50 <SDMMC_Init+0x50>)
 800be34:	4013      	ands	r3, r2
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	431a      	orrs	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800be3e:	2300      	movs	r3, #0
}
 800be40:	4618      	mov	r0, r3
 800be42:	3714      	adds	r7, #20
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	b004      	add	sp, #16
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	ffc02c00 	.word	0xffc02c00

0800be54 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800be62:	4618      	mov	r0, r3
 800be64:	370c      	adds	r7, #12
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800be6e:	b480      	push	{r7}
 800be70:	b083      	sub	sp, #12
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f043 0203 	orr.w	r2, r3, #3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0303 	and.w	r3, r3, #3
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800beca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bed0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bed6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4313      	orrs	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68da      	ldr	r2, [r3, #12]
 800bee2:	4b06      	ldr	r3, [pc, #24]	; (800befc <SDMMC_SendCommand+0x50>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	431a      	orrs	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	fffee0c0 	.word	0xfffee0c0

0800bf00 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	b2db      	uxtb	r3, r3
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b085      	sub	sp, #20
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3314      	adds	r3, #20
 800bf28:	461a      	mov	r2, r3
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	685a      	ldr	r2, [r3, #4]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bf66:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bf6c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800bf72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	431a      	orrs	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0

}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3714      	adds	r7, #20
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b088      	sub	sp, #32
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bfa6:	2310      	movs	r3, #16
 800bfa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfba:	f107 0308 	add.w	r3, r7, #8
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff ff73 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bfc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfca:	2110      	movs	r1, #16
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f995 	bl	800c2fc <SDMMC_GetCmdResp1>
 800bfd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3720      	adds	r7, #32
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b088      	sub	sp, #32
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bfec:	2307      	movs	r3, #7
 800bfee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bff6:	2300      	movs	r3, #0
 800bff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bffe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c000:	f107 0308 	add.w	r3, r7, #8
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7ff ff50 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c00c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c010:	2107      	movs	r1, #7
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f972 	bl	800c2fc <SDMMC_GetCmdResp1>
 800c018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c01a:	69fb      	ldr	r3, [r7, #28]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c02c:	2300      	movs	r3, #0
 800c02e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c030:	2300      	movs	r3, #0
 800c032:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c034:	2300      	movs	r3, #0
 800c036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c038:	2300      	movs	r3, #0
 800c03a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c042:	f107 0308 	add.w	r3, r7, #8
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7ff ff2f 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fb96 	bl	800c780 <SDMMC_GetCmdError>
 800c054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c056:	69fb      	ldr	r3, [r7, #28]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3720      	adds	r7, #32
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b088      	sub	sp, #32
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c068:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c06e:	2308      	movs	r3, #8
 800c070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c072:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c078:	2300      	movs	r3, #0
 800c07a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c07c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c082:	f107 0308 	add.w	r3, r7, #8
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7ff ff0f 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fb28 	bl	800c6e4 <SDMMC_GetCmdResp7>
 800c094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c096:	69fb      	ldr	r3, [r7, #28]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3720      	adds	r7, #32
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c0ae:	2337      	movs	r3, #55	; 0x37
 800c0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0c2:	f107 0308 	add.w	r3, r7, #8
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff feef 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c0ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0d2:	2137      	movs	r1, #55	; 0x37
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f911 	bl	800c2fc <SDMMC_GetCmdResp1>
 800c0da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0dc:	69fb      	ldr	r3, [r7, #28]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3720      	adds	r7, #32
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b088      	sub	sp, #32
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c0f4:	2329      	movs	r3, #41	; 0x29
 800c0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0fe:	2300      	movs	r3, #0
 800c100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c108:	f107 0308 	add.w	r3, r7, #8
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fecc 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fa2d 	bl	800c574 <SDMMC_GetCmdResp3>
 800c11a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c11c:	69fb      	ldr	r3, [r7, #28]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3720      	adds	r7, #32
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b088      	sub	sp, #32
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c134:	2306      	movs	r3, #6
 800c136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c13c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c13e:	2300      	movs	r3, #0
 800c140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c148:	f107 0308 	add.w	r3, r7, #8
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff feac 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c154:	f241 3288 	movw	r2, #5000	; 0x1388
 800c158:	2106      	movs	r1, #6
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 f8ce 	bl	800c2fc <SDMMC_GetCmdResp1>
 800c160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c162:	69fb      	ldr	r3, [r7, #28]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3720      	adds	r7, #32
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b088      	sub	sp, #32
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c174:	2300      	movs	r3, #0
 800c176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c178:	2333      	movs	r3, #51	; 0x33
 800c17a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c17c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c182:	2300      	movs	r3, #0
 800c184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c18a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c18c:	f107 0308 	add.w	r3, r7, #8
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7ff fe8a 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c198:	f241 3288 	movw	r2, #5000	; 0x1388
 800c19c:	2133      	movs	r1, #51	; 0x33
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f8ac 	bl	800c2fc <SDMMC_GetCmdResp1>
 800c1a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1a6:	69fb      	ldr	r3, [r7, #28]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c1bc:	2302      	movs	r3, #2
 800c1be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c1c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c1c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1d0:	f107 0308 	add.w	r3, r7, #8
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff fe68 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f97f 	bl	800c4e0 <SDMMC_GetCmdResp2>
 800c1e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1e4:	69fb      	ldr	r3, [r7, #28]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3720      	adds	r7, #32
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b088      	sub	sp, #32
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c1fc:	2309      	movs	r3, #9
 800c1fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c200:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c206:	2300      	movs	r3, #0
 800c208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c20a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c20e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c210:	f107 0308 	add.w	r3, r7, #8
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fe48 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f95f 	bl	800c4e0 <SDMMC_GetCmdResp2>
 800c222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c224:	69fb      	ldr	r3, [r7, #28]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3720      	adds	r7, #32
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b088      	sub	sp, #32
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
 800c236:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c238:	2300      	movs	r3, #0
 800c23a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c23c:	2303      	movs	r3, #3
 800c23e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c240:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c246:	2300      	movs	r3, #0
 800c248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c24a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c24e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c250:	f107 0308 	add.w	r3, r7, #8
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff fe28 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	2103      	movs	r1, #3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f9c7 	bl	800c5f4 <SDMMC_GetCmdResp6>
 800c266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c268:	69fb      	ldr	r3, [r7, #28]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3720      	adds	r7, #32
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b088      	sub	sp, #32
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c280:	230d      	movs	r3, #13
 800c282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c284:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c28a:	2300      	movs	r3, #0
 800c28c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c28e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c294:	f107 0308 	add.w	r3, r7, #8
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff fe06 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2a4:	210d      	movs	r1, #13
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f828 	bl	800c2fc <SDMMC_GetCmdResp1>
 800c2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2ae:	69fb      	ldr	r3, [r7, #28]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3720      	adds	r7, #32
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b088      	sub	sp, #32
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c2c4:	230d      	movs	r3, #13
 800c2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2d8:	f107 0308 	add.w	r3, r7, #8
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fde4 	bl	800beac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2e8:	210d      	movs	r1, #13
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f806 	bl	800c2fc <SDMMC_GetCmdResp1>
 800c2f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2f2:	69fb      	ldr	r3, [r7, #28]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3720      	adds	r7, #32
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b088      	sub	sp, #32
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	460b      	mov	r3, r1
 800c306:	607a      	str	r2, [r7, #4]
 800c308:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c30a:	4b70      	ldr	r3, [pc, #448]	; (800c4cc <SDMMC_GetCmdResp1+0x1d0>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a70      	ldr	r2, [pc, #448]	; (800c4d0 <SDMMC_GetCmdResp1+0x1d4>)
 800c310:	fba2 2303 	umull	r2, r3, r2, r3
 800c314:	0a5a      	lsrs	r2, r3, #9
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	fb02 f303 	mul.w	r3, r2, r3
 800c31c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	1e5a      	subs	r2, r3, #1
 800c322:	61fa      	str	r2, [r7, #28]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d102      	bne.n	800c32e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c32c:	e0c9      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c332:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c334:	69ba      	ldr	r2, [r7, #24]
 800c336:	4b67      	ldr	r3, [pc, #412]	; (800c4d4 <SDMMC_GetCmdResp1+0x1d8>)
 800c338:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d0ef      	beq.n	800c31e <SDMMC_GetCmdResp1+0x22>
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1ea      	bne.n	800c31e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c34c:	f003 0304 	and.w	r3, r3, #4
 800c350:	2b00      	cmp	r3, #0
 800c352:	d004      	beq.n	800c35e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2204      	movs	r2, #4
 800c358:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c35a:	2304      	movs	r3, #4
 800c35c:	e0b1      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	2b00      	cmp	r3, #0
 800c368:	d004      	beq.n	800c374 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2201      	movs	r2, #1
 800c36e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c370:	2301      	movs	r3, #1
 800c372:	e0a6      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4a58      	ldr	r2, [pc, #352]	; (800c4d8 <SDMMC_GetCmdResp1+0x1dc>)
 800c378:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff fdc0 	bl	800bf00 <SDMMC_GetCommandResponse>
 800c380:	4603      	mov	r3, r0
 800c382:	461a      	mov	r2, r3
 800c384:	7afb      	ldrb	r3, [r7, #11]
 800c386:	4293      	cmp	r3, r2
 800c388:	d001      	beq.n	800c38e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c38a:	2301      	movs	r3, #1
 800c38c:	e099      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c38e:	2100      	movs	r1, #0
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7ff fdc2 	bl	800bf1a <SDMMC_GetResponse>
 800c396:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c398:	697a      	ldr	r2, [r7, #20]
 800c39a:	4b50      	ldr	r3, [pc, #320]	; (800c4dc <SDMMC_GetCmdResp1+0x1e0>)
 800c39c:	4013      	ands	r3, r2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e08d      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da02      	bge.n	800c3b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c3ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c3b0:	e087      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d001      	beq.n	800c3c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c3bc:	2340      	movs	r3, #64	; 0x40
 800c3be:	e080      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c3ca:	2380      	movs	r3, #128	; 0x80
 800c3cc:	e079      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c3d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3dc:	e071      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c3e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3ec:	e069      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3fc:	e061      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c408:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c40c:	e059      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c41c:	e051      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c42c:	e049      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c438:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c43c:	e041      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c44c:	e039      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c45c:	e031      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c468:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c46c:	e029      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c478:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c47c:	e021      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c488:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c48c:	e019      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c498:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c49c:	e011      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c4a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c4ac:	e009      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f003 0308 	and.w	r3, r3, #8
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c4b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c4bc:	e001      	b.n	800c4c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3720      	adds	r7, #32
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	24000000 	.word	0x24000000
 800c4d0:	10624dd3 	.word	0x10624dd3
 800c4d4:	00200045 	.word	0x00200045
 800c4d8:	002000c5 	.word	0x002000c5
 800c4dc:	fdffe008 	.word	0xfdffe008

0800c4e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4e8:	4b1f      	ldr	r3, [pc, #124]	; (800c568 <SDMMC_GetCmdResp2+0x88>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a1f      	ldr	r2, [pc, #124]	; (800c56c <SDMMC_GetCmdResp2+0x8c>)
 800c4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f2:	0a5b      	lsrs	r3, r3, #9
 800c4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4f8:	fb02 f303 	mul.w	r3, r2, r3
 800c4fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	1e5a      	subs	r2, r3, #1
 800c502:	60fa      	str	r2, [r7, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d102      	bne.n	800c50e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c50c:	e026      	b.n	800c55c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c512:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0ef      	beq.n	800c4fe <SDMMC_GetCmdResp2+0x1e>
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1ea      	bne.n	800c4fe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c52c:	f003 0304 	and.w	r3, r3, #4
 800c530:	2b00      	cmp	r3, #0
 800c532:	d004      	beq.n	800c53e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2204      	movs	r2, #4
 800c538:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c53a:	2304      	movs	r3, #4
 800c53c:	e00e      	b.n	800c55c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	d004      	beq.n	800c554 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c550:	2301      	movs	r3, #1
 800c552:	e003      	b.n	800c55c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a06      	ldr	r2, [pc, #24]	; (800c570 <SDMMC_GetCmdResp2+0x90>)
 800c558:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	24000000 	.word	0x24000000
 800c56c:	10624dd3 	.word	0x10624dd3
 800c570:	002000c5 	.word	0x002000c5

0800c574 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c57c:	4b1a      	ldr	r3, [pc, #104]	; (800c5e8 <SDMMC_GetCmdResp3+0x74>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a1a      	ldr	r2, [pc, #104]	; (800c5ec <SDMMC_GetCmdResp3+0x78>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	0a5b      	lsrs	r3, r3, #9
 800c588:	f241 3288 	movw	r2, #5000	; 0x1388
 800c58c:	fb02 f303 	mul.w	r3, r2, r3
 800c590:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	1e5a      	subs	r2, r3, #1
 800c596:	60fa      	str	r2, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d102      	bne.n	800c5a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c59c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5a0:	e01b      	b.n	800c5da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d0ef      	beq.n	800c592 <SDMMC_GetCmdResp3+0x1e>
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1ea      	bne.n	800c592 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c0:	f003 0304 	and.w	r3, r3, #4
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d004      	beq.n	800c5d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2204      	movs	r2, #4
 800c5cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5ce:	2304      	movs	r3, #4
 800c5d0:	e003      	b.n	800c5da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a06      	ldr	r2, [pc, #24]	; (800c5f0 <SDMMC_GetCmdResp3+0x7c>)
 800c5d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3714      	adds	r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	24000000 	.word	0x24000000
 800c5ec:	10624dd3 	.word	0x10624dd3
 800c5f0:	002000c5 	.word	0x002000c5

0800c5f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b088      	sub	sp, #32
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c602:	4b35      	ldr	r3, [pc, #212]	; (800c6d8 <SDMMC_GetCmdResp6+0xe4>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a35      	ldr	r2, [pc, #212]	; (800c6dc <SDMMC_GetCmdResp6+0xe8>)
 800c608:	fba2 2303 	umull	r2, r3, r2, r3
 800c60c:	0a5b      	lsrs	r3, r3, #9
 800c60e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c612:	fb02 f303 	mul.w	r3, r2, r3
 800c616:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	1e5a      	subs	r2, r3, #1
 800c61c:	61fa      	str	r2, [r7, #28]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d102      	bne.n	800c628 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c622:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c626:	e052      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0ef      	beq.n	800c618 <SDMMC_GetCmdResp6+0x24>
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1ea      	bne.n	800c618 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c646:	f003 0304 	and.w	r3, r3, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2204      	movs	r2, #4
 800c652:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c654:	2304      	movs	r3, #4
 800c656:	e03a      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d004      	beq.n	800c66e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2201      	movs	r2, #1
 800c668:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c66a:	2301      	movs	r3, #1
 800c66c:	e02f      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f7ff fc46 	bl	800bf00 <SDMMC_GetCommandResponse>
 800c674:	4603      	mov	r3, r0
 800c676:	461a      	mov	r2, r3
 800c678:	7afb      	ldrb	r3, [r7, #11]
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d001      	beq.n	800c682 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c67e:	2301      	movs	r3, #1
 800c680:	e025      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	4a16      	ldr	r2, [pc, #88]	; (800c6e0 <SDMMC_GetCmdResp6+0xec>)
 800c686:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c688:	2100      	movs	r1, #0
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7ff fc45 	bl	800bf1a <SDMMC_GetResponse>
 800c690:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d106      	bne.n	800c6aa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	0c1b      	lsrs	r3, r3, #16
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	e011      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6b8:	e009      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6c8:	e001      	b.n	800c6ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c6ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	24000000 	.word	0x24000000
 800c6dc:	10624dd3 	.word	0x10624dd3
 800c6e0:	002000c5 	.word	0x002000c5

0800c6e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c6ec:	4b22      	ldr	r3, [pc, #136]	; (800c778 <SDMMC_GetCmdResp7+0x94>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a22      	ldr	r2, [pc, #136]	; (800c77c <SDMMC_GetCmdResp7+0x98>)
 800c6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f6:	0a5b      	lsrs	r3, r3, #9
 800c6f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6fc:	fb02 f303 	mul.w	r3, r2, r3
 800c700:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	1e5a      	subs	r2, r3, #1
 800c706:	60fa      	str	r2, [r7, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d102      	bne.n	800c712 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c70c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c710:	e02c      	b.n	800c76c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c716:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0ef      	beq.n	800c702 <SDMMC_GetCmdResp7+0x1e>
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1ea      	bne.n	800c702 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c730:	f003 0304 	and.w	r3, r3, #4
 800c734:	2b00      	cmp	r3, #0
 800c736:	d004      	beq.n	800c742 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2204      	movs	r2, #4
 800c73c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c73e:	2304      	movs	r3, #4
 800c740:	e014      	b.n	800c76c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c746:	f003 0301 	and.w	r3, r3, #1
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d004      	beq.n	800c758 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c754:	2301      	movs	r3, #1
 800c756:	e009      	b.n	800c76c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c760:	2b00      	cmp	r3, #0
 800c762:	d002      	beq.n	800c76a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2240      	movs	r2, #64	; 0x40
 800c768:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c76a:	2300      	movs	r3, #0

}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr
 800c778:	24000000 	.word	0x24000000
 800c77c:	10624dd3 	.word	0x10624dd3

0800c780 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c788:	4b11      	ldr	r3, [pc, #68]	; (800c7d0 <SDMMC_GetCmdError+0x50>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a11      	ldr	r2, [pc, #68]	; (800c7d4 <SDMMC_GetCmdError+0x54>)
 800c78e:	fba2 2303 	umull	r2, r3, r2, r3
 800c792:	0a5b      	lsrs	r3, r3, #9
 800c794:	f241 3288 	movw	r2, #5000	; 0x1388
 800c798:	fb02 f303 	mul.w	r3, r2, r3
 800c79c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	1e5a      	subs	r2, r3, #1
 800c7a2:	60fa      	str	r2, [r7, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d102      	bne.n	800c7ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7ac:	e009      	b.n	800c7c2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0f1      	beq.n	800c79e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a06      	ldr	r2, [pc, #24]	; (800c7d8 <SDMMC_GetCmdError+0x58>)
 800c7be:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	24000000 	.word	0x24000000
 800c7d4:	10624dd3 	.word	0x10624dd3
 800c7d8:	002000c5 	.word	0x002000c5

0800c7dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c7dc:	b084      	sub	sp, #16
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b084      	sub	sp, #16
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	f107 001c 	add.w	r0, r7, #28
 800c7ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d120      	bne.n	800c836 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68da      	ldr	r2, [r3, #12]
 800c804:	4b2a      	ldr	r3, [pc, #168]	; (800c8b0 <USB_CoreInit+0xd4>)
 800c806:	4013      	ands	r3, r2
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d105      	bne.n	800c82a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 faac 	bl	800cd88 <USB_CoreReset>
 800c830:	4603      	mov	r3, r0
 800c832:	73fb      	strb	r3, [r7, #15]
 800c834:	e01a      	b.n	800c86c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 faa0 	bl	800cd88 <USB_CoreReset>
 800c848:	4603      	mov	r3, r0
 800c84a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d106      	bne.n	800c860 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	639a      	str	r2, [r3, #56]	; 0x38
 800c85e:	e005      	b.n	800c86c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d116      	bne.n	800c8a0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c876:	b29a      	uxth	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c880:	4b0c      	ldr	r3, [pc, #48]	; (800c8b4 <USB_CoreInit+0xd8>)
 800c882:	4313      	orrs	r3, r2
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	f043 0206 	orr.w	r2, r3, #6
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	f043 0220 	orr.w	r2, r3, #32
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8ac:	b004      	add	sp, #16
 800c8ae:	4770      	bx	lr
 800c8b0:	ffbdffbf 	.word	0xffbdffbf
 800c8b4:	03ee0000 	.word	0x03ee0000

0800c8b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f023 0201 	bic.w	r2, r3, #1
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c8f6:	78fb      	ldrb	r3, [r7, #3]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d115      	bne.n	800c928 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c908:	2001      	movs	r0, #1
 800c90a:	f7f5 fe85 	bl	8002618 <HAL_Delay>
      ms++;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3301      	adds	r3, #1
 800c912:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fa29 	bl	800cd6c <USB_GetMode>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d01e      	beq.n	800c95e <USB_SetCurrentMode+0x84>
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b31      	cmp	r3, #49	; 0x31
 800c924:	d9f0      	bls.n	800c908 <USB_SetCurrentMode+0x2e>
 800c926:	e01a      	b.n	800c95e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c928:	78fb      	ldrb	r3, [r7, #3]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d115      	bne.n	800c95a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c93a:	2001      	movs	r0, #1
 800c93c:	f7f5 fe6c 	bl	8002618 <HAL_Delay>
      ms++;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3301      	adds	r3, #1
 800c944:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fa10 	bl	800cd6c <USB_GetMode>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d005      	beq.n	800c95e <USB_SetCurrentMode+0x84>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b31      	cmp	r3, #49	; 0x31
 800c956:	d9f0      	bls.n	800c93a <USB_SetCurrentMode+0x60>
 800c958:	e001      	b.n	800c95e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e005      	b.n	800c96a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b32      	cmp	r3, #50	; 0x32
 800c962:	d101      	bne.n	800c968 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	e000      	b.n	800c96a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c974:	b084      	sub	sp, #16
 800c976:	b580      	push	{r7, lr}
 800c978:	b086      	sub	sp, #24
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c986:	2300      	movs	r3, #0
 800c988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c98e:	2300      	movs	r3, #0
 800c990:	613b      	str	r3, [r7, #16]
 800c992:	e009      	b.n	800c9a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3340      	adds	r3, #64	; 0x40
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4413      	add	r3, r2
 800c99e:	2200      	movs	r2, #0
 800c9a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	613b      	str	r3, [r7, #16]
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	2b0e      	cmp	r3, #14
 800c9ac:	d9f2      	bls.n	800c994 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d11c      	bne.n	800c9ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9c2:	f043 0302 	orr.w	r3, r3, #2
 800c9c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	601a      	str	r2, [r3, #0]
 800c9ec:	e005      	b.n	800c9fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca00:	461a      	mov	r2, r3
 800ca02:	2300      	movs	r3, #0
 800ca04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca14:	461a      	mov	r2, r3
 800ca16:	680b      	ldr	r3, [r1, #0]
 800ca18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d10c      	bne.n	800ca3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ca20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d104      	bne.n	800ca30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ca26:	2100      	movs	r1, #0
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f965 	bl	800ccf8 <USB_SetDevSpeed>
 800ca2e:	e008      	b.n	800ca42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ca30:	2101      	movs	r1, #1
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f960 	bl	800ccf8 <USB_SetDevSpeed>
 800ca38:	e003      	b.n	800ca42 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ca3a:	2103      	movs	r1, #3
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f95b 	bl	800ccf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ca42:	2110      	movs	r1, #16
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 f8f3 	bl	800cc30 <USB_FlushTxFifo>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f91f 	bl	800cc98 <USB_FlushRxFifo>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca76:	461a      	mov	r2, r3
 800ca78:	2300      	movs	r3, #0
 800ca7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca82:	461a      	mov	r2, r3
 800ca84:	2300      	movs	r3, #0
 800ca86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca88:	2300      	movs	r3, #0
 800ca8a:	613b      	str	r3, [r7, #16]
 800ca8c:	e043      	b.n	800cb16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	015a      	lsls	r2, r3, #5
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	4413      	add	r3, r2
 800ca96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800caa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800caa4:	d118      	bne.n	800cad8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	015a      	lsls	r2, r3, #5
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab8:	461a      	mov	r2, r3
 800caba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	e013      	b.n	800caea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	015a      	lsls	r2, r3, #5
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	4413      	add	r3, r2
 800caca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cace:	461a      	mov	r2, r3
 800cad0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cad4:	6013      	str	r3, [r2, #0]
 800cad6:	e008      	b.n	800caea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	015a      	lsls	r2, r3, #5
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	4413      	add	r3, r2
 800cae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cae4:	461a      	mov	r2, r3
 800cae6:	2300      	movs	r3, #0
 800cae8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	015a      	lsls	r2, r3, #5
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	4413      	add	r3, r2
 800caf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caf6:	461a      	mov	r2, r3
 800caf8:	2300      	movs	r3, #0
 800cafa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	015a      	lsls	r2, r3, #5
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	4413      	add	r3, r2
 800cb04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb08:	461a      	mov	r2, r3
 800cb0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	3301      	adds	r3, #1
 800cb14:	613b      	str	r3, [r7, #16]
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d3b7      	bcc.n	800ca8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb1e:	2300      	movs	r3, #0
 800cb20:	613b      	str	r3, [r7, #16]
 800cb22:	e043      	b.n	800cbac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	015a      	lsls	r2, r3, #5
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb3a:	d118      	bne.n	800cb6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10a      	bne.n	800cb58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	015a      	lsls	r2, r3, #5
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	4413      	add	r3, r2
 800cb4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	e013      	b.n	800cb80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	015a      	lsls	r2, r3, #5
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb64:	461a      	mov	r2, r3
 800cb66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cb6a:	6013      	str	r3, [r2, #0]
 800cb6c:	e008      	b.n	800cb80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	015a      	lsls	r2, r3, #5
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	4413      	add	r3, r2
 800cb76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	2300      	movs	r3, #0
 800cb90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	015a      	lsls	r2, r3, #5
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	4413      	add	r3, r2
 800cb9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb9e:	461a      	mov	r2, r3
 800cba0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cba4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	613b      	str	r3, [r7, #16]
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d3b7      	bcc.n	800cb24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cbd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d105      	bne.n	800cbe8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	699b      	ldr	r3, [r3, #24]
 800cbe0:	f043 0210 	orr.w	r2, r3, #16
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	699a      	ldr	r2, [r3, #24]
 800cbec:	4b0e      	ldr	r3, [pc, #56]	; (800cc28 <USB_DevInit+0x2b4>)
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d005      	beq.n	800cc06 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	699b      	ldr	r3, [r3, #24]
 800cbfe:	f043 0208 	orr.w	r2, r3, #8
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cc06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d105      	bne.n	800cc18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	699a      	ldr	r2, [r3, #24]
 800cc10:	4b06      	ldr	r3, [pc, #24]	; (800cc2c <USB_DevInit+0x2b8>)
 800cc12:	4313      	orrs	r3, r2
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cc18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3718      	adds	r7, #24
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc24:	b004      	add	sp, #16
 800cc26:	4770      	bx	lr
 800cc28:	803c3800 	.word	0x803c3800
 800cc2c:	40000004 	.word	0x40000004

0800cc30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3301      	adds	r3, #1
 800cc42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4a13      	ldr	r2, [pc, #76]	; (800cc94 <USB_FlushTxFifo+0x64>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d901      	bls.n	800cc50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	e01b      	b.n	800cc88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	daf2      	bge.n	800cc3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	019b      	lsls	r3, r3, #6
 800cc60:	f043 0220 	orr.w	r2, r3, #32
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	4a08      	ldr	r2, [pc, #32]	; (800cc94 <USB_FlushTxFifo+0x64>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d901      	bls.n	800cc7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e006      	b.n	800cc88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	691b      	ldr	r3, [r3, #16]
 800cc7e:	f003 0320 	and.w	r3, r3, #32
 800cc82:	2b20      	cmp	r3, #32
 800cc84:	d0f0      	beq.n	800cc68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cc86:	2300      	movs	r3, #0
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr
 800cc94:	00030d40 	.word	0x00030d40

0800cc98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	3301      	adds	r3, #1
 800cca8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4a11      	ldr	r2, [pc, #68]	; (800ccf4 <USB_FlushRxFifo+0x5c>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d901      	bls.n	800ccb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ccb2:	2303      	movs	r3, #3
 800ccb4:	e018      	b.n	800cce8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	daf2      	bge.n	800cca4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2210      	movs	r2, #16
 800ccc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	3301      	adds	r3, #1
 800cccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	4a08      	ldr	r2, [pc, #32]	; (800ccf4 <USB_FlushRxFifo+0x5c>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d901      	bls.n	800ccda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	e006      	b.n	800cce8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	f003 0310 	and.w	r3, r3, #16
 800cce2:	2b10      	cmp	r3, #16
 800cce4:	d0f0      	beq.n	800ccc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	00030d40 	.word	0x00030d40

0800ccf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	78fb      	ldrb	r3, [r7, #3]
 800cd12:	68f9      	ldr	r1, [r7, #12]
 800cd14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b085      	sub	sp, #20
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd44:	f023 0303 	bic.w	r3, r3, #3
 800cd48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd58:	f043 0302 	orr.w	r3, r3, #2
 800cd5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	f003 0301 	and.w	r3, r3, #1
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	3301      	adds	r3, #1
 800cd98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4a13      	ldr	r2, [pc, #76]	; (800cdec <USB_CoreReset+0x64>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d901      	bls.n	800cda6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e01b      	b.n	800cdde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	daf2      	bge.n	800cd94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	f043 0201 	orr.w	r2, r3, #1
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	4a09      	ldr	r2, [pc, #36]	; (800cdec <USB_CoreReset+0x64>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d901      	bls.n	800cdd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e006      	b.n	800cdde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	f003 0301 	and.w	r3, r3, #1
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d0f0      	beq.n	800cdbe <USB_CoreReset+0x36>

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
 800cdea:	bf00      	nop
 800cdec:	00030d40 	.word	0x00030d40

0800cdf0 <__libc_init_array>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	4d0d      	ldr	r5, [pc, #52]	; (800ce28 <__libc_init_array+0x38>)
 800cdf4:	4c0d      	ldr	r4, [pc, #52]	; (800ce2c <__libc_init_array+0x3c>)
 800cdf6:	1b64      	subs	r4, r4, r5
 800cdf8:	10a4      	asrs	r4, r4, #2
 800cdfa:	2600      	movs	r6, #0
 800cdfc:	42a6      	cmp	r6, r4
 800cdfe:	d109      	bne.n	800ce14 <__libc_init_array+0x24>
 800ce00:	4d0b      	ldr	r5, [pc, #44]	; (800ce30 <__libc_init_array+0x40>)
 800ce02:	4c0c      	ldr	r4, [pc, #48]	; (800ce34 <__libc_init_array+0x44>)
 800ce04:	f000 f820 	bl	800ce48 <_init>
 800ce08:	1b64      	subs	r4, r4, r5
 800ce0a:	10a4      	asrs	r4, r4, #2
 800ce0c:	2600      	movs	r6, #0
 800ce0e:	42a6      	cmp	r6, r4
 800ce10:	d105      	bne.n	800ce1e <__libc_init_array+0x2e>
 800ce12:	bd70      	pop	{r4, r5, r6, pc}
 800ce14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce18:	4798      	blx	r3
 800ce1a:	3601      	adds	r6, #1
 800ce1c:	e7ee      	b.n	800cdfc <__libc_init_array+0xc>
 800ce1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce22:	4798      	blx	r3
 800ce24:	3601      	adds	r6, #1
 800ce26:	e7f2      	b.n	800ce0e <__libc_init_array+0x1e>
 800ce28:	0800cea0 	.word	0x0800cea0
 800ce2c:	0800cea0 	.word	0x0800cea0
 800ce30:	0800cea0 	.word	0x0800cea0
 800ce34:	0800cea4 	.word	0x0800cea4

0800ce38 <memset>:
 800ce38:	4402      	add	r2, r0
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d100      	bne.n	800ce42 <memset+0xa>
 800ce40:	4770      	bx	lr
 800ce42:	f803 1b01 	strb.w	r1, [r3], #1
 800ce46:	e7f9      	b.n	800ce3c <memset+0x4>

0800ce48 <_init>:
 800ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4a:	bf00      	nop
 800ce4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce4e:	bc08      	pop	{r3}
 800ce50:	469e      	mov	lr, r3
 800ce52:	4770      	bx	lr

0800ce54 <_fini>:
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce56:	bf00      	nop
 800ce58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce5a:	bc08      	pop	{r3}
 800ce5c:	469e      	mov	lr, r3
 800ce5e:	4770      	bx	lr
