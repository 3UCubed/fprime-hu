// ======================================================================
// \title  Emptybftosv100ComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Emptybftosv100 component base class
// ======================================================================

#include <cstdio>

#include "Components/Emptybftosv100/Emptybftosv100ComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Components {

  namespace {
    enum MsgTypeEnum {
      EMPTYBFTOSV100_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
      TODO_SCHED,
    };

    // Get the max size by doing a union of the input and internal port serialization sizes
    union BuffUnion {
      BYTE TODOPortSize[Svc::InputSchedPort::SERIALIZED_SIZE];
    };

    // Define a message buffer class large enough to handle all the
    // asynchronous inputs to the component
    class ComponentIpcSerializableBuffer :
      public Fw::SerializeBufferBase
    {

      public:

        enum {
          // Max. message size = size of data + message id + port
          SERIALIZATION_SIZE =
            sizeof(BuffUnion) +
            sizeof(NATIVE_INT_TYPE) +
            sizeof(NATIVE_INT_TYPE)
        };

        NATIVE_UINT_TYPE getBuffCapacity() const {
          return sizeof(m_buff);
        }

        U8* getBuffAddr() {
          return m_buff;
        }

        const U8* getBuffAddr() const {
          return m_buff;
        }

      private:
        // Should be the max of all the input ports serialized sizes...
        U8 m_buff[SERIALIZATION_SIZE];

    };
  }

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void Emptybftosv100ComponentBase ::
    init(
        NATIVE_INT_TYPE queueDepth,
        NATIVE_INT_TYPE instance
    )
  {
    // Initialize base class
    Fw::ActiveComponentBase::init(instance);

    // Connect input port TODO
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_TODO_InputPorts());
      port++
    ) {
      this->m_TODO_InputPort[port].init();
      this->m_TODO_InputPort[port].addCallComp(
        this,
        m_p_TODO_in
      );
      this->m_TODO_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_TODO_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_TODO_InputPort[port].setObjName(portName);
#endif
    }

    // Connect output port prmGetOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_prmGetOut_OutputPorts());
      port++
    ) {
      this->m_prmGetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_prmGetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_prmGetOut_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port prmSetOut
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_prmSetOut_OutputPorts());
      port++
    ) {
      this->m_prmSetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_prmSetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_prmSetOut_OutputPort[port].setObjName(portName);
#endif
    }

    // Connect output port timeCaller
    for (
      PlatformIntType port = 0;
      port < static_cast<PlatformIntType>(this->getNum_timeCaller_OutputPorts());
      port++
    ) {
      this->m_timeCaller_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[120];
      (void) snprintf(
        portName,
        sizeof(portName),
        "%s_timeCaller_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName,
        port
      );
      this->m_timeCaller_OutputPort[port].setObjName(portName);
#endif
    }

    Os::Queue::QueueStatus qStat = this->createQueue(
      queueDepth,
      ComponentIpcSerializableBuffer::SERIALIZATION_SIZE
    );
    FW_ASSERT(
      Os::Queue::QUEUE_OK == qStat,
      static_cast<FwAssertArgType>(qStat)
    );
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Svc::InputSchedPort* Emptybftosv100ComponentBase ::
    get_TODO_InputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_TODO_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_TODO_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect special input ports to special output ports
  // ----------------------------------------------------------------------

  void Emptybftosv100ComponentBase ::
    set_prmGetOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputPrmGetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmGetOut_OutputPort[portNum].addCallPort(port);
  }

  void Emptybftosv100ComponentBase ::
    set_prmSetOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputPrmSetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].addCallPort(port);
  }

  void Emptybftosv100ComponentBase ::
    set_timeCaller_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void Emptybftosv100ComponentBase ::
    set_prmSetOut_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].registerSerialPort(port);
  }

  void Emptybftosv100ComponentBase ::
    set_timeCaller_OutputPort(
        NATIVE_INT_TYPE portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  Emptybftosv100ComponentBase ::
    Emptybftosv100ComponentBase(const char* compName) :
      Fw::ActiveComponentBase(compName)
  {

  }

  Emptybftosv100ComponentBase ::
    ~Emptybftosv100ComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  NATIVE_INT_TYPE Emptybftosv100ComponentBase ::
    getNum_TODO_InputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_TODO_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  NATIVE_INT_TYPE Emptybftosv100ComponentBase ::
    getNum_prmGetOut_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_prmGetOut_OutputPort));
  }

  NATIVE_INT_TYPE Emptybftosv100ComponentBase ::
    getNum_prmSetOut_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_prmSetOut_OutputPort));
  }

  NATIVE_INT_TYPE Emptybftosv100ComponentBase ::
    getNum_timeCaller_OutputPorts()
  {
    return static_cast<NATIVE_INT_TYPE>(FW_NUM_ARRAY_ELEMENTS(this->m_timeCaller_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool Emptybftosv100ComponentBase ::
    isConnected_prmGetOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_prmGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmGetOut_OutputPort[portNum].isConnected();
  }

  bool Emptybftosv100ComponentBase ::
    isConnected_prmSetOut_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmSetOut_OutputPort[portNum].isConnected();
  }

  bool Emptybftosv100ComponentBase ::
    isConnected_timeCaller_OutputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_timeCaller_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void Emptybftosv100ComponentBase ::
    TODO_handlerBase(
        NATIVE_INT_TYPE portNum,
        NATIVE_UINT_TYPE context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_TODO_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    TODO_preMsgHook(
      portNum,
      context
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serialize(
      static_cast<NATIVE_INT_TYPE>(TODO_SCHED)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serialize(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument context
    _status = msg.serialize(context);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::QueueBlocking _block = Os::Queue::QUEUE_NONBLOCKING;
    Os::Queue::QueueStatus qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::QUEUE_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  // ----------------------------------------------------------------------
  // Pre-message hooks for typed async input ports
  //
  // Each of these functions is invoked just before processing a message
  // on the corresponding port. By default, they do nothing. You can
  // override them to provide specific pre-message behavior.
  // ----------------------------------------------------------------------

  void Emptybftosv100ComponentBase ::
    TODO_preMsgHook(
        NATIVE_INT_TYPE portNum,
        NATIVE_UINT_TYPE context
    )
  {
    // Default: no-op
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time Emptybftosv100ComponentBase ::
    getTime()
  {
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_timeCaller_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Message dispatch functions
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus Emptybftosv100ComponentBase ::
    doDispatch()
  {
    ComponentIpcSerializableBuffer msg;
    NATIVE_INT_TYPE priority = 0;

    Os::Queue::QueueStatus msgStatus = this->m_queue.receive(
      msg,
      priority,
      Os::Queue::QUEUE_BLOCKING
    );
    FW_ASSERT(
      msgStatus == Os::Queue::QUEUE_OK,
      static_cast<FwAssertArgType>(msgStatus)
    );

    // Reset to beginning of buffer
    msg.resetDeser();

    NATIVE_INT_TYPE desMsg = 0;
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    MsgTypeEnum msgType = static_cast<MsgTypeEnum>(desMsg);

    if (msgType == EMPTYBFTOSV100_COMPONENT_EXIT) {
      return MSG_DISPATCH_EXIT;
    }

    NATIVE_INT_TYPE portNum = 0;
    deserStatus = msg.deserialize(portNum);
    FW_ASSERT(
      deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(deserStatus)
    );

    switch (msgType) {
      // Handle async input port TODO
      case TODO_SCHED: {
        // Deserialize argument context
        NATIVE_UINT_TYPE context;
        deserStatus = msg.deserialize(context);
        FW_ASSERT(
          deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(deserStatus)
        );
        // Call handler function
        this->TODO_handler(
          portNum,
          context
        );

        break;
      }

      default:
        return MSG_DISPATCH_ERROR;
    }

    return MSG_DISPATCH_OK;
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void Emptybftosv100ComponentBase ::
    m_p_TODO_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        NATIVE_UINT_TYPE context
    )
  {
    FW_ASSERT(callComp);
    Emptybftosv100ComponentBase* compPtr = static_cast<Emptybftosv100ComponentBase*>(callComp);
    compPtr->TODO_handlerBase(
      portNum,
      context
    );
  }

}
